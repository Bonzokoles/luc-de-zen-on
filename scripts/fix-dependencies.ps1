#!/usr/bin/env pwsh
# MYBONZO DEPENDENCY FIX SCRIPT
# Automatyczne naprawianie zale≈ºno≈õci na bazie SYSTEM_ANALYSIS.md
# Kompatybilny z PowerShell Core i Windows PowerShell

param(
    [switch]$Force,
    [switch]$FullClean,
    [switch]$SecurityAudit
)

# =================================================================
# CONFIGURATION
# =================================================================

$PROJECT_NAME = "MyBonzo"
$BACKUP_DIR = "BACKUPS"
$LOG_FILE = "dependency-fix-$(Get-Date -Format 'yyyy-MM-dd-HHmm').log"

# Kolory dla output
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    
    $colorMap = @{
        "Red"     = [ConsoleColor]::Red
        "Green"   = [ConsoleColor]::Green
        "Yellow"  = [ConsoleColor]::Yellow
        "Blue"    = [ConsoleColor]::Blue
        "Cyan"    = [ConsoleColor]::Cyan
        "Magenta" = [ConsoleColor]::Magenta
        "White"   = [ConsoleColor]::White
    }
    
    Write-Host $Message -ForegroundColor $colorMap[$Color]
}

# Logging function
function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp - $Message" | Out-File -FilePath $LOG_FILE -Append -Encoding UTF8
    Write-ColorOutput $Message "Cyan"
}

# =================================================================
# MAIN SCRIPT
# =================================================================

Write-ColorOutput "üîß $PROJECT_NAME - Naprawianie Zale≈ºno≈õci" "Green"
Write-ColorOutput "=======================================================" "Blue"
Write-Log "Rozpoczynam naprawƒô zale≈ºno≈õci projektu $PROJECT_NAME"

# Sprawd≈∫ czy jeste≈õmy w prawid≈Çowym katalogu
if (-not (Test-Path "package.json")) {
    Write-ColorOutput "‚ùå B≈ÇƒÖd: Nie znaleziono package.json w bie≈ºƒÖcym katalogu!" "Red"
    Write-ColorOutput "üí° Upewnij siƒô, ≈ºe jeste≈õ w g≈Ç√≥wnym katalogu projektu" "Yellow"
    exit 1
}

Write-Log "Znaleziono package.json - kontynuujƒô"

# =================================================================
# STEP 1: CREATE BACKUP
# =================================================================

Write-ColorOutput "üíæ Krok 1: Tworzenie kopii zapasowej..." "Yellow"

$backupTimestamp = Get-Date -Format "yyyy-MM-dd-HHmm"
if (-not (Test-Path $BACKUP_DIR)) {
    New-Item -ItemType Directory -Path $BACKUP_DIR | Out-Null
}

try {
    Copy-Item "package.json" "$BACKUP_DIR/package.json.backup-$backupTimestamp"
    Write-Log "‚úÖ Utworzono backup package.json"
    
    if (Test-Path "pnpm-lock.yaml") {
        Copy-Item "pnpm-lock.yaml" "$BACKUP_DIR/pnpm-lock.yaml.backup-$backupTimestamp"
        Write-Log "‚úÖ Utworzono backup pnpm-lock.yaml"
    }
    
    if (Test-Path "package-lock.json") {
        Copy-Item "package-lock.json" "$BACKUP_DIR/package-lock.json.backup-$backupTimestamp"
        Write-Log "‚úÖ Utworzono backup package-lock.json"
    }
}
catch {
    Write-ColorOutput "‚ö†Ô∏è Ostrze≈ºenie: Nie mo≈ºna utworzyƒá backupu - kontynuujƒô" "Yellow"
    Write-Log "Ostrze≈ºenie backupu: $($_.Exception.Message)"
}

# =================================================================
# STEP 2: CLEAN CACHE AND MODULES
# =================================================================

Write-ColorOutput "üßπ Krok 2: Czyszczenie cache i modu≈Ç√≥w..." "Yellow"

if ($FullClean -or $Force) {
    Write-Log "Wykonujƒô pe≈Çne czyszczenie (w≈ÇƒÖczajƒÖc node_modules)"
    
    # Usu≈Ñ node_modules
    if (Test-Path "node_modules") {
        Write-Log "Usuwam node_modules..."
        Remove-Item -Recurse -Force "node_modules" -ErrorAction SilentlyContinue
    }
    
    # Usu≈Ñ lock files je≈õli force
    if ($Force) {
        if (Test-Path "pnpm-lock.yaml") {
            Write-Log "Usuwam pnpm-lock.yaml..."
            Remove-Item "pnpm-lock.yaml" -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "package-lock.json") {
            Write-Log "Usuwam package-lock.json..."
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
        }
    }
}

# Usu≈Ñ cache directories
$cacheDirectories = @(
    ".astro",
    ".vite", 
    "node_modules/.vite",
    "node_modules/.cache",
    "dist"
)

foreach ($dir in $cacheDirectories) {
    if (Test-Path $dir) {
        Write-Log "Usuwam cache: $dir"
        Remove-Item -Recurse -Force $dir -ErrorAction SilentlyContinue
    }
}

# PNPM specific cleanup
try {
    Write-Log "Czyszczƒô PNPM store..."
    pnpm store prune 2>$null
    Write-Log "‚úÖ PNPM store wyczyszczony"
}
catch {
    Write-Log "‚ö†Ô∏è Nie mo≈ºna wyczy≈õciƒá PNPM store (mo≈ºe nie byƒá zainstalowany)"
}

# NPM cache cleanup
try {
    Write-Log "Czyszczƒô NPM cache..."
    npm cache clean --force 2>$null
    Write-Log "‚úÖ NPM cache wyczyszczony"
}
catch {
    Write-Log "‚ö†Ô∏è Nie mo≈ºna wyczy≈õciƒá NPM cache"
}

# =================================================================
# STEP 3: REINSTALL DEPENDENCIES
# =================================================================

Write-ColorOutput "üì¶ Krok 3: Reinstalacja zale≈ºno≈õci..." "Yellow"

# Sprawd≈∫ kt√≥ry package manager jest dostƒôpny
$packageManager = $null

if (Get-Command "pnpm" -ErrorAction SilentlyContinue) {
    $packageManager = "pnpm"
    Write-Log "Znaleziono PNPM - u≈ºywam jako domy≈õlny"
}
elseif (Get-Command "npm" -ErrorAction SilentlyContinue) {
    $packageManager = "npm"
    Write-Log "Znaleziono NPM - u≈ºywam jako fallback"
}
else {
    Write-ColorOutput "‚ùå B≈ÇƒÖd: Nie znaleziono ani PNPM ani NPM!" "Red"
    exit 1
}

# Instalacja zale≈ºno≈õci
Write-Log "Instalujƒô zale≈ºno≈õci u≈ºywajƒÖc $packageManager..."

try {
    if ($packageManager -eq "pnpm") {
        if ($Force) {
            & pnpm install --force --prefer-frozen-lockfile=false
        }
        else {
            & pnpm install
        }
    }
    else {
        if ($Force) {
            & npm install --force
        }
        else {
            & npm install
        }
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Log "‚úÖ Zale≈ºno≈õci zainstalowane pomy≈õlnie"
    }
    else {
        throw "Package manager zwr√≥ci≈Ç kod b≈Çƒôdu $LASTEXITCODE"
    }
}
catch {
    Write-ColorOutput "‚ùå B≈ÇƒÖd podczas instalacji zale≈ºno≈õci: $($_.Exception.Message)" "Red"
    Write-Log "B≈ÇƒÖd instalacji: $($_.Exception.Message)"
    exit 1
}

# =================================================================
# STEP 4: SECURITY AUDIT
# =================================================================

if ($SecurityAudit) {
    Write-ColorOutput "üõ°Ô∏è Krok 4: Audyt bezpiecze≈Ñstwa..." "Yellow"
    
    try {
        Write-Log "Uruchamiam audyt bezpiecze≈Ñstwa..."
        
        if ($packageManager -eq "pnpm") {
            & pnpm audit --fix
        }
        else {
            & npm audit fix --force
        }
        
        Write-Log "‚úÖ Audyt bezpiecze≈Ñstwa zako≈Ñczony"
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è Ostrze≈ºenie: Problemy z audytem bezpiecze≈Ñstwa" "Yellow"
        Write-Log "Ostrze≈ºenie audytu: $($_.Exception.Message)"
    }
}

# =================================================================
# STEP 5: DEPENDENCY CHECK
# =================================================================

Write-ColorOutput "üîç Krok 5: Sprawdzanie zale≈ºno≈õci..." "Yellow"

try {
    Write-Log "Sprawdzam listƒô zainstalowanych pakiet√≥w..."
    
    if ($packageManager -eq "pnpm") {
        & pnpm list --depth=0
    }
    else {
        & npm list --depth=0
    }
    
    Write-Log "‚úÖ Lista zale≈ºno≈õci sprawdzona"
}
catch {
    Write-ColorOutput "‚ö†Ô∏è Ostrze≈ºenie: Problemy ze sprawdzeniem zale≈ºno≈õci" "Yellow"
    Write-Log "Ostrze≈ºenie list: $($_.Exception.Message)"
}

# =================================================================
# STEP 6: BUILD TEST
# =================================================================

Write-ColorOutput "üî® Krok 6: Test kompilacji..." "Yellow"

try {
    Write-Log "Testujƒô kompilacjƒô projektu..."
    
    if ($packageManager -eq "pnpm") {
        & pnpm build
    }
    else {
        & npm run build
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Log "‚úÖ Projekt kompiluje siƒô poprawnie"
    }
    else {
        throw "Build zwr√≥ci≈Ç kod b≈Çƒôdu $LASTEXITCODE"
    }
}
catch {
    Write-ColorOutput "‚ö†Ô∏è Ostrze≈ºenie: Problemy z kompilacjƒÖ - mo≈ºe wymagaƒá dodatkowej konfiguracji" "Yellow"
    Write-Log "Ostrze≈ºenie build: $($_.Exception.Message)"
}

# =================================================================
# STEP 7: ENVIRONMENT CHECK
# =================================================================

Write-ColorOutput "‚öôÔ∏è Krok 7: Sprawdzanie konfiguracji ≈õrodowiska..." "Yellow"

# Sprawd≈∫ .env files
if (-not (Test-Path ".env")) {
    if (Test-Path ".env.example") {
        Write-ColorOutput "üìù Kopiujƒô .env.example do .env" "Yellow"
        Copy-Item ".env.example" ".env"
        Write-Log "‚úÖ Skopiowano .env.example do .env"
    }
    else {
        Write-ColorOutput "‚ö†Ô∏è Brak pliku .env i .env.example - mo≈ºe wymagaƒá rƒôcznej konfiguracji" "Yellow"
        Write-Log "Ostrze≈ºenie: Brak konfiguracji ≈õrodowiska"
    }
}
else {
    Write-Log "‚úÖ Plik .env istnieje"
}

# =================================================================
# FINAL SUMMARY
# =================================================================

Write-ColorOutput "‚úÖ Naprawiono zale≈ºno≈õci $PROJECT_NAME!" "Green"
Write-ColorOutput "=======================================================" "Blue"
Write-ColorOutput "üìã Podsumowanie:" "White"
Write-ColorOutput "   ‚Ä¢ Utworzono kopie zapasowe" "White"
Write-ColorOutput "   ‚Ä¢ Wyczyszczono cache i stare pliki" "White"
Write-ColorOutput "   ‚Ä¢ Przeinstalowano zale≈ºno≈õci ($packageManager)" "White"

if ($SecurityAudit) {
    Write-ColorOutput "   ‚Ä¢ Przeprowadzono audyt bezpiecze≈Ñstwa" "White"
}

Write-ColorOutput "   ‚Ä¢ Przetestowano kompilacjƒô" "White"
Write-ColorOutput "   ‚Ä¢ Sprawdzono konfiguracjƒô ≈õrodowiska" "White"
Write-ColorOutput "" "White"
Write-ColorOutput "üìù Log zapisano w: $LOG_FILE" "Cyan"
Write-ColorOutput "üí° Mo≈ºna teraz uruchomiƒá: pnpm dev lub npm run dev" "Green"

Write-Log "Skrypt naprawy zale≈ºno≈õci zako≈Ñczony pomy≈õlnie"