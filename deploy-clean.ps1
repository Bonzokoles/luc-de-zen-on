# MyBonzo Production Deployment Script
# Wdra≈ºa zmiany z luc-de-zen-on do mybonzo.com

param(
    [switch]$Force,
    [switch]$SkipTests
)

Write-Host "üöÄ MyBonzo Production Deployment Started" -ForegroundColor Cyan
Write-Host "=====================================`n" -ForegroundColor Cyan

# Sprawd≈∫ czy jeste≈õmy w development repo
$currentPath = Get-Location
if ($currentPath.Path -notlike "*luc-de-zen-on*") {
    Write-Host "‚ùå Musisz uruchamiaƒá z katalogu luc-de-zen-on" -ForegroundColor Red
    exit 1
}

# 1. Build development version
Write-Host "üî® Building development version..." -ForegroundColor Yellow
$buildResult = pnpm build
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Development build failed!" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Development build successful" -ForegroundColor Green

# 2. Sprawd≈∫ czy production path istnieje  
$productionPath = "Q:\mybonzo\mybonzo-production"
if (-not (Test-Path $productionPath)) {
    Write-Host "üìÅ Creating production repository..." -ForegroundColor Yellow
    
    # Przejd≈∫ do katalogu parent
    cd Q:\mybonzo
    
    # Sklonuj development repo jako production
    Write-Host "üì• Cloning development repo..." -ForegroundColor Cyan
    git clone https://github.com/Bonzokoles/luc-de-zen-on.git mybonzo-production
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Failed to clone repository!" -ForegroundColor Red
        exit 1
    }
    
    cd mybonzo-production
    
    # Usu≈Ñ development remote
    git remote remove origin
    
    Write-Host "‚ö†Ô∏è UWAGA: Musisz utworzyƒá nowe repo 'mybonzo-production' na GitHub" -ForegroundColor Yellow
    Write-Host "   Nastƒôpnie uruchom: git remote add origin https://github.com/Bonzokoles/mybonzo-production.git" -ForegroundColor Yellow
    
    # Wr√≥ƒá do development
    cd Q:\mybonzo\luc-de-zen-on
}

# 3. Synchronizuj pliki
Write-Host "`nüîÑ Synchronizing files to production..." -ForegroundColor Yellow

# Lista plik√≥w do wykluczenia
$excludePatterns = @(
    ".git*",
    "node_modules*",
    ".astro*", 
    "dist*",
    ".env*",
    "*.log*",
    "coverage*",
    ".vscode*",
    "*.backup*"
)

# Kopiuj wszystkie pliki opr√≥cz wykluczonych
Write-Host "üìÇ Copying files..." -ForegroundColor Cyan

# U≈ºyj robocopy dla efektywnej synchronizacji
$robocopyArgs = @(
    "Q:\mybonzo\luc-de-zen-on",
    "Q:\mybonzo\mybonzo-production", 
    "/MIR",  # Mirror directory
    "/XD", ".git", "node_modules", ".astro", "dist", "coverage", ".vscode",  # Exclude directories
    "/XF", "*.log", "*.backup", ".env*",  # Exclude files
    "/NP",   # No progress
    "/NFL",  # No file list
    "/NDL"   # No directory list
)

& robocopy @robocopyArgs | Out-Null

if ($LASTEXITCODE -gt 7) {
    Write-Host "‚ùå File synchronization failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Files synchronized successfully" -ForegroundColor Green

# 4. Przejd≈∫ do production i zbuduj
Write-Host "`nüî® Building production version..." -ForegroundColor Yellow
cd Q:\mybonzo\mybonzo-production

# Zainstaluj dependencies w production
Write-Host "üì¶ Installing production dependencies..." -ForegroundColor Cyan
pnpm install --prod

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Production dependencies installation failed!" -ForegroundColor Red
    cd Q:\mybonzo\luc-de-zen-on
    exit 1
}

# Build production
Write-Host "‚ö° Building for production..." -ForegroundColor Cyan  
pnpm build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Production build failed!" -ForegroundColor Red
    cd Q:\mybonzo\luc-de-zen-on
    exit 1
}

Write-Host "‚úÖ Production build successful" -ForegroundColor Green

# 5. Commit i push (je≈õli remote skonfigurowane)
Write-Host "`nüì§ Committing changes..." -ForegroundColor Yellow

git add -A
$commitMessage = "üöÄ Production deployment $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
git commit -m $commitMessage

# Sprawd≈∫ czy remote istnieje
$remoteCheck = git remote -v 2>$null
if ($remoteCheck) {
    Write-Host "üåê Pushing to production repository..." -ForegroundColor Cyan
    git push origin main
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Successfully pushed to production!" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è Push failed - mo≈ºliwe ≈ºe remote nie jest skonfigurowany" -ForegroundColor Yellow
    }
}
else {
    Write-Host "‚ö†Ô∏è Brak remote origin - skonfiguruj najpierw GitHub repo" -ForegroundColor Yellow  
    Write-Host "   git remote add origin https://github.com/Bonzokoles/mybonzo-production.git" -ForegroundColor Cyan
}

# 6. Finalizacja
cd Q:\mybonzo\luc-de-zen-on

Write-Host "`nüéâ DEPLOYMENT COMPLETED!" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host "‚úÖ Development build: SUCCESS" -ForegroundColor Green
Write-Host "‚úÖ File sync: SUCCESS" -ForegroundColor Green  
Write-Host "‚úÖ Production build: SUCCESS" -ForegroundColor Green
Write-Host "üìÅ Production location: Q:\mybonzo\mybonzo-production" -ForegroundColor Cyan
Write-Host "`nüîó Next steps:" -ForegroundColor Yellow
Write-Host "   1. Skonfiguruj GitHub repo dla production" -ForegroundColor White
Write-Host "   2. Skonfiguruj Cloudflare Pages dla mybonzo.com" -ForegroundColor White
Write-Host "   3. Dodaj environment variables w Cloudflare" -ForegroundColor White

Write-Host "`nüöÄ Ready for mybonzo.com deployment!" -ForegroundColor Green