#!/bin/bash
# MyBonzo Development Helper Scripts

# Kolory dla lepszej czytelno≈õci
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcja do wy≈õwietlania kolorowych komunikat√≥w
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funkcja sprawdzajƒÖca status repozytorium
check_repo_status() {
    print_status "Sprawdzanie statusu repozytorium..."
    
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "Masz niezcommitowane zmiany!"
        git status --short
        return 1
    else
        print_success "Repozytorium jest czyste"
        return 0
    fi
}

# Funkcja tworzƒÖca nowy feature branch
create_feature_branch() {
    if [ -z "$1" ]; then
        print_error "U≈ºycie: create_feature_branch <nazwa-funkcjonalno≈õci>"
        return 1
    fi
    
    local branch_name="feature/$1"
    
    print_status "Tworzenie nowego branch: $branch_name"
    
    # Sprawd≈∫ czy jeste≈õ na main
    current_branch=$(git branch --show-current)
    if [ "$current_branch" != "main" ]; then
        print_warning "Nie jeste≈õ na branch main. Prze≈ÇƒÖczam..."
        git checkout main
    fi
    
    # Aktualizuj main
    print_status "Aktualizowanie main branch..."
    git pull origin main
    
    # Utw√≥rz nowy branch
    git checkout -b "$branch_name"
    
    print_success "Branch $branch_name utworzony pomy≈õlnie!"
    print_status "Mo≈ºesz teraz rozpoczƒÖƒá pracƒô nad funkcjonalno≈õciƒÖ."
}

# Funkcja do szybkiego commitowania
quick_commit() {
    if [ -z "$1" ]; then
        print_error "U≈ºycie: quick_commit <wiadomo≈õƒá_commit>"
        return 1
    fi
    
    print_status "Dodawanie zmian..."
    git add .
    
    print_status "Commitowanie..."
    git commit -m "$1"
    
    print_success "Zmiany zosta≈Çy zacommitowane!"
}

# Funkcja do testowania lokalnego
test_local() {
    print_status "Uruchamianie test√≥w lokalnych..."
    
    # Build test
    print_status "Testowanie build..."
    if npm run build; then
        print_success "Build zako≈Ñczony pomy≈õlnie!"
    else
        print_error "Build failed!"
        return 1
    fi
    
    # Preview test
    print_status "Uruchamianie preview..."
    print_warning "Sprawd≈∫ aplikacjƒô w przeglƒÖdarce: http://localhost:4321"
    npm run preview
}

# Funkcja do przygotowania merge
prepare_merge() {
    local current_branch=$(git branch --show-current)
    
    if [ "$current_branch" = "main" ]; then
        print_error "Nie mo≈ºesz mergowaƒá main do siebie!"
        return 1
    fi
    
    print_status "Przygotowywanie do merge branch: $current_branch"
    
    # Sprawd≈∫ status
    if ! check_repo_status; then
        print_error "Zacommituj lub stash swoje zmiany przed merge!"
        return 1
    fi
    
    # Aktualizuj main
    print_status "Aktualizowanie main..."
    git checkout main
    git pull origin main
    
    # Wr√≥ƒá na feature branch i rebase
    git checkout "$current_branch"
    print_status "Wykonywanie rebase..."
    
    if git rebase main; then
        print_success "Rebase zako≈Ñczony pomy≈õlnie!"
        print_status "Mo≈ºesz teraz push'owaƒá i tworzyƒá PR"
        print_warning "Komenda: git push origin $current_branch"
    else
        print_error "Konflikt podczas rebase! RozwiƒÖ≈º konflikty i kontynuuj."
        print_warning "Po rozwiƒÖzaniu: git rebase --continue"
    fi
}

# Funkcja rollback
emergency_rollback() {
    print_warning "üö® AWARYJNY ROLLBACK üö®"
    print_warning "Ta operacja cofnie ostatni commit z main branch!"
    
    read -p "Czy jeste≈õ pewien? (yes/no): " confirm
    
    if [ "$confirm" = "yes" ]; then
        print_status "Wykonywanie rollback..."
        git checkout main
        git reset --hard HEAD~1
        
        print_warning "Push'owanie rollback..."
        git push --force-with-lease origin main
        
        print_success "Rollback wykonany! Sprawd≈∫ Cloudflare deployment."
    else
        print_status "Rollback anulowany."
    fi
}

# Funkcja help
show_help() {
    echo -e "${BLUE}MyBonzo Development Helper${NC}"
    echo ""
    echo "Dostƒôpne komendy:"
    echo "  check_status           - Sprawd≈∫ status repozytorium"
    echo "  new_feature <nazwa>    - Utw√≥rz nowy feature branch"
    echo "  commit <wiadomo≈õƒá>     - Szybki commit"
    echo "  test                   - Testuj lokalnie"
    echo "  prepare_merge          - Przygotuj do merge"
    echo "  rollback              - Awaryjny rollback"
    echo "  help                  - Poka≈º tƒô pomoc"
    echo ""
    echo "Przyk≈Çady:"
    echo "  ./dev-helper.sh new_feature polaczek-docs"
    echo "  ./dev-helper.sh commit \"feat: dodanie nowej funkcjonalno≈õci\""
    echo "  ./dev-helper.sh test"
}

# Obs≈Çuga argument√≥w
case "$1" in
    "check_status")
        check_repo_status
        ;;
    "new_feature")
        create_feature_branch "$2"
        ;;
    "commit")
        quick_commit "$2"
        ;;
    "test")
        test_local
        ;;
    "prepare_merge")
        prepare_merge
        ;;
    "rollback")
        emergency_rollback
        ;;
    "help"|"")
        show_help
        ;;
    *)
        print_error "Nieznana komenda: $1"
        show_help
        exit 1
        ;;
esac