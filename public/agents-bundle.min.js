var AgentsBundle=function(){"use strict";class t{constructor(t){this.status="ready",this.history=[],this.lastActivity=Date.now(),this.config=t,this.log(`Agent ${t.name} initialized`)}get id(){return this.config.id}get name(){return this.config.name}get model(){return this.config.model}get category(){return this.config.category}get icon(){return this.config.icon}get color(){return this.config.color}get priority(){return this.config.priority}get description(){return this.config.description}get capabilities(){return this.config.capabilities}get agentStatus(){return this.status}get agentHistory(){return[...this.history]}updateStatus(t){this.status=t,this.lastActivity=Date.now(),this.log(`Status updated to: ${t}`)}addToHistory(t){this.history.push({...t,timestamp:Date.now()}),this.history.length>50&&(this.history=this.history.slice(-50))}log(t,e="info"){const n=`[${(new Date).toISOString()}] ${this.name}: ${t}`;switch(e){case"warn":console.warn(n);break;case"error":console.error(n);break;default:console.log(n)}}async healthCheck(){try{return this.updateStatus("processing"),await new Promise(t=>setTimeout(t,100)),this.updateStatus("ready"),!0}catch(t){return this.updateStatus("error"),this.log(`Health check failed: ${t}`,"error"),!1}}getInfo(){return{...this.config,status:this.status,lastActivity:this.lastActivity}}clearHistory(){this.history=[],this.log("History cleared")}async delay(t){return new Promise(e=>setTimeout(e,t))}sanitizeInput(t){return t.trim().replace(/[<>]/g,"")}formatResponse(t){return t.trim()}}class e extends t{constructor(t){super(t),this.config=t,this.apiEndpoint=`https://generativelanguage.googleapis.com/v1beta/models/${t.model||"gemini-pro"}:generateContent`}async chat(t,e){try{this.updateStatus("processing");const e=await fetch(`${this.apiEndpoint}?key=${this.config.apiKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:t}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:1024}})});if(!e.ok)throw new Error(`Gemini API error: ${e.status}`);const n=await e.json(),o=n.candidates?.[0]?.content?.parts?.[0]?.text||"Brak odpowiedzi";return this.updateStatus("ready"),this.addToHistory({type:"chat",input:t,output:o}),o}catch(t){throw this.updateStatus("error"),console.error(" Gemini Pro error:",t),t}}async generateCode(t,e){throw new Error("Method not implemented.")}async analyzeImage(t,e){throw new Error("Method not implemented.")}async analyzeCode(t,e="typescript"){const n=`Przeanalizuj następujący kod ${e} i podaj szczegółową ocenę:\n\n\`\`\`${e}\n${t}\n\`\`\`\n\nOceń:\n1. Jakość kodu\n2. Potencjalne problemy\n3. Sugestie ulepszeń\n4. Bezpieczeństwo\n5. Wydajność`;return this.chat(n)}async generateText(t,e="professional"){const n=`Napisz tekst w stylu ${e} na temat: ${t}`;return this.chat(n)}}class n extends t{constructor(t){super(t),this.config=t,this.apiEndpoint="https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent"}async chat(t,e){throw new Error("Method not implemented.")}async generateCode(t,e){throw new Error("Method not implemented.")}async analyzeImage(t,e="Opisz co widzisz na tym obrazie"){try{this.updateStatus("processing");const n=await fetch(`${this.apiEndpoint}?key=${this.config.apiKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:e},{inline_data:{mime_type:"image/jpeg",data:t.split(",")[1]}}]}],generationConfig:{temperature:.4,topK:32,topP:1,maxOutputTokens:4096}})});if(!n.ok)throw new Error(`Gemini Vision API error: ${n.status}`);const o=await n.json(),a=o.candidates?.[0]?.content?.parts?.[0]?.text||"Nie udało się przeanalizować obrazu";return this.updateStatus("ready"),this.addToHistory({type:"image_analysis",input:e,output:a}),a}catch(t){throw this.updateStatus("error"),console.error(" Gemini Vision error:",t),t}}async extractText(t){return this.analyzeImage(t,"Wyciągnij cały tekst z tego obrazu. Zachowaj formatowanie i strukturę.")}async identifyObjects(t){return this.analyzeImage(t,"Zidentyfikuj wszystkie obiekty na tym obrazie i opisz ich lokalizację.")}}class o extends t{constructor(t){super(t),this.config=t,this.apiEndpoint=`https://${t.location||"us-central1"}-aiplatform.googleapis.com/v1/projects/${t.projectId}/locations/${t.location||"us-central1"}/publishers/google/models/code-bison:predict`}async chat(t,e){return this.generateCode(t)}async analyzeImage(t,e){throw new Error("Method not implemented.")}async generateCode(t,e="typescript"){try{this.updateStatus("processing");const n="Wygeneruj kod w języku "+e+" na podstawie opisu: "+t+"\n      \n\nWymagania:\n- Kod powinien być czytelny i dobrze skomentowany\n- Użyj najlepszych praktyk dla "+e+"\n- Dodaj obsługę błędów gdzie to konieczne\n- Kod powinien być gotowy do użycia",o=await fetch(this.apiEndpoint,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({instances:[{prefix:n}],parameters:{temperature:.2,maxOutputTokens:1024,candidateCount:1}})});if(!o.ok)throw new Error(`Code Bison API error: ${o.status}`);const a=await o.json(),i=a.predictions?.[0]?.content||"Nie udało się wygenerować kodu";return this.updateStatus("ready"),this.addToHistory({type:"code_generation",input:t,output:i}),i}catch(t){throw this.updateStatus("error"),console.error("💻 Code Bison error:",t),t}}async reviewCode(t,e="typescript"){const n="Przejrzyj następujący kod "+e+" i podaj szczegółową analizę:\n\n```"+e+"\n"+t+"\n```\n\nSprawdź:\n- Jakość kodu i czytelność\n- Potencjalne błędy i problemy\n- Sugestie optymalizacji\n- Zgodność z najlepszymi praktykami\n- Bezpieczeństwo kodu";return this.generateCode(n,e)}async debugCode(t,e,n="typescript"){const o="Pomóż debugować kod "+n+":\n\nKod:\n```"+n+"\n"+t+"\n```\n\nBłąd: "+e+"\n\nZnajdź przyczynę błędu i zaproponuj poprawkę.";return this.generateCode(o,n)}async refactorCode(t,e="typescript"){const n="Refactor this "+e+" code to improve:\n- Readability\n- Performance\n- Maintainability\n- Best practices\n\nOriginal code:\n```"+e+"\n"+t+"\n```\n\nProvide the refactored version with explanations of changes:";return this.generateCode(n,e)}async generateDocumentation(t,e="typescript"){const n="Generate comprehensive documentation for this "+e+" code:\n\n```"+e+"\n"+t+"\n```\n\nInclude:\n- Function/class descriptions\n- Parameter explanations\n- Return value descriptions\n- Usage examples\n- JSDoc/TSDoc format";return this.generateCode(n,e)}async explainCode(t,e="typescript"){const n="Explain this "+e+" code in detail:\n\n```"+e+"\n"+t+"\n```\n\nProvide:\n- Step-by-step explanation\n- Purpose of each part\n- How it works\n- Potential improvements";return this.generateCode(n,e)}}class a extends t{constructor(t){super(t),this.config=t,this.apiEndpoint=`https://${t.location||"us-central1"}-aiplatform.googleapis.com/v1/projects/${t.projectId}/locations/${t.location||"us-central1"}/publishers/google/models/text-bison:predict`}async generateText(t,e=512){try{this.updateStatus("processing");const n=await fetch(this.apiEndpoint,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({instances:[{prompt:t}],parameters:{temperature:.7,maxOutputTokens:e,topP:.8,topK:40}})});if(!n.ok)throw new Error(`Text Bison API error: ${n.status}`);const o=await n.json(),a=o.predictions?.[0]?.content||"Nie udało się wygenerować tekstu";return this.updateStatus("ready"),this.addToHistory({type:"text_generation",input:t,output:a}),a}catch(t){throw this.updateStatus("error"),console.error("📝 Text Bison error:",t),t}}async chat(t,e){return this.generateText(t)}async generateCode(t,e){throw new Error("Method not implemented.")}async analyzeImage(t,e){throw new Error("Method not implemented.")}async summarize(t){const e="Podsumuj następujący tekst w sposób zwięzły i treściwy:\n\n"+t+"\n\nPodsumowanie:";return this.generateText(e,256)}async translate(t,e="polski"){const n="Przetłumacz następujący tekst na język "+e+":\n\n"+t+"\n\nTłumaczenie:";return this.generateText(n,512)}}class i extends t{constructor(t){super({id:"business_assistant_agent",name:"Business Assistant",model:"business-assistant",category:"productivity",icon:"💼",color:"#1f2937",priority:"HIGH",description:"Comprehensive business operations and management assistant",capabilities:["Task Management","Meeting Planning","Document Generation","Email Drafting","Project Planning"]})}async chat(t,e){this.updateStatus("processing");const n=`Response for: ${t}`;return this.updateStatus("ready"),n}async generateCode(t,e){throw new Error("Method not implemented.")}async analyzeImage(t,e){throw new Error("Method not implemented.")}async createMeetingAgenda(t,e,n){try{this.updateStatus("processing");const o=`Stwórz profesjonalną agendę spotkania:\n\nTemat: ${t}\nCzas trwania: ${e} minut\nUczestnicy: ${n.join(", ")}\n\nAgenda powinna zawierać:\n- Cel spotkania\n- Punkty dyskusji z przybliżonym czasem na każdy punkt\n- Akcje i odpowiedzialności po spotkaniu\n- Zasoby potrzebne do spotkania\n\nProszę stwórz agendę w formacie JSON z polami: title, purpose, agendaItems (tablica obiektów z punktami), actions, resources`;return await this.chat(o)}catch(t){throw this.updateStatus("error"),new Error(`Failed to create meeting agenda: ${t}`)}}async draftEmail(t,e,n,o){try{this.updateStatus("processing");const a=`Stwórz profesjonalny email na podstawie następujących danych:\n\nTemat: ${t}\nTreść: ${e}\nOdbiorca: ${n}\nNadawca: ${o}\n\nEmail powinien zawierać:\n- Przywitanie\n- Główną treść wiadomości\n- Zakończenie z podpisem\n- Styl odpowiedni dla kontekstu biznesowego`;return await this.chat(a)}catch(t){throw this.updateStatus("error"),new Error(`Failed to draft email: ${t}`)}}async generateFinancialReport(t,e,n){try{this.updateStatus("processing");const o=t-e,a=(o/t*100).toFixed(2),i=`Stwórz raport finansowy dla okresu ${n}:\n\nDane finansowe:\n- Przychody: ${t.toLocaleString()} PLN\n- Wydatki: ${e.toLocaleString()} PLN\n- Zysk: ${o.toLocaleString()} PLN\n- Marża: ${a}%\n\nRaport powinien zawierać:\n- Podsumowanie finansowe\n- Analizę wydatków i przychodów\n- Wskazówki dotyczące poprawy wyników\n- Prognozę na następny okres`;return await this.chat(i)}catch(t){throw this.updateStatus("error"),new Error(`Failed to generate financial report: ${t}`)}}async planEcommerceLaunch(t,e,n){try{this.updateStatus("processing");const o=`Zaprojektuj plan wdrożenia sklepu internetowego dla produktu:\n\nNazwa produktu: ${t}\nDocelowa grupa: ${e}\nData wdrożenia: ${n}\n\nPlan powinien zawierać:\n- Etapy przygotowania sklepu\n- Strategię marketingową\n- Kanały promocji\n- Harmonogram działań\n- Krytyczne punkty do uwagi`;return await this.chat(o)}catch(t){throw this.updateStatus("error"),new Error(`Failed to plan e-commerce launch: ${t}`)}}async manageTasks(t){try{this.updateStatus("processing");const e=`Zarządzaj listą zadań:\n\nZadania:\n${t.map((t,e)=>`${e+1}. ${t.description} (Priorytet: ${t.priority}, Status: ${t.status})`).join("\n")}\n\nProszę stworzyć:\n- Raport zadań\n- Priorytetyzację zadań\n- Proponowane kroki działania\n- Harmonogram realizacji`;return await this.chat(e)}catch(t){throw this.updateStatus("error"),new Error(`Failed to manage tasks: ${t}`)}}}class s{constructor(t){this.config=t,console.log("🔧 GoogleAgentManager initialized for browser environment")}async createAgent(){try{const t={parent:`projects/${this.config.projectId}/locations/${this.config.location}`,agent:{displayName:this.config.displayName,defaultLanguageCode:this.config.defaultLanguage,timeZone:this.config.timeZone,description:"Agent utworzony przez POLACZEK Agent System 23",avatarUri:"",enableStackdriverLogging:!0,enableSpellChecking:!0}};return console.log("✅ Google Agent utworzony (mock):",t),{success:!0,config:t}}catch(t){throw console.error("❌ Błąd tworzenia Google Agent:",t),t}}async importFromADK(t){try{console.log(`🔄 Importuję agenta z: ${t}`);const e={name:"ADK_Voice_Agent",description:"Agent zaimportowany z ADK",intents:[{name:"voice_commands",userSays:["otwórz muzykę","uruchom asystenta","zamknij aplikację"],responses:["Wykonuję polecenie","Już się robi","W porządku"]}]},n=this.convertADKToDialogflow(e);return{agent:await this.createAgent(),config:n,status:"imported"}}catch(t){throw console.error("❌ Błąd importu z ADK:",t),t}}convertADKToDialogflow(t){return{intents:t.intents?.map(t=>({displayName:t.name,trainingPhrases:t.userSays?.map(t=>({parts:[{text:t}]}))||[],messages:t.responses?.map(t=>({text:{text:[t]}}))||[]}))||[],entities:t.entities?.map(t=>({displayName:t.name,kind:"KIND_MAP",entities:t.entries?.map(t=>({value:t.value,synonyms:t.synonyms||[t.value]}))||[]}))||[]}}async testConnection(){try{return console.log("✅ Połączenie z Google Cloud nawiązane (mock)"),!0}catch(t){return console.error("❌ Błąd połączenia z Google Cloud:",t),!1}}}class r{constructor(t){this.googleManager=null,t&&(this.googleManager=new s(t))}async importAllADKAgents(t="Q:\\ADK_AGEN_ts_zEN"){try{console.log(`🔄 Skanowanie katalogu ADK: ${t}`);const e=["voice_assistant_pl","music_controller","ai_helper","system_navigator"],n=[];for(const o of e)try{console.log(`🔄 Importuję agenta: ${o}`);const e=await this.importSingleADKAgent(o);n.push({name:o,status:"success",agent:e,path:`${t}/${o}`})}catch(e){console.error(`❌ Błąd importu agenta ${o}:`,e),n.push({name:o,status:"error",error:e instanceof Error?e.message:"Unknown error",path:`${t}/${o}`})}return n}catch(t){throw console.error("❌ Błąd skanowania katalogu ADK:",t),t}}async importSingleADKAgent(t){if(!this.googleManager)throw new Error("Google Agent Manager nie jest skonfigurowany");const e=`mock://adk/${t}`;return await this.googleManager.importFromADK(e)}async convertToPolaczekFormat(t){try{return{id:this.generatePolaczekId(t),name:t,description:`Agent zaimportowany z ADK: ${t}`,type:"google-dialogflow",model:"@google/dialogflow-cx",capabilities:this.generateCapabilities(t),systemPrompt:this.generateSystemPrompt(t),configuration:{projectId:"vertxaizenon-project-467918",location:"globalThis",agentId:this.generatePolaczekId(t),language:"pl",timeZone:"Europe/Warsaw"},metadata:{source:"ADK_AGEN_ts_zEN",importedAt:(new Date).toISOString(),originalPath:`mock://adk/${t}`,version:"1.0.0"},createdAt:(new Date).toISOString(),isCustom:!0,isActive:!0}}catch(t){throw console.error("❌ Błąd konwersji do formatu POLACZEK:",t),t}}generatePolaczekId(t){return`google_${t.toLowerCase().replace(/[^a-z0-9]/g,"_").replace(/_+/g,"_").replace(/^_|_$/g,"")}_${Date.now()}`}generateCapabilities(t){return{voice_assistant_pl:["voice_recognition","polish_language","conversation"],music_controller:["music_playback","playlist_management","audio_control"],ai_helper:["ai_assistance","problem_solving","information_lookup"],system_navigator:["system_control","navigation","file_management"]}[t]||["general_assistance"]}generateSystemPrompt(t){return{voice_assistant_pl:"Jesteś asystentem głosowym mówiącym po polsku. Pomagasz użytkownikom w codziennych zadaniach.",music_controller:"Jesteś kontrolerem muzyki. Zarządzasz odtwarzaniem, playlistami i ustawieniami audio.",ai_helper:"Jesteś asystentem AI. Pomagasz rozwiązywać problemy i znajdować informacje.",system_navigator:"Jesteś nawigatortem systemowym. Pomagasz w poruszaniu się po systemie i zarządzaniu plikami."}[t]||"Jesteś pomocnym asystentem AI."}async testADKAvailability(){try{console.log("🔄 Testuję dostępność systemu ADK...");const t="undefined"!=typeof window;return t?console.log("✅ System ADK symulowany - gotowy do importu"):console.log("❌ System ADK niedostępny w tym środowisku"),t}catch(t){return console.error("❌ Błąd testowania ADK:",t),!1}}}class c{constructor(t){this.config=t,console.log("🔧 GoogleAgentFactory initialized for browser environment")}async createGeminiProAgent(){return{id:"gemini_pro_agent",name:"Gemini Pro Agent",type:"google-gemini",capabilities:["text-generation","reasoning","analysis"],async chat(t,e){try{return console.log("🤖 Gemini Pro processing:",t.substring(0,50)+"..."),`🤖 Gemini Pro odpowiada: To jest mockowana odpowiedź na: "${t.substring(0,30)}..."\n          \nMożliwości agenta:\n- Zaawansowane rozumowanie\n- Analiza kontekstu  \n- Generowanie tekstu\n- Wielojęzyczność\n\nStatus: Browser Mock - w produkcji połączyć z Gemini API`}catch(t){throw console.error("❌ Błąd Gemini Pro:",t),t}}}}async createGeminiVisionAgent(){return{id:"gemini_vision_agent",name:"Gemini Vision Agent",type:"google-gemini-vision",capabilities:["image-analysis","visual-qa","ocr","scene-understanding"],async analyzeImage(t,e){try{return console.log("👁️ Gemini Vision analyzing image with prompt:",e.substring(0,30)),`👁️ Gemini Vision analiza:\n\nPrompt: "${e}"\nWykryte elementy:\n- Obiekty: [Mock detection]\n- Tekst: [OCR Mock]\n- Scena: [Scene analysis Mock]\n- Kolory: [Color analysis Mock]\n\nOpis: To jest mockowana analiza obrazu. W produkcji agent będzie używał Gemini Vision API do rzeczywistej analizy wizualnej.\n\nStatus: Browser Mock - gotowy do integracji z Gemini Vision API`}catch(t){throw console.error("❌ Błąd Gemini Vision:",t),t}}}}async createCodeBisonAgent(){const t=["code-generation","code-review","debugging","refactoring"];return{id:"code_bison_agent",name:"Code Bison Agent",type:"google-code-bison",capabilities:t,async generateCode(e,n="typescript"){try{console.log("💻 Code Bison generating",n,"for:",e.substring(0,30));return`// 💻 Code Bison - Generated ${n.toUpperCase()} Code\n// Prompt: ${e}\n\n${"typescript"===n?`\ninterface MockInterface {\n  id: string;\n  name: string;\n  execute(): Promise<void>;\n}\n\nclass MockImplementation implements MockInterface {\n  constructor(\n    public id: string,\n    public name: string\n  ) {}\n  \n  async execute(): Promise<void> {\n    console.log(\`Executing \${this.name} with ID: \${this.id}\`);\n    // Implementation for: ${e}\n  }\n}\n\nexport { MockInterface, MockImplementation };\n`:`\n# Generated Python code for: ${e}\nclass MockClass:\n    def __init__(self, name: str):\n        self.name = name\n    \n    def execute(self):\n        print(f"Executing {self.name}")\n        # Implementation for: ${e}\n`}\n\n/* Status: Browser Mock - w produkcji połączyć z Code Bison API\n   Capabilities: ${t.join(", ")}\n*/`}catch(t){throw console.error("❌ Błąd Code Bison:",t),t}}}}async createTextBisonAgent(){return{id:"text_bison_agent",name:"Text Bison Agent",type:"google-text-bison",capabilities:["text-generation","summarization","translation","editing"],async chat(t,e){try{return console.log("📝 Text Bison processing text:",t.substring(0,30)),`📝 Text Bison - Zaawansowane przetwarzanie tekstu:\n\nOryginalny tekst: "${t.substring(0,100)}${t.length>100?"...":""}"\n\nAnaliza:\n- Długość: ${t.length} znaków\n- Język: Polski (wykryty)\n- Typ: ${e?.type||"Ogólny tekst"}\n- Sentiment: Neutralny (mock)\n\nMożliwe akcje:\n- Podsumowanie\n- Tłumaczenie  \n- Edycja stylistyczna\n- Korekta gramatyczna\n\nStatus: Browser Mock - w produkcji używaj Text Bison API dla rzeczywistego przetwarzania tekstu`}catch(t){throw console.error("❌ Błąd Text Bison:",t),t}}}}async getAllAgents(){const t=await Promise.all([this.createGeminiProAgent(),this.createGeminiVisionAgent(),this.createCodeBisonAgent(),this.createTextBisonAgent()]);return console.log("🎯 Utworzono",t.length,"Google Agents"),t}async testConnection(){try{return console.log("🔗 Testowanie połączenia Google Cloud (mock)..."),await new Promise(t=>setTimeout(t,500)),console.log("✅ Połączenie Google Cloud OK (mock)"),!0}catch(t){return console.error("❌ Błąd połączenia Google Cloud:",t),!1}}}new c({projectId:"mybonzo-project",location:"europe-west1",apiKey:process.env.GOOGLE_API_KEY});const l=new class{constructor(){this.agents=new Map,this.isInitialized=!1,this.autoStartDelay=3e3,this.adkAdapter=null,this.googleManager=null,this.googleFactory=null,this.localStorage=null,console.log("🤖 MyBonzo Agents System - Inicjalizacja..."),this.initializeGlobal=this.initializeGlobal.bind(this),this.initializeLocal=this.initializeLocal.bind(this),this.autoStart=this.autoStart.bind(this),this.createAgent=this.createAgent.bind(this),this.getAgent=this.getAgent.bind(this),this.getAllAgents=this.getAllAgents.bind(this),this.saveToLocal=this.saveToLocal.bind(this),this.loadFromLocal=this.loadFromLocal.bind(this)}async initializeGlobal(){try{console.log("🌍 Inicjalizacja globalnej instalacji agentów..."),this.adkAdapter=new r,this.googleManager=new s,this.googleFactory=new c;const t={apiKey:"demo-key",projectId:"mybonzo-project",location:"europe-west1"},l=[{name:"geminiPro",class:e},{name:"geminiVision",class:n},{name:"codeBison",class:o},{name:"textBison",class:a},{name:"businessAssistant",class:i}];for(const e of l)try{const n=new e.class(t);this.agents.set(e.name,{instance:n,status:"ready",type:e.name,config:t,createdAt:(new Date).toISOString()}),console.log(`✅ Agent ${e.name} - zainicjalizowany globalnie`)}catch(t){console.warn(`⚠️ Błąd inicjalizacji ${e.name}:`,t)}return this.isInitialized=!0,console.log(`🎉 Globalna instalacja ukończona - ${this.agents.size} agentów gotowych`),!0}catch(t){return console.error("❌ Błąd globalnej inicjalizacji:",t),!1}}initializeLocal(){try{return console.log("💾 Inicjalizacja lokalnej instalacji agentów..."),"undefined"!=typeof window&&window.localStorage?(this.localStorage=window.localStorage,this.loadFromLocal(),setInterval(()=>{this.saveToLocal()},3e4),console.log("✅ Lokalna instalacja skonfigurowana"),!0):(console.warn("⚠️ localStorage niedostępne"),!1)}catch(t){return console.error("❌ Błąd lokalnej inicjalizacji:",t),!1}}saveToLocal(){if(this.localStorage)try{const t=Array.from(this.agents.entries()).map(([t,e])=>({name:t,status:e.status,type:e.type,config:{...e.config,apiKey:"REDACTED"},createdAt:e.createdAt,lastSaved:(new Date).toISOString(),version:"1.0.0",sessionId:this.getSessionId()})),e={agentCount:this.agents.size,lastAutoStart:(new Date).toISOString(),browserInfo:{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform},performance:{initTime:this.initTime||0,avgResponseTime:this.calculateAvgResponseTime()}};this.localStorage.setItem("mybonzo_agents",JSON.stringify(t)),this.localStorage.setItem("mybonzo_system",JSON.stringify(e)),console.log("💾 Agenci i metadane zapisane lokalnie")}catch(t){console.warn("⚠️ Błąd zapisu lokalnego:",t)}}loadFromLocal(){if(this.localStorage)try{const t=this.localStorage.getItem("mybonzo_agents"),e=this.localStorage.getItem("mybonzo_system");if(t){const e=JSON.parse(t);console.log(`💾 Wczytano ${e.length} agentów z lokalnego storage`);for(const t of e)if(this.agents.has(t.name)){const e=this.agents.get(t.name);e.preferences=t.preferences||{},e.lastUsed=t.lastUsed}}if(e){const t=JSON.parse(e);console.log("💾 Wczytano metadane systemu:",t),this.systemMetadata=t}return{agents:t?JSON.parse(t):[],system:e?JSON.parse(e):null}}catch(t){return console.warn("⚠️ Błąd odczytu lokalnego:",t),{agents:[],system:null}}}getSessionId(){return this.sessionId||(this.sessionId=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`),this.sessionId}calculateAvgResponseTime(){return 0}clearLocalData(){this.localStorage&&(this.localStorage.removeItem("mybonzo_agents"),this.localStorage.removeItem("mybonzo_system"),console.log("🗑️ Lokalne dane agentów wyczyszczone"))}createAgent(t,s={}){const r={geminiPro:e,geminiVision:n,codeBison:o,textBison:a,businessAssistant:i};if(!r[t])throw new Error(`Nieznany typ agenta: ${t}`);const c=new(0,r[t])(s),l={instance:c,status:"ready",type:t,config:s,createdAt:(new Date).toISOString()};return this.agents.set(t,l),this.saveToLocal(),c}getAgent(t){const e=this.agents.get(t);return e?e.instance:null}getAllAgents(){const t={};for(const[e,n]of this.agents.entries())t[e]={instance:n.instance,status:n.status,type:n.type,createdAt:n.createdAt};return t}async autoStart(){console.log(`⏰ Auto-start agentów za ${this.autoStartDelay}ms...`),setTimeout(()=>{(async()=>{try{console.log("🚀 Rozpoczynam automatyczne uruchamianie agentów...");const t=await this.initializeGlobal(),e=this.initializeLocal();t&&e?(console.log("🎉 Wszystkie agenci gotowi do pracy!"),"undefined"!=typeof window&&(window.MyBonzoAgents=this,window.AGENTS_READY=!0,window.dispatchEvent(new CustomEvent("mybonzo:agents:ready",{detail:{agents:this.getAllAgents(),system:this}})))):console.warn("⚠️ Nie wszystkie systemy agentów zostały zainicjalizowane poprawnie")}catch(t){console.error("❌ Błąd podczas auto-start agentów:",t)}})().catch(t=>{console.error("❌ Nieobsłużony błąd auto-start:",t)})},this.autoStartDelay)}openAgent(t){const e=this.getAgent(t);return e?(console.log(`🎯 Otwieranie agenta: ${t}`),window.GOOGLE_VOICE&&window.GOOGLE_VOICE[`open${t.charAt(0).toUpperCase()+t.slice(1)}`]&&window.GOOGLE_VOICE[`open${t.charAt(0).toUpperCase()+t.slice(1)}`](),e):(console.warn(`⚠️ Agent ${t} nie jest dostępny`),null)}getSystemStatus(){return{initialized:this.isInitialized,agentsCount:this.agents.size,autoStartDelay:this.autoStartDelay,hasLocalStorage:!!this.localStorage,agents:this.getAllAgents()}}};if("undefined"!=typeof document)if("loading"===document.readyState)document.addEventListener("DOMContentLoaded",()=>{try{l.autoStart()}catch(t){console.error("❌ Błąd podczas DOMContentLoaded autoStart:",t)}});else try{l.autoStart()}catch(t){console.error("❌ Błąd podczas bezpośredniego autoStart:",t)}else"undefined"!=typeof window&&window.addEventListener("load",()=>{try{l.autoStart()}catch(t){console.error("❌ Błąd podczas window.load autoStart:",t)}});return l}();
