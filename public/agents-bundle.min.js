var AgentsBundle=function(){"use strict";class e{config;status="ready";history=[];lastActivity=Date.now();constructor(e){this.config=e,this.log(`Agent ${e.name} initialized`)}get id(){return this.config.id}get name(){return this.config.name}get model(){return this.config.model}get category(){return this.config.category}get icon(){return this.config.icon}get color(){return this.config.color}get priority(){return this.config.priority}get description(){return this.config.description}get capabilities(){return this.config.capabilities}get agentStatus(){return this.status}get agentHistory(){return[...this.history]}updateStatus(e){this.status=e,this.lastActivity=Date.now(),this.log(`Status updated to: ${e}`)}addToHistory(e){this.history.push({...e,timestamp:Date.now()}),this.history.length>50&&(this.history=this.history.slice(-50))}log(e,t="info"){const n=`[${(new Date).toISOString()}] ${this.name}: ${e}`;switch(t){case"warn":console.warn(n);break;case"error":console.error(n);break;default:console.log(n)}}async healthCheck(){try{return this.updateStatus("processing"),await new Promise(e=>setTimeout(e,100)),this.updateStatus("ready"),!0}catch(e){return this.updateStatus("error"),this.log(`Health check failed: ${e}`,"error"),!1}}getInfo(){return{...this.config,status:this.status,lastActivity:this.lastActivity}}clearHistory(){this.history=[],this.log("History cleared")}async delay(e){return new Promise(t=>setTimeout(t,e))}sanitizeInput(e){return e.trim().replace(/[<>]/g,"")}formatResponse(e){return e.trim()}}class t extends e{config;apiEndpoint;constructor(e){super({id:"gemini_pro_agent",name:"Gemini Pro",model:"gemini-pro",category:"core",icon:"🤖",color:"#4285f4",priority:"HIGH",description:"Advanced conversational AI with reasoning capabilities",capabilities:["Chat","Reasoning","Analysis","Code Review","Writing"]}),this.config=e,this.apiEndpoint=`https://generativelanguage.googleapis.com/v1beta/models/${e.model||"gemini-pro"}:generateContent`}async chat(e,t){try{this.updateStatus("processing");const t=await fetch(this.apiEndpoint+`?key=${this.config.apiKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:e}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:1024}})});if(!t.ok)throw new Error(`Gemini API error: ${t.status}`);const n=await t.json(),o=n.candidates?.[0]?.content?.parts?.[0]?.text||"Brak odpowiedzi";return this.updateStatus("ready"),this.addToHistory({type:"chat",input:e,output:o}),o}catch(e){throw this.updateStatus("error"),console.error("🤖 Gemini Pro error:",e),e}}async analyzeCode(e,t="typescript"){const n=`Przeanalizuj następujący kod ${t} i podaj szczegółową ocenę:\n\n\`\`\`${t}\n${e}\n\`\`\`\n\nOceń:\n1. Jakość kodu\n2. Potencjalne problemy\n3. Sugestie ulepszeń\n4. Bezpieczeństwo\n5. Wydajność`;return this.chat(n)}async generateText(e,t="professional"){const n=`Napisz tekst w stylu ${t} na temat: ${e}`;return this.chat(n)}}class n extends e{config;apiEndpoint;constructor(e){super({id:"gemini_vision_agent",name:"Gemini Vision",model:"gemini-pro-vision",category:"vision",icon:"👁️",color:"#ff6b35",priority:"HIGH",description:"Advanced image analysis and visual understanding",capabilities:["Image Analysis","OCR","Visual Q&A","Object Detection","Scene Understanding"]}),this.config=e,this.apiEndpoint="https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent"}async analyzeImage(e,t="Opisz co widzisz na tym obrazie"){try{this.updateStatus("processing");const n=await fetch(this.apiEndpoint+`?key=${this.config.apiKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:t},{inline_data:{mime_type:"image/jpeg",data:e.split(",")[1]}}]}],generationConfig:{temperature:.4,topK:32,topP:1,maxOutputTokens:4096}})});if(!n.ok)throw new Error(`Gemini Vision API error: ${n.status}`);const o=await n.json(),a=o.candidates?.[0]?.content?.parts?.[0]?.text||"Nie udało się przeanalizować obrazu";return this.updateStatus("ready"),this.addToHistory({type:"image_analysis",input:t,output:a}),a}catch(e){throw this.updateStatus("error"),console.error("👁️ Gemini Vision error:",e),e}}async extractText(e){return this.analyzeImage(e,"Wyciągnij cały tekst z tego obrazu. Zachowaj formatowanie i strukturę.")}async identifyObjects(e){return this.analyzeImage(e,"Zidentyfikuj wszystkie obiekty na tym obrazie i opisz ich lokalizację.")}}class o extends e{config;apiEndpoint;constructor(e){super({id:"code_bison_agent",name:"Code Bison",model:"code-bison",category:"development",icon:"💻",color:"#00d4aa",priority:"HIGH",description:"Advanced code generation and programming assistance",capabilities:["Code Generation","Code Review","Debugging","Refactoring","Documentation"]}),this.config=e,this.apiEndpoint=`https://${e.location||"us-central1"}-aiplatform.googleapis.com/v1/projects/${e.projectId}/locations/${e.location||"us-central1"}/publishers/google/models/code-bison:predict`}async generateCode(e,t="typescript"){try{this.updateStatus("processing");const n=`Wygeneruj kod w języku ${t} na podstawie opisu: ${e}\n      \nWymagania:\n- Kod powinien być czytelny i dobrze skomentowany\n- Użyj najlepszych praktyk dla ${t}\n- Dodaj obsługę błędów gdzie to konieczne\n- Kod powinien być gotowy do użycia`,o=await fetch(this.apiEndpoint,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({instances:[{prefix:n}],parameters:{temperature:.2,maxOutputTokens:1024,candidateCount:1}})});if(!o.ok)throw new Error(`Code Bison API error: ${o.status}`);const a=await o.json(),i=a.predictions?.[0]?.content||"Nie udało się wygenerować kodu";return this.updateStatus("ready"),this.addToHistory({type:"code_generation",input:e,output:i}),i}catch(e){throw this.updateStatus("error"),console.error("💻 Code Bison error:",e),e}}async reviewCode(e,t="typescript"){const n=`Przejrzyj następujący kod ${t} i podaj szczegółową analizę:\n\n\`\`\`${t}\n${e}\n\`\`\`\n\nSprawdź:\n- Jakość kodu i czytelność\n- Potencjalne błędy i problemy\n- Sugestie optymalizacji\n- Zgodność z najlepszymi praktykami\n- Bezpieczeństwo kodu`;return this.generateCode(n,t)}async debugCode(e,t,n="typescript"){const o=`Pomóż debugować kod ${n}:\n\nKod:\n\`\`\`${n}\n${e}\n\`\`\`\n\nBłąd: ${t}\n\nZnajdź przyczynę błędu i zaproponuj poprawkę.`;return this.generateCode(o,n)}async refactorCode(e,t="typescript"){const n=`Refactor this ${t} code to improve:\n- Readability\n- Performance\n- Maintainability\n- Best practices\n\nOriginal code:\n\`\`\`${t}\n${e}\n\`\`\`\n\nProvide the refactored version with explanations of changes:`;return this.generateCode(n,t)}async generateDocumentation(e,t="typescript"){const n=`Generate comprehensive documentation for this ${t} code:\n\n\`\`\`${t}\n${e}\n\`\`\`\n\nInclude:\n- Function/class descriptions\n- Parameter explanations\n- Return value descriptions\n- Usage examples\n- JSDoc/TSDoc format`;return this.generateCode(n,t)}async explainCode(e,t="typescript"){const n=`Explain this ${t} code in detail:\n\n\`\`\`${t}\n${e}\n\`\`\`\n\nProvide:\n- Step-by-step explanation\n- Purpose of each part\n- How it works\n- Potential improvements`;return this.generateCode(n,t)}}class a extends e{config;apiEndpoint;constructor(e){super({id:"text_bison_agent",name:"Text Bison",model:"text-bison",category:"content",icon:"📝",color:"#8b5cf6",priority:"MEDIUM",description:"Advanced text generation and content creation",capabilities:["Text Generation","Summarization","Translation","Content Writing","Editing"]}),this.config=e,this.apiEndpoint=`https://${e.location||"us-central1"}-aiplatform.googleapis.com/v1/projects/${e.projectId}/locations/${e.location||"us-central1"}/publishers/google/models/text-bison:predict`}async generateText(e,t=512){try{this.updateStatus("processing");const n=await fetch(this.apiEndpoint,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({instances:[{prompt:e}],parameters:{temperature:.7,maxOutputTokens:t,topP:.8,topK:40}})});if(!n.ok)throw new Error(`Text Bison API error: ${n.status}`);const o=await n.json(),a=o.predictions?.[0]?.content||"Nie udało się wygenerować tekstu";return this.updateStatus("ready"),this.addToHistory({type:"text_generation",input:e,output:a}),a}catch(e){throw this.updateStatus("error"),console.error("📝 Text Bison error:",e),e}}async summarize(e){const t=`Podsumuj następujący tekst w sposób zwięzły i treściwy:\n\n${e}\n\nPodsumowanie:`;return this.generateText(t,256)}async translate(e,t="polski"){const n=`Przetłumacz następujący tekst na język ${t}:\n\n${e}\n\nTłumaczenie:`;return this.generateText(n,512)}}class i extends e{constructor(e){super({id:"business_assistant_agent",name:"Business Assistant",model:"business-assistant",category:"business",icon:"💼",color:"#1f2937",priority:"HIGH",description:"Comprehensive business operations and management assistant",capabilities:["Task Management","Meeting Planning","Document Generation","Email Drafting","Project Planning"]})}async createMeetingAgenda(e,t,n){try{this.updateStatus("processing");const o=`Stwórz profesjonalną agendę spotkania:\n\nTemat: ${e}\nCzas trwania: ${t} minut\nUczestnicy: ${n.join(", ")}\n\nAgenda powinna zawierać:\n- Cel spotkania\n- Punkty dyskusji z przybliżonym czasem na każdy punkt\n- Akcje i odpowiedzialności po spotkaniu\n- Zasoby potrzebne do spotkania\n\nProszę stwórz agendę w formacie JSON z polami: title, purpose, agendaItems (tablica obiektów z punktami), actions, resources`;return await this.generateResponse(o)}catch(e){throw this.updateStatus("error"),new Error(`Failed to create meeting agenda: ${e}`)}}async draftEmail(e,t,n,o){try{this.updateStatus("processing");const a=`Stwórz profesjonalny email na podstawie następujących danych:\n\nTemat: ${e}\nTreść: ${t}\nOdbiorca: ${n}\nNadawca: ${o}\n\nEmail powinien zawierać:\n- Przywitanie\n- Główną treść wiadomości\n- Zakończenie z podpisem\n- Styl odpowiedni dla kontekstu biznesowego`;return await this.generateResponse(a)}catch(e){throw this.updateStatus("error"),new Error(`Failed to draft email: ${e}`)}}async generateFinancialReport(e,t,n){try{this.updateStatus("processing");const o=e-t,a=(o/e*100).toFixed(2),i=`Stwórz raport finansowy dla okresu ${n}:\n\nDane finansowe:\n- Przychody: ${e.toLocaleString()} PLN\n- Wydatki: ${t.toLocaleString()} PLN\n- Zysk: ${o.toLocaleString()} PLN\n- Marża: ${a}%\n\nRaport powinien zawierać:\n- Podsumowanie finansowe\n- Analizę wydatków i przychodów\n- Wskazówki dotyczące poprawy wyników\n- Prognozę na następny okres`;return await this.generateResponse(i)}catch(e){throw this.updateStatus("error"),new Error(`Failed to generate financial report: ${e}`)}}async planEcommerceLaunch(e,t,n){try{this.updateStatus("processing");const o=`Zaprojektuj plan wdrożenia sklepu internetowego dla produktu:\n\nNazwa produktu: ${e}\nDocelowa grupa: ${t}\nData wdrożenia: ${n}\n\nPlan powinien zawierać:\n- Etapy przygotowania sklepu\n- Strategię marketingową\n- Kanały promocji\n- Harmonogram działań\n- Krytyczne punkty do uwagi`;return await this.generateResponse(o)}catch(e){throw this.updateStatus("error"),new Error(`Failed to plan e-commerce launch: ${e}`)}}async manageTasks(e){try{this.updateStatus("processing");const t=`Zarządzaj listą zadań:\n\nZadania:\n${e.map((e,t)=>`${t+1}. ${e.description} (Priorytet: ${e.priority}, Status: ${e.status})`).join("\n")}\n\nProszę stworzyć:\n- Raport zadań\n- Priorytetyzację zadań\n- Proponowane kroki działania\n- Harmonogram realizacji`;return await this.generateResponse(t)}catch(e){throw this.updateStatus("error"),new Error(`Failed to manage tasks: ${e}`)}}}class s{config;constructor(e){this.config=e,console.log("🔧 GoogleAgentManager initialized for browser environment")}async createAgent(){try{const e={parent:`projects/${this.config.projectId}/locations/${this.config.location}`,agent:{displayName:this.config.displayName,defaultLanguageCode:this.config.defaultLanguage,timeZone:this.config.timeZone,description:"Agent utworzony przez POLACZEK Agent System 23",avatarUri:"",enableStackdriverLogging:!0,enableSpellChecking:!0}};return console.log("✅ Google Agent utworzony (mock):",e),{success:!0,config:e}}catch(e){throw console.error("❌ Błąd tworzenia Google Agent:",e),e}}async importFromADK(e){try{console.log(`🔄 Importuję agenta z: ${e}`);const t={name:"ADK_Voice_Agent",description:"Agent zaimportowany z ADK",intents:[{name:"voice_commands",userSays:["otwórz muzykę","uruchom asystenta","zamknij aplikację"],responses:["Wykonuję polecenie","Już się robi","W porządku"]}]},n=this.convertADKToDialogflow(t);return{agent:await this.createAgent(),config:n,status:"imported"}}catch(e){throw console.error("❌ Błąd importu z ADK:",e),e}}convertADKToDialogflow(e){return{intents:e.intents?.map(e=>({displayName:e.name,trainingPhrases:e.userSays?.map(e=>({parts:[{text:e}]}))||[],messages:e.responses?.map(e=>({text:{text:[e]}}))||[]}))||[],entities:e.entities?.map(e=>({displayName:e.name,kind:"KIND_MAP",entities:e.entries?.map(e=>({value:e.value,synonyms:e.synonyms||[e.value]}))||[]}))||[]}}async testConnection(){try{return console.log("✅ Połączenie z Google Cloud nawiązane (mock)"),!0}catch(e){return console.error("❌ Błąd połączenia z Google Cloud:",e),!1}}}class r{googleManager=null;constructor(e){e&&(this.googleManager=new s(e))}async importAllADKAgents(e="Q:\\ADK_AGEN_ts_zEN"){try{console.log(`🔄 Skanowanie katalogu ADK: ${e}`);const t=["voice_assistant_pl","music_controller","ai_helper","system_navigator"],n=[];for(const o of t)try{console.log(`🔄 Importuję agenta: ${o}`);const t=await this.importSingleADKAgent(o);n.push({name:o,status:"success",agent:t,path:`${e}/${o}`})}catch(t){console.error(`❌ Błąd importu agenta ${o}:`,t),n.push({name:o,status:"error",error:t instanceof Error?t.message:"Unknown error",path:`${e}/${o}`})}return n}catch(e){throw console.error("❌ Błąd skanowania katalogu ADK:",e),e}}async importSingleADKAgent(e){if(!this.googleManager)throw new Error("Google Agent Manager nie jest skonfigurowany");const t=`mock://adk/${e}`;return await this.googleManager.importFromADK(t)}async convertToPolaczekFormat(e){try{return{id:this.generatePolaczekId(e),name:e,description:`Agent zaimportowany z ADK: ${e}`,type:"google-dialogflow",model:"@google/dialogflow-cx",capabilities:this.generateCapabilities(e),systemPrompt:this.generateSystemPrompt(e),configuration:{projectId:"vertxaizenon-project-467918",location:"global",agentId:this.generatePolaczekId(e),language:"pl",timeZone:"Europe/Warsaw"},metadata:{source:"ADK_AGEN_ts_zEN",importedAt:(new Date).toISOString(),originalPath:`mock://adk/${e}`,version:"1.0.0"},createdAt:(new Date).toISOString(),isCustom:!0,isActive:!0}}catch(e){throw console.error("❌ Błąd konwersji do formatu POLACZEK:",e),e}}generatePolaczekId(e){return`google_${e.toLowerCase().replace(/[^a-z0-9]/g,"_").replace(/_+/g,"_").replace(/^_|_$/g,"")}_${Date.now()}`}generateCapabilities(e){return{voice_assistant_pl:["voice_recognition","polish_language","conversation"],music_controller:["music_playback","playlist_management","audio_control"],ai_helper:["ai_assistance","problem_solving","information_lookup"],system_navigator:["system_control","navigation","file_management"]}[e]||["general_assistance"]}generateSystemPrompt(e){return{voice_assistant_pl:"Jesteś asystentem głosowym mówiącym po polsku. Pomagasz użytkownikom w codziennych zadaniach.",music_controller:"Jesteś kontrolerem muzyki. Zarządzasz odtwarzaniem, playlistami i ustawieniami audio.",ai_helper:"Jesteś asystentem AI. Pomagasz rozwiązywać problemy i znajdować informacje.",system_navigator:"Jesteś nawigatortem systemowym. Pomagasz w poruszaniu się po systemie i zarządzaniu plikami."}[e]||"Jesteś pomocnym asystentem AI."}async testADKAvailability(){try{console.log("🔄 Testuję dostępność systemu ADK...");const e="undefined"!=typeof window;return e?console.log("✅ System ADK symulowany - gotowy do importu"):console.log("❌ System ADK niedostępny w tym środowisku"),e}catch(e){return console.error("❌ Błąd testowania ADK:",e),!1}}}class c{config;constructor(e){this.config=e,console.log("🔧 GoogleAgentFactory initialized for browser environment")}async createGeminiProAgent(){return{id:"gemini_pro_agent",name:"Gemini Pro Agent",type:"google-gemini",capabilities:["text-generation","reasoning","analysis"],async chat(e,t){try{return console.log("🤖 Gemini Pro processing:",e.substring(0,50)+"..."),`🤖 Gemini Pro odpowiada: To jest mockowana odpowiedź na: "${e.substring(0,30)}..."\n          \nMożliwości agenta:\n- Zaawansowane rozumowanie\n- Analiza kontekstu  \n- Generowanie tekstu\n- Wielojęzyczność\n\nStatus: Browser Mock - w produkcji połączyć z Gemini API`}catch(e){throw console.error("❌ Błąd Gemini Pro:",e),e}}}}async createGeminiVisionAgent(){return{id:"gemini_vision_agent",name:"Gemini Vision Agent",type:"google-gemini-vision",capabilities:["image-analysis","visual-qa","ocr","scene-understanding"],async analyzeImage(e,t){try{return console.log("👁️ Gemini Vision analyzing image with prompt:",t.substring(0,30)),`👁️ Gemini Vision analiza:\n\nPrompt: "${t}"\nWykryte elementy:\n- Obiekty: [Mock detection]\n- Tekst: [OCR Mock]\n- Scena: [Scene analysis Mock]\n- Kolory: [Color analysis Mock]\n\nOpis: To jest mockowana analiza obrazu. W produkcji agent będzie używał Gemini Vision API do rzeczywistej analizy wizualnej.\n\nStatus: Browser Mock - gotowy do integracji z Gemini Vision API`}catch(e){throw console.error("❌ Błąd Gemini Vision:",e),e}}}}async createCodeBisonAgent(){return{id:"code_bison_agent",name:"Code Bison Agent",type:"google-code-bison",capabilities:["code-generation","code-review","debugging","refactoring"],async generateCode(e,t="typescript"){try{console.log("💻 Code Bison generating",t,"for:",e.substring(0,30));return`// 💻 Code Bison - Generated ${t.toUpperCase()} Code\n// Prompt: ${e}\n\n${"typescript"===t?`\ninterface MockInterface {\n  id: string;\n  name: string;\n  execute(): Promise<void>;\n}\n\nclass MockImplementation implements MockInterface {\n  constructor(\n    public id: string,\n    public name: string\n  ) {}\n  \n  async execute(): Promise<void> {\n    console.log(\`Executing \${this.name} with ID: \${this.id}\`);\n    // Implementation for: ${e}\n  }\n}\n\nexport { MockInterface, MockImplementation };\n`:`\n# Generated Python code for: ${e}\nclass MockClass:\n    def __init__(self, name: str):\n        self.name = name\n    \n    def execute(self):\n        print(f"Executing {self.name}")\n        # Implementation for: ${e}\n`}\n\n/* Status: Browser Mock - w produkcji połączyć z Code Bison API\n   Capabilities: ${this.capabilities?.join(", ")}\n*/`}catch(e){throw console.error("❌ Błąd Code Bison:",e),e}}}}async createTextBisonAgent(){return{id:"text_bison_agent",name:"Text Bison Agent",type:"google-text-bison",capabilities:["text-generation","summarization","translation","editing"],async chat(e,t){try{return console.log("📝 Text Bison processing text:",e.substring(0,30)),`📝 Text Bison - Zaawansowane przetwarzanie tekstu:\n\nOryginalny tekst: "${e.substring(0,100)}${e.length>100?"...":""}"\n\nAnaliza:\n- Długość: ${e.length} znaków\n- Język: Polski (wykryty)\n- Typ: ${t?.type||"Ogólny tekst"}\n- Sentiment: Neutralny (mock)\n\nMożliwe akcje:\n- Podsumowanie\n- Tłumaczenie  \n- Edycja stylistyczna\n- Korekta gramatyczna\n\nStatus: Browser Mock - w produkcji używaj Text Bison API dla rzeczywistego przetwarzania tekstu`}catch(e){throw console.error("❌ Błąd Text Bison:",e),e}}}}async getAllAgents(){const e=await Promise.all([this.createGeminiProAgent(),this.createGeminiVisionAgent(),this.createCodeBisonAgent(),this.createTextBisonAgent()]);return console.log("🎯 Utworzono",e.length,"Google Agents"),e}async testConnection(){try{return console.log("🔗 Testowanie połączenia Google Cloud (mock)..."),await new Promise(e=>setTimeout(e,500)),console.log("✅ Połączenie Google Cloud OK (mock)"),!0}catch(e){return console.error("❌ Błąd połączenia Google Cloud:",e),!1}}}new c({projectId:"mybonzo-project",location:"europe-west1",apiKey:process.env.GOOGLE_API_KEY});const l=new class{constructor(){this.agents=new Map,this.isInitialized=!1,this.autoStartDelay=3e3,this.adkAdapter=null,this.googleManager=null,this.googleFactory=null,this.localStorage=null,console.log("🤖 MyBonzo Agents System - Inicjalizacja..."),this.initializeGlobal=this.initializeGlobal.bind(this),this.initializeLocal=this.initializeLocal.bind(this),this.autoStart=this.autoStart.bind(this),this.createAgent=this.createAgent.bind(this),this.getAgent=this.getAgent.bind(this),this.getAllAgents=this.getAllAgents.bind(this),this.saveToLocal=this.saveToLocal.bind(this),this.loadFromLocal=this.loadFromLocal.bind(this)}async initializeGlobal(){try{console.log("🌍 Inicjalizacja globalnej instalacji agentów..."),this.adkAdapter=new r,this.googleManager=new s,this.googleFactory=new c;const e={apiKey:"demo-key",projectId:"mybonzo-project",location:"europe-west1"},l=[{name:"geminiPro",class:t},{name:"geminiVision",class:n},{name:"codeBison",class:o},{name:"textBison",class:a},{name:"businessAssistant",class:i}];for(const t of l)try{const n=new t.class(e);this.agents.set(t.name,{instance:n,status:"ready",type:t.name,config:e,createdAt:(new Date).toISOString()}),console.log(`✅ Agent ${t.name} - zainicjalizowany globalnie`)}catch(e){console.warn(`⚠️ Błąd inicjalizacji ${t.name}:`,e)}return this.isInitialized=!0,console.log(`🎉 Globalna instalacja ukończona - ${this.agents.size} agentów gotowych`),!0}catch(e){return console.error("❌ Błąd globalnej inicjalizacji:",e),!1}}initializeLocal(){try{return console.log("💾 Inicjalizacja lokalnej instalacji agentów..."),"undefined"!=typeof window&&window.localStorage?(this.localStorage=window.localStorage,this.loadFromLocal(),setInterval(()=>{this.saveToLocal()},3e4),console.log("✅ Lokalna instalacja skonfigurowana"),!0):(console.warn("⚠️ localStorage niedostępne"),!1)}catch(e){return console.error("❌ Błąd lokalnej inicjalizacji:",e),!1}}saveToLocal(){if(this.localStorage)try{const e=Array.from(this.agents.entries()).map(([e,t])=>({name:e,status:t.status,type:t.type,config:{...t.config,apiKey:"REDACTED"},createdAt:t.createdAt,lastSaved:(new Date).toISOString(),version:"1.0.0",sessionId:this.getSessionId()})),t={agentCount:this.agents.size,lastAutoStart:(new Date).toISOString(),browserInfo:{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform},performance:{initTime:this.initTime||0,avgResponseTime:this.calculateAvgResponseTime()}};this.localStorage.setItem("mybonzo_agents",JSON.stringify(e)),this.localStorage.setItem("mybonzo_system",JSON.stringify(t)),console.log("💾 Agenci i metadane zapisane lokalnie")}catch(e){console.warn("⚠️ Błąd zapisu lokalnego:",e)}}loadFromLocal(){if(this.localStorage)try{const e=this.localStorage.getItem("mybonzo_agents"),t=this.localStorage.getItem("mybonzo_system");if(e){const t=JSON.parse(e);console.log(`💾 Wczytano ${t.length} agentów z lokalnego storage`);for(const e of t)if(this.agents.has(e.name)){const t=this.agents.get(e.name);t.preferences=e.preferences||{},t.lastUsed=e.lastUsed}}if(t){const e=JSON.parse(t);console.log("💾 Wczytano metadane systemu:",e),this.systemMetadata=e}return{agents:e?JSON.parse(e):[],system:t?JSON.parse(t):null}}catch(e){return console.warn("⚠️ Błąd odczytu lokalnego:",e),{agents:[],system:null}}}getSessionId(){return this.sessionId||(this.sessionId=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`),this.sessionId}calculateAvgResponseTime(){return 0}clearLocalData(){this.localStorage&&(this.localStorage.removeItem("mybonzo_agents"),this.localStorage.removeItem("mybonzo_system"),console.log("🗑️ Lokalne dane agentów wyczyszczone"))}createAgent(e,s={}){const r={geminiPro:t,geminiVision:n,codeBison:o,textBison:a,businessAssistant:i};if(!r[e])throw new Error(`Nieznany typ agenta: ${e}`);const c=new(0,r[e])(s),l={instance:c,status:"ready",type:e,config:s,createdAt:(new Date).toISOString()};return this.agents.set(e,l),this.saveToLocal(),c}getAgent(e){const t=this.agents.get(e);return t?t.instance:null}getAllAgents(){const e={};for(const[t,n]of this.agents.entries())e[t]={instance:n.instance,status:n.status,type:n.type,createdAt:n.createdAt};return e}async autoStart(){console.log(`⏰ Auto-start agentów za ${this.autoStartDelay}ms...`),setTimeout(async()=>{console.log("🚀 Rozpoczynam automatyczne uruchamianie agentów...");const e=await this.initializeGlobal(),t=this.initializeLocal();e&&t?(console.log("🎉 Wszystkie agenci gotowi do pracy!"),"undefined"!=typeof window&&(window.MyBonzoAgents=this,window.AGENTS_READY=!0,window.dispatchEvent(new CustomEvent("mybonzo:agents:ready",{detail:{agents:this.getAllAgents(),system:this}})))):console.warn("⚠️ Nie wszystkie systemy agentów zostały zainicjalizowane poprawnie")},this.autoStartDelay)}openAgent(e){const t=this.getAgent(e);return t?(console.log(`🎯 Otwieranie agenta: ${e}`),window.GOOGLE_VOICE&&window.GOOGLE_VOICE[`open${e.charAt(0).toUpperCase()+e.slice(1)}`]&&window.GOOGLE_VOICE[`open${e.charAt(0).toUpperCase()+e.slice(1)}`](),t):(console.warn(`⚠️ Agent ${e} nie jest dostępny`),null)}getSystemStatus(){return{initialized:this.isInitialized,agentsCount:this.agents.size,autoStartDelay:this.autoStartDelay,hasLocalStorage:!!this.localStorage,agents:this.getAllAgents()}}};return"undefined"!=typeof document?"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{l.autoStart()}):l.autoStart():"undefined"!=typeof window&&window.addEventListener("load",()=>{l.autoStart()}),l}();
