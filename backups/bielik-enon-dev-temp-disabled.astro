---
import Layout from "../layouts/Layout.astro";
---

<Layout title="BIELIK ENON DEV - LUC de ZEN ON">
  <div class="header-with-help">
    <h1 class="page-title">ü¶é BIELIK ENON DEV</h1>
    <button id="helpButton" class="help-icon">?</button>
  </div>

  <!-- Development Dashboard -->
  <div class="dev-dashboard">
    <div class="dashboard-grid">
      <div class="metric-card">
        <div class="metric-icon">‚ö°</div>
        <div class="metric-content">
          <h3>Build Status</h3>
          <div class="metric-value success">SUCCESS</div>
          <p class="metric-subtitle">Last build: 2 min ago</p>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-icon">üîÑ</div>
        <div class="metric-content">
          <h3>Deployments</h3>
          <div class="metric-value">23</div>
          <p class="metric-subtitle">This week</p>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-icon">üêõ</div>
        <div class="metric-content">
          <h3>Issues</h3>
          <div class="metric-value warning">2</div>
          <p class="metric-subtitle">2 open, 15 closed</p>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-icon">üìä</div>
        <div class="metric-content">
          <h3>Performance</h3>
          <div class="metric-value">95%</div>
          <p class="metric-subtitle">Uptime score</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Development Tools -->
  <div class="dev-tools">
    <h2>Development Tools</h2>
    <div class="tools-grid">
      <div class="tool-card">
        <div class="tool-icon">üõ†Ô∏è</div>
        <h3>Code Editor</h3>
        <p>Zaawansowany edytor kodu z pod≈õwietlaniem sk≈Çadni</p>
        <button class="tool-btn">Launch Editor</button>
      </div>

      <div class="tool-card">
        <div class="tool-icon">üîç</div>
        <h3>Debug Console</h3>
        <p>Konsola debugowania dla aplikacji BIELIK</p>
        <button class="tool-btn">Open Console</button>
      </div>

      <div class="tool-card">
        <div class="tool-icon">üìù</div>
        <h3>Documentation</h3>
        <p>Pe≈Çna dokumentacja API i przyk≈Çady u≈ºycia</p>
        <button class="tool-btn">View Docs</button>
      </div>

      <div class="tool-card">
        <div class="tool-icon">üöÄ</div>
        <h3>Deploy Manager</h3>
        <p>ZarzƒÖdzanie wdro≈ºeniami i ≈õrodowiskami</p>
        <button class="tool-btn">Manage Deploys</button>
      </div>
    </div>
  </div>

  <!-- Code Snippets -->
  <div class="code-snippets">
    <h2>BIELIK API Examples</h2>
    <div class="snippets-grid">
      <div class="snippet-card">
        <h3>ü§ñ Model Inference</h3>
        <pre><code>// BIELIK model inference
const response = await bielik.generate(&#123;
  prompt: "Analyze this data:",
  model: "bielik-7b-instruct",
  max_tokens: 512,
  temperature: 0.7
&#125;);</code></pre>
        <button class="copy-btn">Copy Code</button>
      </div>

      <div class="snippet-card">
        <h3>üîß Configuration</h3>
        <pre><code>// BIELIK configuration
const config = &#123;
  apiKey: process.env.BIELIK_API_KEY,
  baseURL: "https://api.bielik.ai/v1",
  timeout: 30000,
  retries: 3
&#125;;</code></pre>
        <button class="copy-btn">Copy Code</button>
      </div>

      <div class="snippet-card">
        <h3>üìä Analytics</h3>
        <pre><code>// BIELIK usage analytics
const analytics = await bielik.getUsage(&#123;
  startDate: "2025-01-01",
  endDate: "2025-01-31",
  groupBy: "model"
&#125;);</code></pre>
        <button class="copy-btn">Copy Code</button>
      </div>
    </div>
  </div>

  <!-- BIELIK API Tester -->
  <div class="api-tester">
    <h2>üîß BIELIK API Tester</h2>
    <div class="tester-container">
      <div class="tester-controls">
        <div class="control-group">
          <label for="modelSelect">Model:</label>
          <select id="modelSelect">
            <option value="bielik-7b-instruct">BIELIK-7B-Instruct</option>
            <option value="bielik-13b-instruct">BIELIK-13B-Instruct</option>
            <option value="bielik-70b-instruct">BIELIK-70B-Instruct</option>
          </select>
        </div>
        
        <div class="control-group">
          <label for="temperatureSlider">Temperature: <span id="temperatureValue">0.7</span></label>
          <input type="range" id="temperatureSlider" min="0" max="1" step="0.1" value="0.7">
        </div>
        
        <div class="control-group">
          <label for="maxTokensInput">Max Tokens:</label>
          <input type="number" id="maxTokensInput" value="512" min="50" max="2048">
        </div>
      </div>
      
      <div class="chat-interface">
        <div class="prompt-section">
          <label for="promptInput">Prompt dla BIELIK:</label>
          <textarea id="promptInput" placeholder="Wpisz swoje pytanie do modelu BIELIK..." rows="4"></textarea>
          <div class="prompt-buttons">
            <button id="sendPrompt" class="btn-primary">Wy≈õlij do BIELIK</button>
            <button id="testConnection" class="btn-secondary">Test po≈ÇƒÖczenia</button>
            <button id="clearChat" class="btn-tertiary">Wyczy≈õƒá</button>
          </div>
        </div>
        
        <div class="response-section">
          <label>Odpowied≈∫ BIELIK:</label>
          <div id="responseContainer" class="response-container">
            <div class="placeholder">Wy≈õlij prompt aby zobaczyƒá odpowied≈∫ BIELIK...</div>
          </div>
          
          <div id="responseMetadata" class="response-metadata" style="display: none;">
            <div class="metadata-item">
              <strong>Model:</strong> <span id="usedModel">-</span>
            </div>
            <div class="metadata-item">
              <strong>Tokeny:</strong> <span id="tokenUsage">-</span>
            </div>
            <div class="metadata-item">
              <strong>Czas:</strong> <span id="responseTime">-</span>
            </div>
            <div class="metadata-item">
              <strong>Status:</strong> <span id="workerStatus">-</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

      /* API Tester Styles */
    .api-tester {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border: 1px solid var(--border-color);
    }
    
    .tester-container {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 2rem;
    }
    
    .tester-controls {
      background: var(--surface-bg);
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid var(--border-color);
    }
    
    .control-group {
      margin-bottom: 1rem;
    }
    
    .control-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    .control-group select,
    .control-group input {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      background: var(--card-bg);
      color: var(--text-primary);
      font-size: 0.9rem;
    }
    
    .control-group input[type="range"] {
      width: 100%;
      height: 4px;
      background: var(--border-color);
      outline: none;
      border-radius: 2px;
    }
    
    .chat-interface {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .prompt-section {
      background: var(--surface-bg);
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid var(--border-color);
    }
    
    .prompt-section label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    #promptInput {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      background: var(--card-bg);
      color: var(--text-primary);
      font-family: inherit;
      resize: vertical;
      margin-bottom: 1rem;
    }
    
    .prompt-buttons {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
    
    .btn-primary, .btn-secondary, .btn-tertiary {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s ease;
    }
    
    .btn-primary {
      background: var(--accent);
      color: white;
    }
    
    .btn-primary:hover {
      background: #0056b3;
      transform: translateY(-1px);
    }
    
    .btn-secondary {
      background: var(--warning);
      color: white;
    }
    
    .btn-secondary:hover {
      background: #e0a800;
      transform: translateY(-1px);
    }
    
    .btn-tertiary {
      background: var(--surface-bg);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
    }
    
    .btn-tertiary:hover {
      background: var(--border-color);
      transform: translateY(-1px);
    }
    
    .response-section {
      flex: 1;
    }
    
    .response-section label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    .response-container {
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1rem;
      min-height: 150px;
      max-height: 300px;
      overflow-y: auto;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
      line-height: 1.5;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    
    .response-container .placeholder {
      color: var(--text-secondary);
      font-style: italic;
      font-family: inherit;
    }
    
    .response-container .loading {
      color: var(--accent);
      font-weight: 500;
    }
    
    .response-container .error {
      color: var(--error);
      font-weight: 500;
    }
    
    .response-container .success {
      color: var(--text-primary);
    }
    
    .response-metadata {
      background: var(--surface-bg);
      border: 1px solid var(--border-color);
      border-radius: 6px;
      padding: 0.75rem;
      margin-top: 1rem;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 0.5rem;
      font-size: 0.85rem;
    }
    
    .metadata-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .metadata-item strong {
      color: var(--text-primary);
    }
    
    .metadata-item span {
      color: var(--text-secondary);
      font-family: 'Courier New', monospace;
    }

    /* Dev Log Styles */
  <div class="dev-log">
    <h2>Development Log</h2>
    <div class="log-container">
      <div class="log-entry">
        <div class="log-time">14:32:15</div>
        <div class="log-level success">INFO</div>
        <div class="log-message">BIELIK model initialized successfully</div>
      </div>
      <div class="log-entry">
        <div class="log-time">14:31:42</div>
        <div class="log-level warning">WARN</div>
        <div class="log-message">High memory usage detected (85%)</div>
      </div>
      <div class="log-entry">
        <div class="log-time">14:30:18</div>
        <div class="log-level success">INFO</div>
        <div class="log-message">API endpoint /v1/generate responding</div>
      </div>
      <div class="log-entry">
        <div class="log-time">14:29:55</div>
        <div class="log-level error">ERROR</div>
        <div class="log-message">Connection timeout to external service</div>
      </div>
    </div>
  </div>

  <!-- Help Modal -->
  <div id="helpModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>BIELIK ENON DEV - Szczeg√≥≈Çowy opis</h2>
        <span id="closeModal" class="close">&times;</span>
      </div>
      <div class="modal-body">
        <p>
          <strong>BIELIK ENON DEV to ≈õrodowisko deweloperskie dla polskiego modelu jƒôzykowego BIELIK.</strong>
        </p>

        <h3>Funkcje deweloperskie:</h3>
        <ul>
          <li><strong>Code Editor</strong> - edytor z pod≈õwietlaniem sk≈Çadni i autouzupe≈Çnianiem</li>
          <li><strong>Debug Console</strong> - narzƒôdzia debugowania i monitorowania</li>
          <li><strong>Documentation</strong> - kompletna dokumentacja API</li>
          <li><strong>Deploy Manager</strong> - zarzƒÖdzanie wdro≈ºeniami</li>
        </ul>

        <h3>Model BIELIK:</h3>
        <ul>
          <li><strong>Polski model jƒôzykowy</strong> - stworzony dla jƒôzyka polskiego</li>
          <li><strong>Instrukcje i chat</strong> - obs≈Çuga r√≥≈ºnych format√≥w interakcji</li>
          <li><strong>Fine-tuning</strong> - mo≈ºliwo≈õƒá dostosowania do specyficznych zada≈Ñ</li>
          <li><strong>API integration</strong> - ≈Çatwa integracja z aplikacjami</li>
        </ul>

        <div class="feature-highlight">
          <h3>Mo≈ºliwo≈õci modelu BIELIK:</h3>
          <ul>
            <li>üáµüá± Optymalizacja dla jƒôzyka polskiego</li>
            <li>üí¨ Zaawansowane konwersacje</li>
            <li>üìù Generowanie tekstu</li>
            <li>üîç Analiza i podsumowania</li>
            <li>üéØ Specjalistyczne zadania</li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Help modal functionality
    const helpButton = document.getElementById("helpButton");
    const helpModal = document.getElementById("helpModal");
    const closeModal = document.getElementById("closeModal");

    if (helpButton && helpModal && closeModal) {
      helpButton.addEventListener("click", () => {
        helpModal.style.display = "flex";
      });

      closeModal.addEventListener("click", () => {
        helpModal.style.display = "none";
      });

      helpModal.addEventListener("click", (e) => {
        if (e.target === helpModal) {
          helpModal.style.display = "none";
        }
      });
    }

    // Tool buttons functionality
    document.querySelectorAll(".tool-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (!target) return;

        const toolCard = target.closest(".tool-card");
        if (!toolCard) return;

        const toolName = toolCard.querySelector("h3")?.textContent;
        alert(`Launching ${toolName}...`);
      });
    });

    // Copy code functionality
    document.querySelectorAll(".copy-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (!target) return;

        const snippetCard = target.closest(".snippet-card");
        if (!snippetCard) return;

        const codeElement = snippetCard.querySelector("code");
        if (!codeElement) return;

        navigator.clipboard.writeText(codeElement.textContent || "").then(() => {
          target.textContent = "Copied!";
          setTimeout(() => {
            target.textContent = "Copy Code";
          }, 2000);
        });
      });
    });

    // Auto-update log
    setInterval(() => {
      const logContainer = document.querySelector(".log-container");
      if (!logContainer) return;

      const newEntry = document.createElement("div");
      newEntry.className = "log-entry";
      
      const now = new Date();
      const timeStr = now.toTimeString().split(" ")[0];
      
      newEntry.innerHTML = `
        <div class="log-time">${timeStr}</div>
        <div class="log-level success">INFO</div>
        <div class="log-message">System health check passed</div>
      `;
      
      logContainer.insertBefore(newEntry, logContainer.firstChild);
      
      // Keep only last 10 entries
      const entries = logContainer.querySelectorAll(".log-entry");
      if (entries.length > 10) {
        entries[entries.length - 1].remove();
      }
    }, 10000);
  </script>
</Layout>

<style>
  .dev-dashboard {
    margin-bottom: 40px;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
  }

  .metric-card {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.05) 100%);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 15px;
    padding: 25px;
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .metric-icon {
    font-size: 2.5rem;
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .metric-content h3 {
    color: #ffffff;
    font-size: 0.9rem;
    margin-bottom: 8px;
  }

  .metric-value {
    font-size: 2rem;
    font-weight: bold;
    color: #ef4444;
    margin-bottom: 5px;
  }

  .metric-value.success {
    color: #10b981;
  }

  .metric-value.warning {
    color: #f59e0b;
  }

  .metric-subtitle {
    color: #cccccc;
    font-size: 0.8rem;
    margin: 0;
  }

  .dev-tools, .code-snippets, .dev-log {
    margin-bottom: 40px;
  }

  .dev-tools h2, .code-snippets h2, .dev-log h2 {
    color: #ffffff;
    margin-bottom: 25px;
    font-size: 1.5rem;
  }

  .tools-grid, .snippets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
  }

  .tool-card, .snippet-card {
    background: rgba(239, 68, 68, 0.05);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 15px;
    padding: 25px;
    transition: all 0.3s ease;
  }

  .tool-card:hover, .snippet-card:hover {
    transform: translateY(-5px);
    border-color: rgba(239, 68, 68, 0.4);
    box-shadow: 0 15px 40px rgba(239, 68, 68, 0.2);
  }

  .tool-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
  }

  .tool-card h3, .snippet-card h3 {
    color: #ffffff;
    margin-bottom: 10px;
  }

  .tool-card p {
    color: #cccccc;
    margin-bottom: 20px;
  }

  .tool-btn, .copy-btn {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    color: #ffffff;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tool-btn:hover, .copy-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(239, 68, 68, 0.3);
  }

  .snippet-card pre {
    background: rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    overflow-x: auto;
  }

  .snippet-card code {
    color: #ef4444;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .log-container {
    background: rgba(0, 0, 0, 0.5);
    border-radius: 15px;
    padding: 20px;
    max-height: 400px;
    overflow-y: auto;
  }

  .log-entry {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .log-entry:last-child {
    border-bottom: none;
  }

  .log-time {
    color: #999999;
    font-family: monospace;
    font-size: 0.9rem;
    min-width: 80px;
  }

  .log-level {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
    min-width: 60px;
    text-align: center;
  }

  .log-level.success {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
  }

  .log-level.warning {
    background: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
  }

  .log-level.error {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .log-message {
    color: #e0e0e0;
    flex: 1;
  }

  @media (max-width: 768px) {
    .dashboard-grid, .tools-grid, .snippets-grid {
      grid-template-columns: 1fr;
    }

    .log-entry {
      flex-direction: column;
      align-items: flex-start;
      gap: 5px;
    }
    
    .tester-container {
      grid-template-columns: 1fr;
    }
  }

  /* API Tester Additional Styles */
  .api-tester {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    border: 1px solid var(--border-color);
  }

  .tester-container {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }

  .tester-controls {
    background: var(--surface-bg);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }

  .control-group {
    margin-bottom: 1rem;
  }

  .control-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-primary);
  }

  .control-group select,
  .control-group input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--card-bg);
    color: var(--text-primary);
    font-size: 0.9rem;
  }

  .chat-interface {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .prompt-section {
    background: var(--surface-bg);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }

  .prompt-section label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-primary);
  }

  #promptInput {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--card-bg);
    color: var(--text-primary);
    font-family: inherit;
    resize: vertical;
    margin-bottom: 1rem;
  }

  .prompt-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .btn-primary, .btn-secondary, .btn-tertiary {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: var(--accent);
    color: white;
  }

  .btn-primary:hover {
    background: #0056b3;
    transform: translateY(-1px);
  }

  .btn-secondary {
    background: var(--warning);
    color: white;
  }

  .btn-secondary:hover {
    background: #e0a800;
    transform: translateY(-1px);
  }

  .btn-tertiary {
    background: var(--surface-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }

  .btn-tertiary:hover {
    background: var(--border-color);
    transform: translateY(-1px);
  }

  .response-section {
    flex: 1;
  }

  .response-section label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-primary);
  }

  .response-container {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    min-height: 150px;
    max-height: 300px;
    overflow-y: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .response-container .placeholder {
    color: var(--text-secondary);
    font-style: italic;
    font-family: inherit;
  }

  .response-container .loading {
    color: var(--accent);
    font-weight: 500;
  }

  .response-container .error {
    color: var(--error);
    font-weight: 500;
  }

  .response-container .success {
    color: var(--text-primary);
  }

  .response-metadata {
    background: var(--surface-bg);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 0.75rem;
    margin-top: 1rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.5rem;
    font-size: 0.85rem;
  }

  .metadata-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .metadata-item strong {
    color: var(--text-primary);
  }

  .metadata-item span {
    color: var(--text-secondary);
    font-family: 'Courier New', monospace;
  }
</style>

<script>
  // BIELIK API Functions
  class BielikAPITester {
    constructor() {
      this.isLoading = false;
      this.initializeElements();
      this.bindEvents();
      this.updateTemperatureValue();
    }
    
    initializeElements() {
      this.elements = {
        modelSelect: document.getElementById('modelSelect'),
        temperatureSlider: document.getElementById('temperatureSlider'),
        temperatureValue: document.getElementById('temperatureValue'),
        maxTokensInput: document.getElementById('maxTokensInput'),
        promptInput: document.getElementById('promptInput'),
        sendPrompt: document.getElementById('sendPrompt'),
        testConnection: document.getElementById('testConnection'),
        clearChat: document.getElementById('clearChat'),
        responseContainer: document.getElementById('responseContainer'),
        responseMetadata: document.getElementById('responseMetadata'),
        usedModel: document.getElementById('usedModel'),
        tokenUsage: document.getElementById('tokenUsage'),
        responseTime: document.getElementById('responseTime'),
        workerStatus: document.getElementById('workerStatus')
      };
    }
    
    bindEvents() {
      this.elements.temperatureSlider.addEventListener('input', () => this.updateTemperatureValue());
      this.elements.sendPrompt.addEventListener('click', () => this.sendPrompt());
      this.elements.testConnection.addEventListener('click', () => this.testConnection());
      this.elements.clearChat.addEventListener('click', () => this.clearChat());
      
      // Enter key support in textarea
      this.elements.promptInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.ctrlKey) {
          e.preventDefault();
          this.sendPrompt();
        }
      });
    }
    
    updateTemperatureValue() {
      const value = this.elements.temperatureSlider.value;
      this.elements.temperatureValue.textContent = value;
    }
    
    async sendPrompt() {
      if (this.isLoading) return;
      
      const prompt = this.elements.promptInput.value.trim();
      if (!prompt) {
        this.showError('Wprowad≈∫ prompt przed wys≈Çaniem!');
        return;
      }
      
      this.setLoading(true);
      const startTime = Date.now();
      
      try {
        const requestData = {
          prompt: prompt,
          model: this.elements.modelSelect.value,
          temperature: parseFloat(this.elements.temperatureSlider.value),
          max_tokens: parseInt(this.elements.maxTokensInput.value)
        };
        
        console.log('Wysy≈Çanie requestu do BIELIK API:', requestData);
        
        const response = await fetch('/api/bielik-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData)
        });
        
        const responseTime = Date.now() - startTime;
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('Odpowied≈∫ z BIELIK API:', data);
        
        this.showResponse(data, responseTime);
        
      } catch (error) {
        console.error('B≈ÇƒÖd podczas komunikacji z BIELIK API:', error);
        this.showError(`B≈ÇƒÖd: ${error.message}`);
      } finally {
        this.setLoading(false);
      }
    }
    
    async testConnection() {
      if (this.isLoading) return;
      
      this.setLoading(true);
      const startTime = Date.now();
      
      try {
        console.log('Testowanie po≈ÇƒÖczenia z BIELIK API...');
        
        // Test analytics endpoint first
        const analyticsResponse = await fetch('/api/bielik-analytics');
        const analyticsData = await analyticsResponse.json();
        
        // Test chat endpoint with simple prompt
        const chatResponse = await fetch('/api/bielik-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: 'Test po≈ÇƒÖczenia',
            model: 'bielik-7b-instruct',
            temperature: 0.7,
            max_tokens: 50
          })
        });
        
        const chatData = await chatResponse.json();
        const responseTime = Date.now() - startTime;
        
        const testResult = {
          text: `‚úÖ Test po≈ÇƒÖczenia pomy≈õlny!

Analytics API: ${analyticsResponse.ok ? 'OK' : 'B≈ÅƒÑD'}
Chat API: ${chatResponse.ok ? 'OK' : 'B≈ÅƒÑD'}
Cloudflare Worker: ${chatData.worker_used ? 'Aktywny' : 'Fallback'}

Statystyki u≈ºycia:
- Ca≈Çkowite zapytania: ${analyticsData.total_requests}
- Ostatnie 24h: ${analyticsData.requests_last_24h}
- ≈öredni czas odpowiedzi: ${analyticsData.avg_response_time}ms`,
          model: 'Test systemu',
          tokens: analyticsData.total_tokens || 0,
          worker_used: chatData.worker_used,
          worker_response_time: chatData.worker_response_time
        };
        
        this.showResponse(testResult, responseTime);
        
      } catch (error) {
        console.error('B≈ÇƒÖd podczas testu po≈ÇƒÖczenia:', error);
        this.showError(`Test nie powi√≥d≈Ç siƒô: ${error.message}`);
      } finally {
        this.setLoading(false);
      }
    }
    
    clearChat() {
      this.elements.responseContainer.innerHTML = '<div class="placeholder">Wy≈õlij prompt aby zobaczyƒá odpowied≈∫ BIELIK...</div>';
      this.elements.responseMetadata.style.display = 'none';
      this.elements.promptInput.value = '';
    }
    
    setLoading(loading) {
      this.isLoading = loading;
      this.elements.sendPrompt.disabled = loading;
      this.elements.testConnection.disabled = loading;
      
      if (loading) {
        this.elements.responseContainer.innerHTML = '<div class="loading">‚è≥ Wysy≈Çanie do BIELIK...</div>';
        this.elements.responseMetadata.style.display = 'none';
      }
    }
    
    showResponse(data, responseTime) {
      // Show response text
      this.elements.responseContainer.innerHTML = `<div class="success">${data.text || 'Brak odpowiedzi'}</div>`;
      
      // Show metadata
      this.elements.usedModel.textContent = data.model || 'Nieznany';
      this.elements.tokenUsage.textContent = data.tokens || '0';
      this.elements.responseTime.textContent = `${responseTime}ms`;
      this.elements.workerStatus.textContent = data.worker_used ? 
        `Worker (${data.worker_response_time}ms)` : 'Fallback';
      
      this.elements.responseMetadata.style.display = 'grid';
    }
    
    showError(message) {
      this.elements.responseContainer.innerHTML = `<div class="error">${message}</div>`;
      this.elements.responseMetadata.style.display = 'none';
    }
  }

  // Modal functionality
  function initModal() {
    const modal = document.getElementById('helpModal');
    const helpButton = document.getElementById('helpButton');
    const closeModal = document.getElementById('closeModal');

    helpButton.addEventListener('click', () => {
      modal.style.display = 'block';
    });

    closeModal.addEventListener('click', () => {
      modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });
  }

  // Initialize everything when page loads
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Inicjalizacja BIELIK API Tester...');
    window.bielikTester = new BielikAPITester();
    initModal();
  });
</script>
