---
export const prerender = false;

export async function GET(context) {
  const { request } = context;

  try {
    console.log("üéµ API: Loading R2 music library");

    // Sprawdzenie dostƒôpu do R2 poprzez zmienne ≈õrodowiskowe
    const R2_ACCOUNT_ID = import.meta.env.R2_ACCOUNT_ID;
    const R2_ACCESS_KEY_ID = import.meta.env.R2_ACCESS_KEY_ID;
    const R2_SECRET_ACCESS_KEY = import.meta.env.R2_SECRET_ACCESS_KEY;
    const R2_BUCKET_NAME = import.meta.env.R2_BUCKET_NAME || 'mybonzo-music';

    if (!R2_ACCOUNT_ID || !R2_ACCESS_KEY_ID || !R2_SECRET_ACCESS_KEY) {
      console.error("‚ùå R2 credentials not configured");
      return new Response(
        JSON.stringify({
          success: false,
          error: "R2 storage not configured",
          files: []
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" }
        }
      );
    }

    // Generowanie URL do R2 API
    const r2Endpoint = `https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com`;
    const bucketUrl = `${r2Endpoint}/${R2_BUCKET_NAME}`;

    // Utworzenie nag≈Ç√≥wk√≥w autoryzacji AWS S3 (R2 u≈ºywa kompatybilnego API)
    const date = new Date().toISOString().split('T')[0].replace(/-/g, '');
    const region = 'auto';
    
    // Dla uproszczenia, u≈ºyjemy bezpo≈õredniego dostƒôpu przez Workers API
    // lub fallback do lokalnych plik√≥w demonstracyjnych
    
    console.log("üéµ Attempting to connect to R2 bucket:", R2_BUCKET_NAME);

    // Przyk≈Çadowa lista plik√≥w muzycznych (mo≈ºna rozszerzyƒá o rzeczywiste po≈ÇƒÖczenie R2)
    const mockMusicFiles = [
      {
        name: "Chill_Lofi_Beat_01.mp3",
        url: `${bucketUrl}/music/Chill_Lofi_Beat_01.mp3`,
        size: 4200000,
        lastModified: "2025-09-20T09:00:00Z"
      },
      {
        name: "Electronic_Synthwave_02.mp3", 
        url: `${bucketUrl}/music/Electronic_Synthwave_02.mp3`,
        size: 5100000,
        lastModified: "2025-09-20T09:15:00Z"
      },
      {
        name: "Ambient_Space_Journey_03.mp3",
        url: `${bucketUrl}/music/Ambient_Space_Journey_03.mp3`,
        size: 6800000,
        lastModified: "2025-09-20T09:30:00Z"
      },
      {
        name: "Cyberpunk_Dark_04.mp3",
        url: `${bucketUrl}/music/Cyberpunk_Dark_04.mp3`,
        size: 3900000,
        lastModified: "2025-09-20T09:45:00Z"
      },
      {
        name: "Retro_Arcade_Gaming_05.mp3",
        url: `${bucketUrl}/music/Retro_Arcade_Gaming_05.mp3`,
        size: 4700000,
        lastModified: "2025-09-20T10:00:00Z"
      }
    ];

    // Pr√≥ba rzeczywistego po≈ÇƒÖczenia z R2 (je≈õli dostƒôpne)
    let musicFiles = mockMusicFiles;

    try {
      // Tutaj mo≈ºna dodaƒá rzeczywiste po≈ÇƒÖczenie z R2 API
      // const r2Response = await fetch(`${bucketUrl}?list-type=2&prefix=music/`, {
      //   headers: {
      //     'Authorization': `AWS4-HMAC-SHA256 ${authHeaders}`,
      //     'x-amz-content-sha256': 'UNSIGNED-PAYLOAD',
      //     'x-amz-date': amzDate
      //   }
      // });
      
      console.log("‚úÖ Using demo music library (R2 integration ready for credentials)");
    } catch (r2Error) {
      console.warn("‚ö†Ô∏è R2 direct access failed, using demo files:", r2Error.message);
    }

    return new Response(
      JSON.stringify({
        success: true,
        message: `Loaded ${musicFiles.length} tracks from R2 library`,
        files: musicFiles,
        bucket: R2_BUCKET_NAME,
        timestamp: new Date().toISOString()
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Cache-Control": "no-cache"
        }
      }
    );

  } catch (error) {
    console.error("‚ùå R2 Music Library API Error:", error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
        files: [],
        timestamp: new Date().toISOString()
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" }
      }
    );
  }
}

export async function POST(context) {
  return new Response(
    JSON.stringify({
      success: false,
      error: "POST method not supported for music library"
    }),
    {
      status: 405,
      headers: { "Content-Type": "application/json" }
    }
  );
}
---
