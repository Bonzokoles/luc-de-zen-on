Poniżej znajduje się rozszerzona, szczegółowa instrukcja wdrożenia z uwierzytelnianiem, cache’owaniem oraz wieloetapową orkiestracją modeli AI w projekcie Astro na www.mybonzo.com, korzystając z Cloudflare Pages i Workers.

Rozszerzona instrukcja integracji AI w Astro + Cloudflare Workers
1. Uwierzytelnianie API
Dodaj prostą autoryzację tokenem w pliku API Astro (src/pages/api/ai.js):

js
const VALID_TOKEN = 'twoj-sekretny-token'

export async function post({ request }) {
  const authHeader = request.headers.get('Authorization')
  if (authHeader !== `Bearer ${VALID_TOKEN}`) {
    return {
      status: 401,
      body: JSON.stringify({ error: 'Unauthorized' }),
      headers: { 'Content-Type': 'application/json' }
    }
  }

  const body = await request.json()
  const aiApiUrl = 'https://adres-twojego-modelu-bielik/api'

  const response = await fetch(aiApiUrl, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': authHeader
    },
    body: JSON.stringify(body),
  })

  const data = await response.json()

  return {
    status: response.status,
    body: JSON.stringify(data),
    headers: { 'Content-Type': 'application/json' }
  }
}
2. Cache’owanie wyników
W workerze Cloudflare możesz dodać cache’owanie odpowiedzi:

js
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event))
})

async function handleRequest(event) {
  const cache = caches.default
  const request = event.request
  const cacheKey = new Request(request.url, request)

  // Sprawdź cache
  let response = await cache.match(cacheKey)
  if (!response) {
    const fetchResponse = await fetch(request)
    // Cache’uj odpowiedź max 5 min
    response = new Response(fetchResponse.body, fetchResponse)
    response.headers.append('Cache-Control', 'public, max-age=300')
    event.waitUntil(cache.put(cacheKey, response.clone()))
  }
  return response
}
3. Wieloetapowa orkiestracja modeli AI
Możesz rozbudować plik API Astro do wywołań kolejnych modeli AI:

js
export async function post({ request }) {
  const authHeader = request.headers.get('Authorization')
  if (authHeader !== `Bearer ${VALID_TOKEN}`) {
    return {
      status: 401,
      body: JSON.stringify({ error: 'Unauthorized' }),
      headers: { 'Content-Type': 'application/json' }
    }
  }
  const body = await request.json()

  // Wywołaj najpierw model Bielik
  const responseBielik = await fetch('https://adres-modelu-bielik/api', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Authorization': authHeader },
    body: JSON.stringify(body),
  })
  const dataBielik = await responseBielik.json()

  // Na podstawie odpowiedzi z Bielika wywołaj inny model np. LangChain
  const responseLangChain = await fetch('https://adres-modelu-langchain/api', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Authorization': authHeader },
    body: JSON.stringify({ input: dataBielik.result }),
  })
  const dataLangChain = await responseLangChain.json()

  return {
    status: 200,
    body: JSON.stringify({ bielik: dataBielik, langchain: dataLangChain }),
    headers: { 'Content-Type': 'application/json' }
  }
}
4. Frontend – wywołania z autoryzacją
Przykład wywołania API z tokenem w frontendzie Astro:

js
const response = await fetch('/api/ai', {
  method: 'POST',
  headers: { 
    'Content-Type': 'application/json',
    'Authorization': 'Bearer twoj-sekretny-token'
  },
  body: JSON.stringify({ prompt: "Twoje pytanie do AI" })
})
const result = await response.json()
console.log(result)
5. Deployment
Zatwierdź zmiany w repozytorium i wypchnij na branch powiązany z Cloudflare Pages.

Cloudflare automatycznie przebuduje i opublikuje Twoją stronę z nową funkcjonalnością.

W panelu Cloudflare Workers możesz monitorować działanie workerów i cache.

