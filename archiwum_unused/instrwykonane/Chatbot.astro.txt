---
import { useState } from 'react';

// HTML sanitization function to prevent XSS - properly escaped
const sanitizeHtml = (text) => {
  if (typeof text !== 'string') return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
};

const [input, setInput] = useState('');
const [messages, setMessages] = useState([]);
const [isLoading, setIsLoading] = useState(false);
const [error, setError] = useState(null);

const sendMessage = async () => {
  if (!input.trim()) return;
  
  const userMessage = { from: 'user', text: input.trim() };
  
  // Use functional update for better state management
  setMessages(prev => [...prev, userMessage]);
  setInput('');
  setIsLoading(true);
  setError(null);

  try {
    const res = await fetch('/api/ai-bot-worker', {
      method: 'POST',
      body: JSON.stringify({ prompt: input }),
      headers: { 'Content-Type': 'application/json' },
    });

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    const { answer } = await res.json();
    const botMessage = { from: 'bot', text: answer };
    
    setMessages(prev => [...prev, botMessage]);
  } catch (err) {
    console.error('Error sending message:', err);
    setError('Wystąpił błąd podczas wysyłania wiadomości');
    const errorMessage = { from: 'bot', text: 'Przepraszam, wystąpił błąd. Spróbuj ponownie.' };
    setMessages(prev => [...prev, errorMessage]);
  } finally {
    setIsLoading(false);
  }
};
---

<div style="max-width:600px; margin:auto;">
  <div style="border:1px solid #ccc; padding:1rem; height:300px; overflow-y:auto;">
    {messages.map((m, index) => (
      <p 
        key={index}
        style={m.from === 'user' ? 'text-align:right; color:#0af;' : 'text-align:left; color:#aaa;'}
        dangerouslySetInnerHTML={{ __html: sanitizeHtml(m.text) }}
      />
    ))}
    {isLoading && (
      <p style="text-align:left; color:#aaa; font-style:italic;">
        Bot pisze...
      </p>
    )}
    {error && (
      <p style="text-align:left; color:red; font-style:italic;">
        {error}
      </p>
    )}
  </div>
  <input 
    type="text" 
    value={input} 
    onInput={e => setInput(e.target.value)} 
    onKeyDown={e => e.key === 'Enter' && sendMessage()} 
    placeholder="Napisz wiadomość..." 
    style="width:80%;" 
    disabled={isLoading}
  />
  <button 
    onClick={sendMessage} 
    style="width:18%;"
    disabled={isLoading || !input.trim()}
  >
    {isLoading ? 'Wysyłanie...' : 'Wyślij'}
  </button>
</div>
