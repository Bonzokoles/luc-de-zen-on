import{V as x,M as u}from"./math.vector.C8FsJn6B.js";class r{constructor(t,s,o,n){this.normal=new x(t,s,o),this.d=n}asArray(){return[this.normal.x,this.normal.y,this.normal.z,this.d]}clone(){return new r(this.normal.x,this.normal.y,this.normal.z,this.d)}getClassName(){return"Plane"}getHashCode(){let t=this.normal.getHashCode();return t=t*397^(this.d|0),t}normalize(){const t=Math.sqrt(this.normal.x*this.normal.x+this.normal.y*this.normal.y+this.normal.z*this.normal.z);let s=0;return t!==0&&(s=1/t),this.normal.x*=s,this.normal.y*=s,this.normal.z*=s,this.d*=s,this}transform(t){const s=r._TmpMatrix;t.invertToRef(s);const o=s.m,n=this.normal.x,i=this.normal.y,a=this.normal.z,m=this.d,c=n*o[0]+i*o[1]+a*o[2]+m*o[3],d=n*o[4]+i*o[5]+a*o[6]+m*o[7],h=n*o[8]+i*o[9]+a*o[10]+m*o[11],e=n*o[12]+i*o[13]+a*o[14]+m*o[15];return new r(c,d,h,e)}dotCoordinate(t){return this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.d}copyFromPoints(t,s,o){const n=s.x-t.x,i=s.y-t.y,a=s.z-t.z,m=o.x-t.x,c=o.y-t.y,d=o.z-t.z,h=i*d-a*c,e=a*m-n*d,y=n*c-i*m,z=Math.sqrt(h*h+e*e+y*y);let l;return z!==0?l=1/z:l=0,this.normal.x=h*l,this.normal.y=e*l,this.normal.z=y*l,this.d=-(this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z),this}isFrontFacingTo(t,s){return x.Dot(this.normal,t)<=s}signedDistanceTo(t){return x.Dot(t,this.normal)+this.d}static FromArray(t){return new r(t[0],t[1],t[2],t[3])}static FromPoints(t,s,o){const n=new r(0,0,0,0);return n.copyFromPoints(t,s,o),n}static FromPositionAndNormal(t,s){const o=new r(0,0,0,0);return this.FromPositionAndNormalToRef(t,s,o)}static FromPositionAndNormalToRef(t,s,o){return o.normal.copyFrom(s),o.normal.normalize(),o.d=-t.dot(o.normal),o}static SignedDistanceToPlaneFromPositionAndNormal(t,s,o){const n=-(s.x*t.x+s.y*t.y+s.z*t.z);return x.Dot(o,s)+n}}r._TmpMatrix=u.Identity();export{r as P};
