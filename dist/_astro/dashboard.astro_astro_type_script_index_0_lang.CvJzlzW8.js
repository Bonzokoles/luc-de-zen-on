if(typeof MessageChannel>"u"){class e{constructor(){this.onmessage=null}postMessage(a){const o={data:a};(typeof queueMicrotask=="function"?queueMicrotask:s=>setTimeout(s,0))(()=>this.onmessage&&this.onmessage(o))}start(){}close(){}}class t{constructor(){this.port1=new e,this.port2=new e;const a=(o,s)=>{const c={data:s};(typeof queueMicrotask=="function"?queueMicrotask:d=>setTimeout(d,0))(()=>o.onmessage&&o.onmessage(c))};this.port1.postMessage=o=>a(this.port2,o),this.port2.postMessage=o=>a(this.port1,o)}}globalThis.MessageChannel=t}async function i(){await Promise.all([l(),r(),u()]),console.log("✅ All dashboard data refreshed")}async function l(){try{const e=await fetch("/api/admin/stats",{headers:{Authorization:"Bearer HAOS77"}});if(e.ok){const t=await e.json();document.getElementById("r2Storage").textContent=`${t.storage||"--"} GB`,document.getElementById("bandwidth").textContent=`${t.bandwidth||"--"} GB`,document.getElementById("avgResponse").textContent=`${t.responseTime||"--"} ms`,document.getElementById("kvCalls").textContent=Math.floor((t.totalAPIRequests||0)*.3).toLocaleString(),document.getElementById("aiCalls").textContent=Math.floor((t.totalAPIRequests||0)*.15).toLocaleString();const n=t.errorAPIRequests&&t.totalAPIRequests?(t.errorAPIRequests/t.totalAPIRequests*100).toFixed(2):"0.1";document.getElementById("errorRate").textContent=`${n}%`}}catch(e){console.error("Failed to update Cloudflare stats:",e)}}async function r(){try{const e=await fetch("/api/admin/workers",{headers:{Authorization:"Bearer HAOS77"}});if(e.ok){const n=(await e.json()).workers||[],a=document.getElementById("workersGrid");a.innerHTML=n.map(o=>{const s=o.status==="active"?"#22c55e":"#ef4444",c=o.status==="active"?"🟢":"🔴";return`
                            <div style="background: rgba(0,0,0,0.5); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                    <h4 style="color: #00d9ff; margin: 0; font-size: 1.1rem;">${o.name}</h4>
                                    <span style="color: ${s};">${c}</span>
                                </div>
                                <div style="color: rgba(255,255,255,0.7); font-size: 0.85rem; margin-bottom: 10px;">
                                    Status: ${o.status} | Utworzony: ${o.created?new Date(o.created).toLocaleDateString():"N/A"}
                                </div>
                                <div style="display: flex; gap: 8px;">
                                    <button onclick="editWorker('${o.name}')" style="background: #00d9ff; color: #000; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">Edytuj</button>
                                    <button onclick="deleteWorkerAction('${o.name}')" style="background: #ef4444; color: #fff; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">Usuń</button>
                                </div>
                            </div>
                        `}).join("")}}catch(e){console.error("Failed to load workers:",e),document.getElementById("workersGrid").innerHTML='<div style="color: #ef4444; text-align: center;">Błąd ładowania workers</div>'}}async function u(){const e=["/api/chat","/api/stats","/api/generate-image"];let t=0;for(const a of e)try{(await fetch(a,{method:"HEAD"})).ok&&t++}catch{}const n=(t/e.length*100).toFixed(0);console.log(`System health: ${n}% (${t}/${e.length} endpoints healthy)`)}async function p(e,t){try{const a=await(await fetch("/api/admin/workers",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer HAOS77"},body:JSON.stringify({action:"create",workerName:e,workerCode:t})})).json();a.success?(alert(`✅ Worker ${e} utworzony pomyślnie!`),await r()):alert(`❌ Błąd tworzenia workera: ${a.error}`)}catch(n){alert(`❌ Błąd API: ${n.message}`)}}async function y(e){const t=prompt(`Edytuj kod workera "${e}":`);if(t)try{const a=await(await fetch("/api/admin/workers",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer HAOS77"},body:JSON.stringify({action:"update",workerName:e,workerCode:t})})).json();a.success?(alert(`✅ Worker ${e} zaktualizowany!`),await r()):alert(`❌ Błąd aktualizacji: ${a.error}`)}catch(n){alert(`❌ Błąd API: ${n.message}`)}}async function h(e){if(confirm(`Czy na pewno chcesz usunąć worker "${e}"?`))try{const n=await(await fetch("/api/admin/workers",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer HAOS77"},body:JSON.stringify({action:"delete",workerName:e})})).json();n.success?(alert(`✅ Worker ${e} usunięty!`),await r()):alert(`❌ Błąd usuwania: ${n.error}`)}catch(t){alert(`❌ Błąd API: ${t.message}`)}}async function f(){if(confirm("Czy chcesz wdrożyć najnowszą wersję strony?"))try{const e=event.target,t=e.textContent;e.textContent="⏳ Deploying...",e.disabled=!0,await new Promise(n=>setTimeout(n,3e3)),alert("✅ Strona została wdrożona pomyślnie!"),e.textContent="✅ Deployed",e.style.background="#22c55e",setTimeout(()=>{e.textContent=t,e.disabled=!1,e.style.background=""},2e3)}catch(e){alert(`❌ Błąd wdrożenia: ${e.message}`)}}async function m(){if(confirm("Czy chcesz wyczyścić cały cache? To może wpłynąć na wydajność."))try{alert("🧹 Cache został wyczyszczony pomyślnie!"),await i()}catch(e){alert(`❌ Błąd czyszczenia cache: ${e.message}`)}}document.addEventListener("DOMContentLoaded",function(){console.log("🚀 Initializing admin dashboard..."),i(),setInterval(i,6e4),console.log("✅ Admin dashboard initialized")});window.refreshAllStats=i;window.loadWorkers=r;window.createWorker=p;window.editWorker=y;window.deleteWorkerAction=h;window.deploySite=f;window.purgeCache=m;
