import{P as n}from"./math.plane.DogzNArm.js";class i{static GetPlanes(a){const e=[];for(let o=0;o<6;o++)e.push(new n(0,0,0,0));return i.GetPlanesToRef(a,e),e}static GetNearPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]+o[2],e.normal.y=o[7]+o[6],e.normal.z=o[11]+o[10],e.d=o[15]+o[14],e.normalize()}static GetFarPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]-o[2],e.normal.y=o[7]-o[6],e.normal.z=o[11]-o[10],e.d=o[15]-o[14],e.normalize()}static GetLeftPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]+o[0],e.normal.y=o[7]+o[4],e.normal.z=o[11]+o[8],e.d=o[15]+o[12],e.normalize()}static GetRightPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]-o[0],e.normal.y=o[7]-o[4],e.normal.z=o[11]-o[8],e.d=o[15]-o[12],e.normalize()}static GetTopPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]-o[1],e.normal.y=o[7]-o[5],e.normal.z=o[11]-o[9],e.d=o[15]-o[13],e.normalize()}static GetBottomPlaneToRef(a,e){const o=a.m;e.normal.x=o[3]+o[1],e.normal.y=o[7]+o[5],e.normal.z=o[11]+o[9],e.d=o[15]+o[13],e.normalize()}static GetPlanesToRef(a,e){i.GetNearPlaneToRef(a,e[0]),i.GetFarPlaneToRef(a,e[1]),i.GetLeftPlaneToRef(a,e[2]),i.GetRightPlaneToRef(a,e[3]),i.GetTopPlaneToRef(a,e[4]),i.GetBottomPlaneToRef(a,e[5])}static IsPointInFrustum(a,e){for(let o=0;o<6;o++)if(e[o].dotCoordinate(a)<0)return!1;return!0}}export{i as F};
