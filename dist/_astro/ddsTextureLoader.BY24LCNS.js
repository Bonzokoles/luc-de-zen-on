import{S as d}from"./engine.Bhq7AZzW.js";import{DDSTools as m}from"./dds.CeNvnj7I.js";import"./decorators.serialization.DTWIlLMH.js";import"./math.vector.C8FsJn6B.js";import"./math.color.BvxHr_bk.js";import"./preload-helper.BlTxHScW.js";import"./math.axis.BWIUWoG3.js";import"./math.plane.DogzNArm.js";import"./math.path.Rz-CSHk9.js";import"./baseTexture.xJCKUhPX.js";import"./math.size.F3xmSqZc.js";import"./passPostProcess.C_qZ8mVx.js";import"./postProcess.BhJOrjOy.js";import"./texture.DcuyhkEj.js";import"./instantiationTools.DpJ04vA6.js";import"./smartArray.BsIpkRz3.js";import"./math.viewport.CgkTt1RS.js";class B{constructor(){this.supportCascades=!0}loadCubeData(e,a,t,o){const p=a.getEngine();let i,n=!1,r=1e3;if(Array.isArray(e))for(let s=0;s<e.length;s++){const l=e[s];i=m.GetDDSInfo(l),a.width=i.width,a.height=i.height,n=(i.isRGB||i.isLuminance||i.mipmapCount>1)&&a.generateMipMaps,p._unpackFlipY(i.isCompressed),m.UploadDDSLevels(p,a,l,i,n,6,-1,s),!i.isFourCC&&i.mipmapCount===1?p.generateMipMapsForCubemap(a):r=i.mipmapCount-1}else{const s=e;i=m.GetDDSInfo(s),a.width=i.width,a.height=i.height,t&&(i.sphericalPolynomial=new d),n=(i.isRGB||i.isLuminance||i.mipmapCount>1)&&a.generateMipMaps,p._unpackFlipY(i.isCompressed),m.UploadDDSLevels(p,a,s,i,n,6),!i.isFourCC&&i.mipmapCount===1?p.generateMipMapsForCubemap(a,!1):r=i.mipmapCount-1}p._setCubeMapTextureParams(a,n,r),a.isReady=!0,a.onLoadedObservable.notifyObservers(a),a.onLoadedObservable.clear(),o&&o({isDDS:!0,width:a.width,info:i,data:e,texture:a})}loadData(e,a,t){const o=m.GetDDSInfo(e),p=(o.isRGB||o.isLuminance||o.mipmapCount>1)&&a.generateMipMaps&&Math.max(o.width,o.height)>>o.mipmapCount-1===1;t(o.width,o.height,p,o.isFourCC,()=>{m.UploadDDSLevels(a.getEngine(),a,e,o,p,1)})}}export{B as _DDSTextureLoader};
