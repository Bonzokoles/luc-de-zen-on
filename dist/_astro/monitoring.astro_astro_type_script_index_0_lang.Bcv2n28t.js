if(typeof MessageChannel>"u"){class e{constructor(){this.onmessage=null}postMessage(t){const n={data:t};(typeof queueMicrotask=="function"?queueMicrotask:a=>setTimeout(a,0))(()=>this.onmessage&&this.onmessage(n))}start(){}close(){}}class o{constructor(){this.port1=new e,this.port2=new e;const t=(n,a)=>{const d={data:a};(typeof queueMicrotask=="function"?queueMicrotask:u=>setTimeout(u,0))(()=>n.onmessage&&n.onmessage(d))};this.port1.postMessage=n=>t(this.port2,n),this.port2.postMessage=n=>t(this.port1,n)}}globalThis.MessageChannel=o}async function c(){try{const e=await fetch("/api/admin/monitoring",{headers:{Authorization:"Bearer HAOS77"}});if(e.ok)return await e.json();throw new Error("API call failed")}catch(e){return console.error("Failed to fetch monitoring data:",e),{cpuUsage:28,memoryUsage:52,activeConnections:167,avgResponseTime:89,todayRequests:12384,successRate:99.2,errorRate:.3,diskUsage:74,networkIO:8.7,uptime:732}}}async function i(){const e=await c();if(document.getElementById("cpuUsage").textContent=`${e.cpuUsage}%`,document.getElementById("memoryUsage").textContent=`${e.memoryUsage}%`,document.getElementById("activeConnections").textContent=e.activeConnections,document.getElementById("avgResponseTime").textContent=`${e.avgResponseTime}ms`,document.getElementById("todayRequests").textContent=e.todayRequests.toLocaleString(),document.getElementById("successRate").textContent=`${e.successRate}%`,document.getElementById("errorRate").textContent=`${e.errorRate}%`,document.getElementById("diskUsage").textContent=`${e.diskUsage}%`,document.getElementById("networkIO").textContent=`${e.networkIO} MB/s`,document.getElementById("systemUptime").textContent=`${e.uptime}h`,e.workers&&e.workers.length>0){const o=[...e.workers].sort((s,t)=>t.load-s.load);document.getElementById("slowestEndpoint").textContent=o[0].endpoint||"/api/unknown",document.getElementById("fastestEndpoint").textContent=o[o.length-1].endpoint||"/api/unknown"}}async function r(){const o=(await c()).workers||[],s=document.getElementById("workersStatus");s.innerHTML=o.map(t=>{const n=t.status==="online"?"#22c55e":"#ef4444",a=t.status==="online"?"ğŸŸ¢":"ğŸ”´";return`
                    <div style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; padding: 15px;">
                        <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 10px;">
                            <h4 style="color: #00d9ff; margin: 0; font-size: 1rem;">${t.name}</h4>
                            <span style="color: ${n};">${a} ${t.status.toUpperCase()}</span>
                        </div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">
                            Load: ${t.load}%
                        </div>
                        <div style="width: 100%; background: rgba(0,0,0,0.5); height: 6px; border-radius: 3px; margin-top: 8px;">
                            <div style="width: ${t.load}%; background: #00d9ff; height: 100%; border-radius: 3px;"></div>
                        </div>
                    </div>
                `}).join("")}function l(){const e=[{time:"14:23",action:"Nowy uÅ¼ytkownik zarejestrowany",type:"info"},{time:"14:18",action:"Model AI zaktualizowany pomyÅ›lnie",type:"success"},{time:"14:15",action:"Backup bazy danych zakoÅ„czony",type:"success"},{time:"14:12",action:"Alert: Wysokie uÅ¼ycie CPU (85%)",type:"warning"},{time:"14:08",action:"API rate limit przekroczony dla IP: 192.168.1.100",type:"warning"},{time:"14:05",action:"System restart zakoÅ„czony pomyÅ›lnie",type:"success"},{time:"14:02",action:"BÅ‚Ä…d poÅ‚Ä…czenia z workerem 'bielik'",type:"error"},{time:"14:00",action:"RozpoczÄ™to scheduled backup",type:"info"}],o=document.getElementById("activityLog");o.innerHTML=e.map(s=>`
                <div style="background: rgba(0,0,0,0.3); border-left: 3px solid ${m(s.type)}; padding: 12px; margin-bottom: 8px; border-radius: 0 4px 4px 0;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <span style="color: white; font-size: 0.9rem;">${s.action}</span>
                        <span style="color: rgba(255,255,255,0.6); font-size: 0.8rem;">${s.time}</span>
                    </div>
                </div>
            `).join("")}function m(e){switch(e){case"success":return"#22c55e";case"warning":return"#f59e0b";case"error":return"#ef4444";default:return"#00d9ff"}}document.addEventListener("DOMContentLoaded",function(){i(),r(),l(),setInterval(()=>{i(),r()},3e4)});
