if (typeof MessageChannel === 'undefined') {
  class __PolyfillPort {
    constructor(){ this.onmessage = null; }
    postMessage(data){ const e={data}; (typeof queueMicrotask==='function'?queueMicrotask:(f)=>setTimeout(f,0))(()=> this.onmessage && this.onmessage(e)); }
    start(){} close(){}
  }
  class MessageChannel {
    constructor(){
      this.port1 = new __PolyfillPort();
      this.port2 = new __PolyfillPort();
      const dispatch = (target, data)=>{ const e={data}; (typeof queueMicrotask==='function'?queueMicrotask:(f)=>setTimeout(f,0))(()=> target.onmessage && target.onmessage(e)); };
      this.port1.postMessage = (d)=> dispatch(this.port2, d);
      this.port2.postMessage = (d)=> dispatch(this.port1, d);
    }
  }
  globalThis.MessageChannel = MessageChannel;
}
import { e as createAstro, c as createComponent, r as renderComponent, a as renderTemplate, g as defineScriptVars, h as addAttribute, m as maybeRenderHead } from '../../chunks/vendor_BHZTJLV0.mjs';
export { d as renderers } from '../../chunks/vendor_BHZTJLV0.mjs';
import { $ as $$MyBonzoLayout } from '../../chunks/MyBonzoLayout_DH5CUiol.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const $$Astro = createAstro("https://www.mybonzo.com");
async function getStaticPaths() {
  return [
    { params: { agentId: "mybonzo" } },
    { params: { agentId: "polaczek" } },
    { params: { agentId: "bielik" } },
    { params: { agentId: "assistant" } }
  ];
}
const $$agentId = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$agentId;
  const { agentId } = Astro2.params;
  const agentConfig = {
    mybonzo: {
      name: "MyBonzo AI",
      description: "G\u0142\xF3wny agent cyberpunkowy z pe\u0142n\u0105 funkcjonalno\u015Bci\u0105",
      color: "from-cyan-500 to-purple-600",
      capabilities: ["chat", "images", "tasks", "analysis"],
      model: "@cf/meta/llama-3.1-8b-instruct"
    },
    polaczek: {
      name: "Polaczek Agent",
      description: "Lokalny agent wspieraj\u0105cy polskie zadania",
      color: "from-red-500 to-white",
      capabilities: ["chat", "translation", "local-tasks"],
      model: "@cf/meta/llama-3.1-8b-instruct"
    },
    bielik: {
      name: "Bielik AI",
      description: "Polski model j\u0119zykowy dla zada\u0144 w j\u0119zyku polskim",
      color: "from-blue-500 to-green-600",
      capabilities: ["chat", "polish-tasks", "analysis"],
      model: "@cf/huggingface/bielik-7b-instruct-v0.1"
    },
    assistant: {
      name: "Universal Assistant",
      description: "Uniwersalny asystent do og\xF3lnych zada\u0144",
      color: "from-gray-500 to-blue-500",
      capabilities: ["chat", "help", "general-tasks"],
      model: "@cf/meta/llama-3.1-8b-instruct"
    }
  };
  const agent = agentConfig[agentId] || agentConfig.mybonzo;
  return renderTemplate`${renderComponent($$result, "MyBonzoLayout", $$MyBonzoLayout, { "title": `${agent.name} | AI Agents` }, { "default": async ($$result2) => renderTemplate(_b || (_b = __template([" ", '<main class="min-h-svh bg-black text-white"> <!-- Agent Header -->\n>>>>>>> Stashed changes\n<section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section> <!-- Capabilities Grid --> <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', " </div> </section> <!-- Chat Interface -->\nconst agent = agentConfig[agentId as keyof typeof agentConfig] || agentConfig.mybonzo;\n    ---\n", " <script>(function(){", '\n      const chatContainer = document.getElementById("chat-container");\n      const messageInput = document.getElementById("message-input");\n      const sendButton = document.getElementById("send-button");\n\n      // Funkcja wysy\u0142ania wiadomo\u015Bci\n      async function sendMessage() {\n        const message = messageInput.value.trim();\n        if (!message) return;\n\n        // Dodaj wiadomo\u015B\u0107 u\u017Cytkownika\n        addMessage(message, "user");\n        messageInput.value = "";\n\n        try {\n          // Wywo\u0142aj API agenta\n          const response = await fetch(`/api/agents/${agentId}/chat`, {\n            method: "POST",\n            headers: { "Content-Type": "application/json" },\n            body: JSON.stringify({ message, agentId }),\n          });\n\n          const data = await response.json();\n\n          if (data.success) {\n            addMessage(data.response, "agent");\n          } else {\n            addMessage("B\u0142\u0105d: " + data.error, "error");\n          }\n        } catch (error) {\n          addMessage("B\u0142\u0105d po\u0142\u0105czenia: " + error.message, "error");\n        }\n      }\n\n      // Funkcja dodawania wiadomo\u015Bci do chatu\n      function addMessage(text, type) {\n        const messageDiv = document.createElement("div");\n        messageDiv.className = `p-3 rounded-lg ${\n          type === "user"\n            ? "bg-cyan-500/20 ml-8"\n            : type === "agent"\n              ? "bg-purple-500/20 mr-8"\n              : "bg-red-500/20 text-red-300"\n        }`;\n\n        messageDiv.innerHTML = `\n        <div class="text-sm text-gray-400 mb-1">\n          ${type === "user" ? "Ty" : type === "agent" ? agent.name : "System"}\n        </div>\n        <div>${text}</div>\n      `;\n\n        chatContainer.appendChild(messageDiv);\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n\n      // Funkcje szybkich akcji\n      window.quickAction = async function (action) {\n        switch (action) {\n          case "status":\n            try {\n              const response = await fetch(`/api/agents/${agentId}/status`);\n              const data = await response.json();\n              addMessage(`Status: ${JSON.stringify(data, null, 2)}`, "agent");\n            } catch (error) {\n              addMessage("B\u0142\u0105d pobierania statusu", "error");\n            }\n            break;\n\n          case "image":\n            const prompt = prompt("Opisz obraz do wygenerowania:");\n            if (prompt) {\n              try {\n                const response = await fetch(`/api/agents/${agentId}/image`, {\n                  method: "POST",\n                  headers: { "Content-Type": "application/json" },\n                  body: JSON.stringify({ prompt, agentId }),\n                });\n                const data = await response.json();\n                if (data.success) {\n                  addMessage(\n                    `Obraz wygenerowany: <img src="${data.imageUrl}" class="mt-2 max-w-xs rounded">`,\n                    "agent"\n                  );\n                }\n              } catch (error) {\n                addMessage("B\u0142\u0105d generowania obrazu", "error");\n              }\n            }\n            break;\n\n          case "task":\n            const taskDesc = prompt("Opisz zadanie do wykonania:");\n            if (taskDesc) {\n              try {\n                const response = await fetch(`/api/agents/${agentId}/task`, {\n                  method: "POST",\n                  headers: { "Content-Type": "application/json" },\n                  body: JSON.stringify({ task: taskDesc, agentId }),\n                });\n                const data = await response.json();\n                if (data.success) {\n                  addMessage(`Zadanie wykonane: ${data.result}`, "agent");\n                }\n              } catch (error) {\n                addMessage("B\u0142\u0105d wykonywania zadania", "error");\n              }\n            }\n            break;\n        }\n      };\n\n      // Event listeners\n      sendButton.addEventListener("click", sendMessage);\n      messageInput.addEventListener("keypress", (e) => {\n        if (e.key === "Enter") sendMessage();\n      });\n\n      // Wiadomo\u015B\u0107 powitalna\n      setTimeout(() => {\n        addMessage(`Cze\u015B\u0107! Jestem ${agent.name}. Jak mog\u0119 Ci pom\xF3c?`, "agent");\n      }, 500);\n    })();<\/script> </main> '], [" ", '<main class="min-h-svh bg-black text-white"> <!-- Agent Header -->\n>>>>>>> Stashed changes\n<section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section> <!-- Capabilities Grid --> <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', " </div> </section> <!-- Chat Interface -->\nconst agent = agentConfig[agentId as keyof typeof agentConfig] || agentConfig.mybonzo;\n    ---\n", " <script>(function(){", '\n      const chatContainer = document.getElementById("chat-container");\n      const messageInput = document.getElementById("message-input");\n      const sendButton = document.getElementById("send-button");\n\n      // Funkcja wysy\u0142ania wiadomo\u015Bci\n      async function sendMessage() {\n        const message = messageInput.value.trim();\n        if (!message) return;\n\n        // Dodaj wiadomo\u015B\u0107 u\u017Cytkownika\n        addMessage(message, "user");\n        messageInput.value = "";\n\n        try {\n          // Wywo\u0142aj API agenta\n          const response = await fetch(\\`/api/agents/\\${agentId}/chat\\`, {\n            method: "POST",\n            headers: { "Content-Type": "application/json" },\n            body: JSON.stringify({ message, agentId }),\n          });\n\n          const data = await response.json();\n\n          if (data.success) {\n            addMessage(data.response, "agent");\n          } else {\n            addMessage("B\u0142\u0105d: " + data.error, "error");\n          }\n        } catch (error) {\n          addMessage("B\u0142\u0105d po\u0142\u0105czenia: " + error.message, "error");\n        }\n      }\n\n      // Funkcja dodawania wiadomo\u015Bci do chatu\n      function addMessage(text, type) {\n        const messageDiv = document.createElement("div");\n        messageDiv.className = \\`p-3 rounded-lg \\${\n          type === "user"\n            ? "bg-cyan-500/20 ml-8"\n            : type === "agent"\n              ? "bg-purple-500/20 mr-8"\n              : "bg-red-500/20 text-red-300"\n        }\\`;\n\n        messageDiv.innerHTML = \\`\n        <div class="text-sm text-gray-400 mb-1">\n          \\${type === "user" ? "Ty" : type === "agent" ? agent.name : "System"}\n        </div>\n        <div>\\${text}</div>\n      \\`;\n\n        chatContainer.appendChild(messageDiv);\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n\n      // Funkcje szybkich akcji\n      window.quickAction = async function (action) {\n        switch (action) {\n          case "status":\n            try {\n              const response = await fetch(\\`/api/agents/\\${agentId}/status\\`);\n              const data = await response.json();\n              addMessage(\\`Status: \\${JSON.stringify(data, null, 2)}\\`, "agent");\n            } catch (error) {\n              addMessage("B\u0142\u0105d pobierania statusu", "error");\n            }\n            break;\n\n          case "image":\n            const prompt = prompt("Opisz obraz do wygenerowania:");\n            if (prompt) {\n              try {\n                const response = await fetch(\\`/api/agents/\\${agentId}/image\\`, {\n                  method: "POST",\n                  headers: { "Content-Type": "application/json" },\n                  body: JSON.stringify({ prompt, agentId }),\n                });\n                const data = await response.json();\n                if (data.success) {\n                  addMessage(\n                    \\`Obraz wygenerowany: <img src="\\${data.imageUrl}" class="mt-2 max-w-xs rounded">\\`,\n                    "agent"\n                  );\n                }\n              } catch (error) {\n                addMessage("B\u0142\u0105d generowania obrazu", "error");\n              }\n            }\n            break;\n\n          case "task":\n            const taskDesc = prompt("Opisz zadanie do wykonania:");\n            if (taskDesc) {\n              try {\n                const response = await fetch(\\`/api/agents/\\${agentId}/task\\`, {\n                  method: "POST",\n                  headers: { "Content-Type": "application/json" },\n                  body: JSON.stringify({ task: taskDesc, agentId }),\n                });\n                const data = await response.json();\n                if (data.success) {\n                  addMessage(\\`Zadanie wykonane: \\${data.result}\\`, "agent");\n                }\n              } catch (error) {\n                addMessage("B\u0142\u0105d wykonywania zadania", "error");\n              }\n            }\n            break;\n        }\n      };\n\n      // Event listeners\n      sendButton.addEventListener("click", sendMessage);\n      messageInput.addEventListener("keypress", (e) => {\n        if (e.key === "Enter") sendMessage();\n      });\n\n      // Wiadomo\u015B\u0107 powitalna\n      setTimeout(() => {\n        addMessage(\\`Cze\u015B\u0107! Jestem \\${agent.name}. Jak mog\u0119 Ci pom\xF3c?\\`, "agent");\n      }, 500);\n    })();<\/script> </main> '])), maybeRenderHead(), addAttribute(`text-4xl font-bold bg-gradient-to-r ${agent.color} bg-clip-text text-transparent`, "class"), agent.name, agent.description, agentId, agent.capabilities.map((cap) => renderTemplate`<div class="border border-cyan-500/30 rounded-lg p-4 bg-gray-900/50"> <div class="text-center"> <div class="text-cyan-400 mb-2"> ${cap === "chat" && "\u{1F4AC}"} ${cap === "images" && "\u{1F5BC}\uFE0F"} ${cap === "tasks" && "\u26A1"} ${cap === "analysis" && "\u{1F50D}"} ${cap === "translation" && "\u{1F504}"} ${cap === "local-tasks" && "\u{1F3E0}"} ${cap === "polish-tasks" && "\u{1F1F5}\u{1F1F1}"} ${cap === "help" && "\u2753"} ${cap === "general-tasks" && "\u{1F4CB}"} </div> <div class="text-sm capitalize">${cap.replace("-", " ")}</div> </div> </div>`), renderComponent($$result2, "MyBonzoLayout", $$MyBonzoLayout, { "title": `${agent.name} | AI Agents` }, { "default": async ($$result3) => renderTemplate(_a || (_a = __template([' <main class="min-h-svh bg-black text-white"> <!-- Agent Header --> <section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section> <!-- Capabilities Grid --> <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', ' </div> </section> <!-- Chat Interface -->\n>>>>>>> Stashed changes\n<section class="max-w-6xl mx-auto p-6"> <div class="border border-cyan-500/30 rounded-lg bg-gray-900/30"> <div class="border-b border-cyan-500/30 p-4"> <h3 class="text-xl font-semibold text-cyan-400">\nChat Interface\n</h3> </div> <div class="p-6"> <div id="chat-container" class="space-y-4 mb-6 h-96 overflow-y-auto"> <div class="text-gray-400 text-center py-8">\nRozpocznij rozmow\u0119 z ', `...
</div> </div> <div class="flex gap-2"> <input type="text" id="message-input" placeholder="Wpisz wiadomo\u015B\u0107..." class="flex-1 bg-gray-800 border border-cyan-500/30 rounded px-4 py-2 text-white focus:border-cyan-400 focus:outline-none"> <button id="send-button" class="bg-gradient-to-r from-cyan-500 to-purple-600 text-white px-6 py-2 rounded hover:opacity-80 transition-opacity">
Wy\u015Blij
</button> </div> </div> </div> </section> <!-- Quick Actions --> <section class="max-w-6xl mx-auto p-6"> <h3 class="text-xl font-semibold mb-4 text-cyan-400">
Szybkie Akcje
</h3> <div class="grid grid-cols-1 md:grid-cols-3 gap-4"> <button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('status')"> <div class="text-lg font-semibold">\u{1F4CA} Status</div> <div class="text-sm text-gray-400">Sprawd\u017A status agenta</div> </button> `, " ", " </div> </section> </main> <script>(function(){", '\n        const chatContainer = document.getElementById("chat-container");\n        const messageInput = document.getElementById(\n          "message-input"\n        ) as HTMLInputElement;\n        const sendButton = document.getElementById("send-button");\n\n        // Funkcja wysy\u0142ania wiadomo\u015Bci\n        async function sendMessage() {\n          const message = messageInput.value.trim();\n          if (!message) return;\n\n          // Dodaj wiadomo\u015B\u0107 u\u017Cytkownika\n          addMessage(message, "user");\n          messageInput.value = "";\n\n          try {\n            // Wywo\u0142aj API agenta\n            const response = await fetch(`/api/agents/${agentId}/chat`, {\n              method: "POST",\n              headers: { "Content-Type": "application/json" },\n              body: JSON.stringify({ message, agentId }),\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n              addMessage(data.response, "agent");\n            } else {\n              addMessage("B\u0142\u0105d: " + data.error, "error");\n            }\n          } catch (error: any) {\n            addMessage("B\u0142\u0105d po\u0142\u0105czenia: " + error.message, "error");\n          }\n        }\n\n        // Funkcja dodawania wiadomo\u015Bci do chatu\n        function addMessage(text: string, type: "user" | "agent" | "error") {\n          const messageDiv = document.createElement("div");\n          messageDiv.className = `p-3 rounded-lg ${\n            type === "user"\n              ? "bg-cyan-500/20 ml-8"\n              : type === "agent"\n                ? "bg-purple-500/20 mr-8"\n                : "bg-red-500/20 text-red-300"\n          }`;\n\n          messageDiv.innerHTML = `\n        <div class="text-sm text-gray-400 mb-1">\n          ${type === "user" ? "Ty" : type === "agent" ? agent.name : "System"}\n        </div>\n        <div>${text}</div>\n      `;\n\n          if (chatContainer) {\n            chatContainer.appendChild(messageDiv);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n          }\n        }\n\n        // Funkcje szybkich akcji\n        (window as any).quickAction = async function (\n          action: "status" | "image" | "task"\n        ) {\n          switch (action) {\n            case "status":\n              try {\n                const response = await fetch(`/api/agents/${agentId}/status`);\n                const data = await response.json();\n                addMessage(`Status: ${JSON.stringify(data, null, 2)}`, "agent");\n              } catch (error) {\n                addMessage("B\u0142\u0105d pobierania statusu", "error");\n              }\n              break;\n\n            case "image":\n              const prompt = window.prompt("Opisz obraz do wygenerowania:");\n              if (prompt) {\n                try {\n                  const response = await fetch(`/api/agents/${agentId}/image`, {\n                    method: "POST",\n                    headers: { "Content-Type": "application/json" },\n                    body: JSON.stringify({ prompt, agentId }),\n                  });\n                  const data = await response.json();\n                  if (data.success) {\n                    addMessage(\n                      `Obraz wygenerowany: <img src="${data.imageUrl}" class="mt-2 max-w-xs rounded">`,\n                      "agent"\n                    );\n                  }\n                } catch (error) {\n                  addMessage("B\u0142\u0105d generowania obrazu", "error");\n                }\n              }\n              break;\n\n            case "task":\n              const taskDesc = window.prompt("Opisz zadanie do wykonania:");\n              if (taskDesc) {\n                try {\n                  const response = await fetch(`/api/agents/${agentId}/task`, {\n                    method: "POST",\n                    headers: { "Content-Type": "application/json" },\n                    body: JSON.stringify({ task: taskDesc, agentId }),\n                  });\n                  const data = await response.json();\n                  if (data.success) {\n                    addMessage(`Zadanie wykonane: ${data.result}`, "agent");\n                  }\n                } catch (error) {\n                  addMessage("B\u0142\u0105d wykonywania zadania", "error");\n                }\n              }\n              break;\n          }\n        };\n\n        // Event listeners\n        if (sendButton) sendButton.addEventListener("click", sendMessage);\n        if (messageInput)\n          messageInput.addEventListener("keypress", (e) => {\n            if (e.key === "Enter") sendMessage();\n          });\n\n        // Wiadomo\u015B\u0107 powitalna\n        setTimeout(() => {\n          addMessage(\n            `Cze\u015B\u0107! Jestem ${agent.name}. Jak mog\u0119 Ci pom\xF3c?`,\n            "agent"\n          );\n        }, 500);\n      })();<\/script> <section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section>  <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', ' </div> </section>  <section class="max-w-6xl mx-auto p-6"> <div class="border border-cyan-500/30 rounded-lg bg-gray-900/30"> <div class="border-b border-cyan-500/30 p-4"> <h3 class="text-xl font-semibold text-cyan-400">Chat Interface</h3> </div> <div class="p-6"> <div id="chat-container" class="space-y-4 mb-6 h-96 overflow-y-auto"> <div class="text-gray-400 text-center py-8">\nRozpocznij rozmow\u0119 z ', `...
</div> </div> <div class="flex gap-2"> <input type="text" id="message-input" placeholder="Wpisz wiadomo\u015B\u0107..." class="flex-1 bg-gray-800 border border-cyan-500/30 rounded px-4 py-2 text-white focus:border-cyan-400 focus:outline-none"> <button id="send-button" class="bg-gradient-to-r from-cyan-500 to-purple-600 text-white px-6 py-2 rounded hover:opacity-80 transition-opacity">
Wy\u015Blij
</button> </div> </div> </div> </section>  <section class="max-w-6xl mx-auto p-6"> <h3 class="text-xl font-semibold mb-4 text-cyan-400">Szybkie Akcje</h3> <div class="grid grid-cols-1 md:grid-cols-3 gap-4"> <button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('status')"> <div class="text-lg font-semibold">\u{1F4CA} Status</div> <div class="text-sm text-gray-400">Sprawd\u017A status agenta</div> </button> `, " ", " </div> </section> "], [' <main class="min-h-svh bg-black text-white"> <!-- Agent Header --> <section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section> <!-- Capabilities Grid --> <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', ' </div> </section> <!-- Chat Interface -->\n>>>>>>> Stashed changes\n<section class="max-w-6xl mx-auto p-6"> <div class="border border-cyan-500/30 rounded-lg bg-gray-900/30"> <div class="border-b border-cyan-500/30 p-4"> <h3 class="text-xl font-semibold text-cyan-400">\nChat Interface\n</h3> </div> <div class="p-6"> <div id="chat-container" class="space-y-4 mb-6 h-96 overflow-y-auto"> <div class="text-gray-400 text-center py-8">\nRozpocznij rozmow\u0119 z ', `...
</div> </div> <div class="flex gap-2"> <input type="text" id="message-input" placeholder="Wpisz wiadomo\u015B\u0107..." class="flex-1 bg-gray-800 border border-cyan-500/30 rounded px-4 py-2 text-white focus:border-cyan-400 focus:outline-none"> <button id="send-button" class="bg-gradient-to-r from-cyan-500 to-purple-600 text-white px-6 py-2 rounded hover:opacity-80 transition-opacity">
Wy\u015Blij
</button> </div> </div> </div> </section> <!-- Quick Actions --> <section class="max-w-6xl mx-auto p-6"> <h3 class="text-xl font-semibold mb-4 text-cyan-400">
Szybkie Akcje
</h3> <div class="grid grid-cols-1 md:grid-cols-3 gap-4"> <button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('status')"> <div class="text-lg font-semibold">\u{1F4CA} Status</div> <div class="text-sm text-gray-400">Sprawd\u017A status agenta</div> </button> `, " ", " </div> </section> </main> <script>(function(){", '\n        const chatContainer = document.getElementById("chat-container");\n        const messageInput = document.getElementById(\n          "message-input"\n        ) as HTMLInputElement;\n        const sendButton = document.getElementById("send-button");\n\n        // Funkcja wysy\u0142ania wiadomo\u015Bci\n        async function sendMessage() {\n          const message = messageInput.value.trim();\n          if (!message) return;\n\n          // Dodaj wiadomo\u015B\u0107 u\u017Cytkownika\n          addMessage(message, "user");\n          messageInput.value = "";\n\n          try {\n            // Wywo\u0142aj API agenta\n            const response = await fetch(\\`/api/agents/\\${agentId}/chat\\`, {\n              method: "POST",\n              headers: { "Content-Type": "application/json" },\n              body: JSON.stringify({ message, agentId }),\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n              addMessage(data.response, "agent");\n            } else {\n              addMessage("B\u0142\u0105d: " + data.error, "error");\n            }\n          } catch (error: any) {\n            addMessage("B\u0142\u0105d po\u0142\u0105czenia: " + error.message, "error");\n          }\n        }\n\n        // Funkcja dodawania wiadomo\u015Bci do chatu\n        function addMessage(text: string, type: "user" | "agent" | "error") {\n          const messageDiv = document.createElement("div");\n          messageDiv.className = \\`p-3 rounded-lg \\${\n            type === "user"\n              ? "bg-cyan-500/20 ml-8"\n              : type === "agent"\n                ? "bg-purple-500/20 mr-8"\n                : "bg-red-500/20 text-red-300"\n          }\\`;\n\n          messageDiv.innerHTML = \\`\n        <div class="text-sm text-gray-400 mb-1">\n          \\${type === "user" ? "Ty" : type === "agent" ? agent.name : "System"}\n        </div>\n        <div>\\${text}</div>\n      \\`;\n\n          if (chatContainer) {\n            chatContainer.appendChild(messageDiv);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n          }\n        }\n\n        // Funkcje szybkich akcji\n        (window as any).quickAction = async function (\n          action: "status" | "image" | "task"\n        ) {\n          switch (action) {\n            case "status":\n              try {\n                const response = await fetch(\\`/api/agents/\\${agentId}/status\\`);\n                const data = await response.json();\n                addMessage(\\`Status: \\${JSON.stringify(data, null, 2)}\\`, "agent");\n              } catch (error) {\n                addMessage("B\u0142\u0105d pobierania statusu", "error");\n              }\n              break;\n\n            case "image":\n              const prompt = window.prompt("Opisz obraz do wygenerowania:");\n              if (prompt) {\n                try {\n                  const response = await fetch(\\`/api/agents/\\${agentId}/image\\`, {\n                    method: "POST",\n                    headers: { "Content-Type": "application/json" },\n                    body: JSON.stringify({ prompt, agentId }),\n                  });\n                  const data = await response.json();\n                  if (data.success) {\n                    addMessage(\n                      \\`Obraz wygenerowany: <img src="\\${data.imageUrl}" class="mt-2 max-w-xs rounded">\\`,\n                      "agent"\n                    );\n                  }\n                } catch (error) {\n                  addMessage("B\u0142\u0105d generowania obrazu", "error");\n                }\n              }\n              break;\n\n            case "task":\n              const taskDesc = window.prompt("Opisz zadanie do wykonania:");\n              if (taskDesc) {\n                try {\n                  const response = await fetch(\\`/api/agents/\\${agentId}/task\\`, {\n                    method: "POST",\n                    headers: { "Content-Type": "application/json" },\n                    body: JSON.stringify({ task: taskDesc, agentId }),\n                  });\n                  const data = await response.json();\n                  if (data.success) {\n                    addMessage(\\`Zadanie wykonane: \\${data.result}\\`, "agent");\n                  }\n                } catch (error) {\n                  addMessage("B\u0142\u0105d wykonywania zadania", "error");\n                }\n              }\n              break;\n          }\n        };\n\n        // Event listeners\n        if (sendButton) sendButton.addEventListener("click", sendMessage);\n        if (messageInput)\n          messageInput.addEventListener("keypress", (e) => {\n            if (e.key === "Enter") sendMessage();\n          });\n\n        // Wiadomo\u015B\u0107 powitalna\n        setTimeout(() => {\n          addMessage(\n            \\`Cze\u015B\u0107! Jestem \\${agent.name}. Jak mog\u0119 Ci pom\xF3c?\\`,\n            "agent"\n          );\n        }, 500);\n      })();<\/script> <section class="border-b border-cyan-500/30"> <div class="max-w-6xl mx-auto p-6"> <div class="flex items-center justify-between"> <div> <h1', "> ", ' </h1> <p class="text-gray-300 mt-2">', '</p> </div> <div class="text-right"> <div class="text-sm text-cyan-400">Agent ID</div> <div class="font-mono text-lg">', '</div> </div> </div> </div> </section>  <section class="max-w-6xl mx-auto p-6"> <h2 class="text-2xl font-semibold mb-6 text-cyan-400">Mo\u017Cliwo\u015Bci</h2> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"> ', ' </div> </section>  <section class="max-w-6xl mx-auto p-6"> <div class="border border-cyan-500/30 rounded-lg bg-gray-900/30"> <div class="border-b border-cyan-500/30 p-4"> <h3 class="text-xl font-semibold text-cyan-400">Chat Interface</h3> </div> <div class="p-6"> <div id="chat-container" class="space-y-4 mb-6 h-96 overflow-y-auto"> <div class="text-gray-400 text-center py-8">\nRozpocznij rozmow\u0119 z ', `...
</div> </div> <div class="flex gap-2"> <input type="text" id="message-input" placeholder="Wpisz wiadomo\u015B\u0107..." class="flex-1 bg-gray-800 border border-cyan-500/30 rounded px-4 py-2 text-white focus:border-cyan-400 focus:outline-none"> <button id="send-button" class="bg-gradient-to-r from-cyan-500 to-purple-600 text-white px-6 py-2 rounded hover:opacity-80 transition-opacity">
Wy\u015Blij
</button> </div> </div> </div> </section>  <section class="max-w-6xl mx-auto p-6"> <h3 class="text-xl font-semibold mb-4 text-cyan-400">Szybkie Akcje</h3> <div class="grid grid-cols-1 md:grid-cols-3 gap-4"> <button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('status')"> <div class="text-lg font-semibold">\u{1F4CA} Status</div> <div class="text-sm text-gray-400">Sprawd\u017A status agenta</div> </button> `, " ", " </div> </section> "])), addAttribute(`text-4xl font-bold bg-gradient-to-r ${agent.color} bg-clip-text text-transparent`, "class"), agent.name, agent.description, agentId, agent.capabilities.map((cap) => renderTemplate`<div class="border border-cyan-500/30 rounded-lg p-4 bg-gray-900/50"> <div class="text-center"> <div class="text-cyan-400 mb-2"> ${cap === "chat" && "\u{1F4AC}"} ${cap === "images" && "\u{1F5BC}\uFE0F"} ${cap === "tasks" && "\u26A1"} ${cap === "analysis" && "\u{1F50D}"} ${cap === "translation" && "\u{1F504}"} ${cap === "local-tasks" && "\u{1F3E0}"} ${cap === "polish-tasks" && "\u{1F1F5}\u{1F1F1}"} ${cap === "help" && "\u2753"} ${cap === "general-tasks" && "\u{1F4CB}"} </div> <div class="text-sm capitalize"> ${cap.replace("-", " ")} </div> </div> </div>`), agent.name, agent.capabilities.includes("images") && renderTemplate`<button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('image')"> <div class="text-lg font-semibold">🖼️ Generuj Obraz</div> <div class="text-sm text-gray-400">Stwórz obraz AI</div> </button>`, agent.capabilities.includes("tasks") && renderTemplate`<button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('task')"> <div class="text-lg font-semibold">⚡ Wykonaj Zadanie</div> <div class="text-sm text-gray-400">Zlec zadanie agentowi</div> </button>`, defineScriptVars({ agentId, agent }), addAttribute(`text-4xl font-bold bg-gradient-to-r ${agent.color} bg-clip-text text-transparent`, "class"), agent.name, agent.description, agentId, agent.capabilities.map((cap) => renderTemplate`<div class="border border-cyan-500/30 rounded-lg p-4 bg-gray-900/50"> <div class="text-center"> <div class="text-cyan-400 mb-2"> ${cap === "chat" && "\u{1F4AC}"} ${cap === "images" && "\u{1F5BC}\uFE0F"} ${cap === "tasks" && "\u26A1"} ${cap === "analysis" && "\u{1F50D}"} ${cap === "translation" && "\u{1F504}"} ${cap === "local-tasks" && "\u{1F3E0}"} ${cap === "polish-tasks" && "\u{1F1F5}\u{1F1F1}"} ${cap === "help" && "\u2753"} ${cap === "general-tasks" && "\u{1F4CB}"} </div> <div class="text-sm capitalize">${cap.replace("-", " ")}</div> </div> </div>`), agent.name, agent.capabilities.includes("images") && renderTemplate`<button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('image')"> <div class="text-lg font-semibold">🖼️ Generuj Obraz</div> <div class="text-sm text-gray-400">Stwórz obraz AI</div> </button>`, agent.capabilities.includes("tasks") && renderTemplate`<button class="border border-cyan-500/30 rounded-lg p-4 hover:bg-cyan-500/10 transition-colors text-left" onclick="quickAction('task')"> <div class="text-lg font-semibold">⚡ Wykonaj Zadanie</div> <div class="text-sm text-gray-400">Zlec zadanie agentowi</div> </button>`) }), defineScriptVars({ agentId, agent })) })}`;
}, "Q:/mybonzo/luc-de-zen-on/src/pages/agents/[agentId].astro", void 0);

const $$file = "Q:/mybonzo/luc-de-zen-on/src/pages/agents/[agentId].astro";
const $$url = "/agents/[agentId]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$agentId,
  file: $$file,
  getStaticPaths,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
