---
import Layout from "../layouts/Layout.astro";
---

<Layout title="AI IMAGE GENERATOR - LUC de ZEN ON">
  <div class="header">
    <h1 class="page-title">üé® AI IMAGE GENERATOR</h1>
  </div>

  <div class="generator-container">
    <!-- OKNO 1: USTAWIENIA -->
    <div class="settings-panel">
      <h3>‚öôÔ∏è Ustawienia</h3>
      
      <div class="setting-group">
        <label>Model:</label>
        <select id="modelSelect">
          <option value="stable-diffusion-xl">SDXL 1.0</option>
          <option value="stable-diffusion-v1-5">SD 1.5</option>
          <option value="stable-diffusion-v2-1">SD 2.1</option>
        </select>
      </div>
      
      <div class="setting-group">
        <label>Rozmiar:</label>
        <select id="sizeSelect">
          <option value="512x512">512 x 512</option>
          <option value="768x768">768 x 768</option>
          <option value="1024x1024">1024 x 1024</option>
        </select>
      </div>
      
      <div class="setting-group">
        <label>Steps: <span id="stepsValue">20</span></label>
        <input type="range" id="stepsSlider" min="10" max="50" value="20" class="slider">
      </div>
      
      <div class="setting-group">
        <label>CFG Scale: <span id="cfgValue">7.5</span></label>
        <input type="range" id="cfgSlider" min="1" max="20" value="7.5" step="0.5" class="slider">
      </div>
      
      <!-- Photo2Photo sekcja -->
      <div class="photo2photo-section">
        <h4>üì∑ Photo2Photo</h4>
        <div class="photo2photo-inputs">
          <div class="photo-input">
            <label>≈πr√≥d≈Çowy obraz:</label>
            <div class="photo-upload" id="sourceUpload">
              <div class="upload-placeholder">
                <span>üìÅ</span>
                <p>PrzeciƒÖgnij lub kliknij</p>
              </div>
            </div>
          </div>
          
          <div class="photo-input">
            <label>Maska (opcjonalnie):</label>
            <div class="photo-upload" id="maskUpload">
              <div class="upload-placeholder">
                <span>üé≠</span>
                <p>PrzeciƒÖgnij lub kliknij</p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="setting-group">
          <label>Strength: <span id="strengthValue">0.75</span></label>
          <input type="range" id="strengthSlider" min="0.1" max="1.0" value="0.75" step="0.05" class="slider">
        </div>
      </div>
    </div>

    <!-- OKNO 2: PROMPT GENERATOR Z T≈ÅUMACZEM -->
    <div class="prompt-panel">
      <h3>üìù Prompt Generator</h3>
      
      <div class="prompt-section">
        <label>Opis obrazu (po polsku):</label>
        <textarea 
          id="polishPrompt" 
          placeholder="Napisz po polsku co chcesz wygenerowaƒá... np. 'piƒôkna kobieta w czerwonej sukni'"
          rows="4"
        ></textarea>
        
        <button id="translateBtn" class="translate-btn">üîÑ Przet≈Çumacz na angielski</button>
        
        <label>Prompt (po angielsku):</label>
        <textarea 
          id="englishPrompt" 
          placeholder="Tutaj pojawi siƒô przet≈Çumaczony prompt..."
          rows="4"
        ></textarea>
        
        <label>Negatywny prompt (opcjonalnie):</label>
        <textarea 
          id="negativePrompt" 
          placeholder="ugly, bad quality, blurry, low resolution"
          rows="2"
        ></textarea>
      </div>
    </div>

    <!-- OKNO 3: GENEROWANIE -->
    <div class="generation-panel">
      <h3>üöÄ Generowanie</h3>
      
      <div class="generate-section">
        <button id="generateBtn" class="generate-btn">
          <span class="btn-icon">üé®</span>
          Generuj Obraz
        </button>
        
        <div id="statusText" class="status-text">Gotowy do generowania</div>
        
        <div id="progressBar" class="progress-bar" style="display: none;">
          <div class="progress-fill"></div>
          <span class="progress-text">0%</span>
        </div>
        
        <div class="image-preview" id="imagePreview">
          <div class="placeholder">
            <div class="placeholder-icon">üñºÔ∏è</div>
            <p>Wygenerowany obraz pojawi siƒô tutaj</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      setupEventListeners();
    });

    function setupEventListeners() {
      // Settings sliders
      const stepsSlider = document.getElementById('stepsSlider');
      const cfgSlider = document.getElementById('cfgSlider');
      const strengthSlider = document.getElementById('strengthSlider');
      
      stepsSlider?.addEventListener('input', (e) => {
        document.getElementById('stepsValue').textContent = e.target.value;
      });
      
      cfgSlider?.addEventListener('input', (e) => {
        document.getElementById('cfgValue').textContent = e.target.value;
      });
      
      strengthSlider?.addEventListener('input', (e) => {
        document.getElementById('strengthValue').textContent = e.target.value;
      });

      // Translate button
      document.getElementById('translateBtn')?.addEventListener('click', translateToEnglish);

      // Generate button
      document.getElementById('generateBtn')?.addEventListener('click', generateImage);
    }

    // Prosty t≈Çumacz (mo≈ºna p√≥≈∫niej pod≈ÇƒÖczyƒá Google Translate API)
    function translateToEnglish() {
      const polishText = document.getElementById('polishPrompt').value.trim();
      const englishPrompt = document.getElementById('englishPrompt');
      const statusText = document.getElementById('statusText');
      
      if (!polishText) {
        alert('Wprowad≈∫ opis po polsku!');
        return;
      }

      statusText.textContent = 'T≈Çumaczƒô...';
      
      // Symulacja t≈Çumaczenia (p√≥≈∫niej zastƒÖpiƒá prawdziwym API)
      setTimeout(() => {
        const translated = translateBasic(polishText);
        englishPrompt.value = translated;
        statusText.textContent = 'Przet≈Çumaczono!';
        
        setTimeout(() => {
          statusText.textContent = 'Gotowy do generowania';
        }, 2000);
      }, 1000);
    }

    // Podstawowy t≈Çumacz (zamiast API)
    function translateBasic(text) {
      const translations = {
        // Podstawowe s≈Ç√≥wka
        'kobieta': 'woman',
        'mƒô≈ºczyzna': 'man', 
        'cz≈Çowiek': 'person',
        'dziecko': 'child',
        'dziewczyna': 'girl',
        'ch≈Çopiec': 'boy',
        'piƒôkna': 'beautiful',
        'piƒôkny': 'handsome',
        '≈Çadna': 'pretty',
        'm≈Çoda': 'young',
        'stara': 'old',
        'wysoka': 'tall',
        'niska': 'short',
        'szczup≈Ça': 'slim',
        'gruba': 'fat',
        
        // Kolory
        'czerwony': 'red',
        'czerwona': 'red',
        'niebieski': 'blue',
        'niebieska': 'blue',
        'zielony': 'green',
        'zielona': 'green',
        '≈º√≥≈Çty': 'yellow',
        '≈º√≥≈Çta': 'yellow',
        'czarny': 'black',
        'czarna': 'black',
        'bia≈Çy': 'white',
        'bia≈Ça': 'white',
        'r√≥≈ºowy': 'pink',
        'r√≥≈ºowa': 'pink',
        'fioletowy': 'purple',
        'fioletowa': 'purple',
        
        // Ubrania
        'suknia': 'dress',
        'sukienka': 'dress',
        'spodnie': 'pants',
        'koszula': 'shirt',
        'bluzka': 'blouse',
        'marynarka': 'jacket',
        'p≈Çaszcz': 'coat',
        'buty': 'shoes',
        'kapelusz': 'hat',
        
        // Miejsca
        'las': 'forest',
        'g√≥ry': 'mountains',
        'morze': 'sea',
        'pla≈ºa': 'beach',
        'miasto': 'city',
        'dom': 'house',
        'ogr√≥d': 'garden',
        'park': 'park',
        
        // Style
        'portret': 'portrait',
        'realistyczny': 'realistic',
        'fotorealistyczny': 'photorealistic',
        'artystyczny': 'artistic',
        'malarski': 'painting style',
        'cyfrowy': 'digital art'
      };
      
      let result = text.toLowerCase();
      
      // ZastƒÖp polskie s≈Çowa angielskimi
      for (const [polish, english] of Object.entries(translations)) {
        const regex = new RegExp(`\\b${polish}\\b`, 'gi');
        result = result.replace(regex, english);
      }
      
      return result;
    }

    async function generateImage() {
      const generateBtn = document.getElementById('generateBtn');
      const progressBar = document.getElementById('progressBar');
      const statusText = document.getElementById('statusText');
      const imagePreview = document.getElementById('imagePreview');
      const englishPrompt = document.getElementById('englishPrompt');
      
      if (!englishPrompt.value.trim()) {
        alert('Wprowad≈∫ i przet≈Çumacz prompt!');
        return;
      }

      // Start generation
      generateBtn.disabled = true;
      generateBtn.innerHTML = '<span class="btn-icon">‚è≥</span> Generujƒô...';
      progressBar.style.display = 'block';
      statusText.textContent = 'Generowanie obrazu...';
      
      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 100) progress = 100;
        
        const fill = progressBar.querySelector('.progress-fill');
        const text = progressBar.querySelector('.progress-text');
        
        fill.style.width = progress + '%';
        text.textContent = Math.round(progress) + '%';
        
        if (progress >= 100) {
          clearInterval(progressInterval);
          completeGeneration();
        }
      }, 500);
    }

    function completeGeneration() {
      const generateBtn = document.getElementById('generateBtn');
      const progressBar = document.getElementById('progressBar');
      const statusText = document.getElementById('statusText');
      const imagePreview = document.getElementById('imagePreview');
      
      // Reset UI
      generateBtn.disabled = false;
      generateBtn.innerHTML = '<span class="btn-icon">üé®</span> Generuj Obraz';
      progressBar.style.display = 'none';
      statusText.textContent = 'Obraz wygenerowany!';
      
      // Show success
      imagePreview.innerHTML = `
        <div class="success-result">
          <div class="success-icon">‚úÖ</div>
          <p><strong>Sukces!</strong></p>
          <p>Obraz zosta≈Çby wygenerowany</p>
          <div class="result-info">
            <span>Model: ${document.getElementById('modelSelect').value}</span>
            <span>Rozmiar: ${document.getElementById('sizeSelect').value}</span>
            <span>Steps: ${document.getElementById('stepsValue').textContent}</span>
          </div>
          <button onclick="resetGenerator()" class="reset-btn">üîÑ Nowy obraz</button>
        </div>
      `;
    }

    function resetGenerator() {
      const imagePreview = document.getElementById('imagePreview');
      const statusText = document.getElementById('statusText');
      
      imagePreview.innerHTML = `
        <div class="placeholder">
          <div class="placeholder-icon">üñºÔ∏è</div>
          <p>Wygenerowany obraz pojawi siƒô tutaj</p>
        </div>
      `;
      
      statusText.textContent = 'Gotowy do generowania';
    }
  </script>
</Layout>

<style>
  .header {
    text-align: center;
    margin-bottom: 30px;
  }

  .page-title {
    color: #ffffff;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0;
  }

  .generator-container {
    display: grid;
    grid-template-columns: 300px 1fr 400px;
    gap: 20px;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* OKNO 1: USTAWIENIA */
  .settings-panel {
    background: rgba(20, 20, 20, 0.85);
    border: 1px solid #333;
    border-radius: 12px;
    padding: 20px;
    height: fit-content;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .settings-panel h3 {
    color: #ffffff;
    margin: 0 0 20px 0;
    font-size: 1.2rem;
  }

  .setting-group {
    margin-bottom: 20px;
  }

  .setting-group label {
    display: block;
    color: #cccccc;
    font-size: 0.9rem;
    margin-bottom: 8px;
    font-weight: 500;
  }

  .setting-group select {
    width: 100%;
    background: #111;
    border: 1px solid #444;
    border-radius: 6px;
    padding: 10px;
    color: #ffffff;
    font-size: 0.9rem;
  }

  .slider {
    width: 100%;
    background: #333;
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    border-radius: 3px;
    outline: none;
  }

  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #8b5cf6;
    cursor: pointer;
  }

  .slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #8b5cf6;
    cursor: pointer;
    border: none;
  }

  /* Photo2Photo Section */
  .photo2photo-section {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #444;
  }

  .photo2photo-section h4 {
    color: #ffffff;
    margin: 0 0 15px 0;
    font-size: 1rem;
  }

  .photo2photo-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
    margin-bottom: 15px;
  }

  .photo-input label {
    display: block;
    color: #cccccc;
    font-size: 0.8rem;
    margin-bottom: 6px;
    font-weight: 500;
  }

  .photo-upload {
    background: rgba(0, 0, 0, 0.3);
    border: 2px dashed #444;
    border-radius: 8px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .photo-upload:hover {
    border-color: #8b5cf6;
    background: rgba(139, 92, 246, 0.1);
  }

  .upload-placeholder {
    text-align: center;
    color: #666;
  }

  .upload-placeholder span {
    font-size: 1.5rem;
    display: block;
    margin-bottom: 4px;
  }

  .upload-placeholder p {
    font-size: 0.7rem;
    margin: 0;
  }

  /* OKNO 2: PROMPT GENERATOR */
  .prompt-panel {
    background: rgba(20, 20, 20, 0.85);
    border: 1px solid #333;
    border-radius: 12px;
    padding: 20px;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .prompt-panel h3 {
    color: #ffffff;
    margin: 0 0 20px 0;
    font-size: 1.2rem;
  }

  .prompt-section label {
    display: block;
    color: #cccccc;
    font-size: 0.9rem;
    margin: 15px 0 8px 0;
    font-weight: 500;
  }

  .prompt-section textarea {
    width: 100%;
    background: #111;
    border: 1px solid #444;
    border-radius: 6px;
    padding: 12px;
    color: #ffffff;
    font-size: 0.9rem;
    font-family: inherit;
    resize: vertical;
    min-height: 60px;
  }

  .prompt-section textarea::placeholder {
    color: #666;
  }

  .translate-btn {
    width: 100%;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: #ffffff;
    border: none;
    padding: 12px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    margin: 15px 0;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .translate-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  /* OKNO 3: GENEROWANIE */
  .generation-panel {
    background: rgba(20, 20, 20, 0.85);
    border: 1px solid #333;
    border-radius: 12px;
    padding: 20px;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .generation-panel h3 {
    color: #ffffff;
    margin: 0 0 20px 0;
    font-size: 1.2rem;
  }

  .generate-btn {
    width: 100%;
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    color: #ffffff;
    border: none;
    padding: 15px;
    border-radius: 10px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    margin-bottom: 15px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .generate-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
  }

  .generate-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .status-text {
    color: #cccccc;
    font-size: 0.9rem;
    text-align: center;
    margin-bottom: 15px;
  }

  .progress-bar {
    background: #333;
    border-radius: 10px;
    padding: 8px;
    margin-bottom: 20px;
    position: relative;
  }

  .progress-fill {
    height: 8px;
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #ffffff;
    font-size: 0.8rem;
    font-weight: bold;
  }

  .image-preview {
    background: #111;
    border: 2px dashed #444;
    border-radius: 10px;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .placeholder {
    text-align: center;
    color: #666;
  }

  .placeholder-icon {
    font-size: 3rem;
    margin-bottom: 10px;
  }

  .success-result {
    text-align: center;
    color: #ffffff;
    padding: 20px;
  }

  .success-icon {
    font-size: 3rem;
    margin-bottom: 15px;
  }

  .result-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
    margin: 15px 0;
    font-size: 0.8rem;
    color: #999;
  }

  .reset-btn {
    background: #333;
    color: #ffffff;
    border: 1px solid #555;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }

  .reset-btn:hover {
    background: #444;
    border-color: #666;
  }

  /* RESPONSIVE */
  @media (max-width: 1200px) {
    .generator-container {
      grid-template-columns: 1fr;
      gap: 15px;
      max-width: 800px;
    }
    
    .settings-panel {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
  }
</style>
