---
import type { HTMLAttributes } from "astro/types";
import MyBonzoLayout from '../layouts/MyBonzoLayout.astro';

interface Props extends HTMLAttributes<"div"> {
  title?: string;
  description?: string;
}

const { 
  title = "LangChain Integration | AI Workers",
  description = "Zaawansowana integracja z LangChain Framework - chains, agents, tools i memory management",
  ...attrs 
} = Astro.props;

// Metadata for SEO
const metadata = {
  title,
  description,
  canonical: new URL(Astro.url.pathname, Astro.site),
  type: "website",
  features: [
    "LangChain Framework Integration",
    "Chain Composition Tools", 
    "Agent-based Processing",
    "Memory Management",
    "Tool Integration Hub",
    "Custom Workflow Builder"
  ]
};
---

<MyBonzoLayout title={metadata.title} description={metadata.description}>
  <main class="min-h-svh bg-gradient-to-br from-gray-900 via-gray-800 to-blue-900">
    <!-- Header Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between max-h-72 min-h-64">
          <div class="mt-auto">
            <span
              style="writing-mode: vertical-lr;"
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              LANGCHAIN
            </span>
          </div>
          <span class="mt-auto">
            <span
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              INTEGRATION
            </span>
          </span>
        </div>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between items-center p-4">
          <div class="flex gap-4">
            <a href="/" class="text-edge hover:text-primary transition-colors">
              ‚Üê G≈Å√ìWNA
            </a>
            <a href="/hub/functions" class="text-edge hover:text-primary transition-colors">
              HUB FUNKCJI
            </a>
          </div>
          <div class="text-sm text-edge">
            üîó LangChain Framework Integration
          </div>
        </div>
      </div>
    </section>

    <!-- LangChain Interface -->
    <section class="max-w-6xl mx-auto p-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-white mb-4">
          üîó LangChain AI Framework
        </h1>
        <p class="text-lg text-gray-300 max-w-3xl mx-auto">
          Zaawansowany framework do tworzenia aplikacji opartych na du≈ºych modelach jƒôzykowych. 
          ≈ÅƒÖczy w ≈Ça≈Ñcuchy r√≥≈ºne komponenty AI dla z≈Ço≈ºonych zada≈Ñ.
        </p>
      </div>

      <!-- Chain Types Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
        <div class="chain-type-card" data-chain="conversation">
          <div class="chain-icon">üí¨</div>
          <h3 class="chain-title">Conversation Chain</h3>
          <p class="chain-description">Prowadzenie naturalnych rozm√≥w z kontekstem</p>
        </div>
        
        <div class="chain-type-card" data-chain="summarization">
          <div class="chain-icon">üìÑ</div>
          <h3 class="chain-title">Summarization Chain</h3>
          <p class="chain-description">Inteligentne podsumowywanie d≈Çugich tekst√≥w</p>
        </div>
        
        <div class="chain-type-card" data-chain="qa">
          <div class="chain-icon">‚ùì</div>
          <h3 class="chain-title">Q&A Chain</h3>
          <p class="chain-description">System pyta≈Ñ i odpowiedzi</p>
        </div>
        
        <div class="chain-type-card" data-chain="code_analysis">
          <div class="chain-icon">üíª</div>
          <h3 class="chain-title">Code Analysis Chain</h3>
          <p class="chain-description">Analiza i review kodu</p>
        </div>
        
        <div class="chain-type-card" data-chain="document_qa">
          <div class="chain-icon">üìö</div>
          <h3 class="chain-title">Document Q&A Chain</h3>
          <p class="chain-description">Pytania na podstawie dokument√≥w</p>
        </div>
        
        <div class="chain-type-card" data-chain="custom">
          <div class="chain-icon">‚öôÔ∏è</div>
          <h3 class="chain-title">Custom Chain</h3>
      </div>

      <!-- Example Prompts -->
      <div class="example-prompts-container mb-12">
        <h3 class="text-2xl font-bold text-white mb-4 text-center">Przyk≈Çadowe Prompty</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div class="prompt-card" onclick="setPrompt('conversation', 'Jakie sƒÖ g≈Ç√≥wne r√≥≈ºnice miƒôdzy Svelte i React?')">
            <div class="prompt-title">üí¨ Por√≥wnanie Framework√≥w</div>
            <div class="prompt-text">"Jakie sƒÖ g≈Ç√≥wne r√≥≈ºnice miƒôdzy Svelte i React?"</div>
          </div>
          <div class="prompt-card" onclick="setPrompt('summarization', 'Podsumuj ten artyku≈Ç o najnowszych trendach w AI: [link do artyku≈Çu]')">
            <div class="prompt-title">üìÑ Podsumowanie Artyku≈Çu</div>
            <div class="prompt-text">"Podsumuj ten artyku≈Ç o najnowszych trendach w AI..."</div>
          </div>
          <div class="prompt-card" onclick="setPrompt('qa', 'Kto by≈Ç pierwszym prezydentem Stan√≥w Zjednoczonych?')">
            <div class="prompt-title">‚ùì Pytanie i Odpowied≈∫</div>
            <div class="prompt-text">"Kto by≈Ç pierwszym prezydentem Stan√≥w Zjednoczonych?"</div>
          </div>
          <div class="prompt-card" onclick="setPrompt('code_analysis', 'Przeanalizuj ten kod pod kƒÖtem b≈Çƒôd√≥w i zaproponuj ulepszenia: [wklej kod]')">
            <div class="prompt-title">üíª Analiza Kodu</div>
            <div class="prompt-text">"Przeanalizuj ten kod pod kƒÖtem b≈Çƒôd√≥w..."</div>
          </div>
          <div class="prompt-card" onclick="setPrompt('document_qa', 'Na podstawie tego dokumentu, jakie sƒÖ g≈Ç√≥wne wnioski? [wklej tekst dokumentu]')">
            <div class="prompt-title">üìö Q&A z Dokumentu</div>
            <div class="prompt-text">"Na podstawie tego dokumentu, jakie sƒÖ g≈Ç√≥wne wnioski..."</div>
          </div>
        </div>
      </div>

      <!-- Main Interface -->
      <div class="langchain-interface">
        <div class="interface-header">
          <h2>LangChain Processor</h2>
          <div class="chain-selector">
            <label for="chainType">Typ ≈Ça≈Ñcucha:</label>
            <select id="chainType">
              <option value="conversation">Conversation</option>
              <option value="summarization">Summarization</option>
              <option value="qa">Q&A</option>
              <option value="code_analysis">Code Analysis</option>
              <option value="document_qa">Document Q&A</option>
            </select>
          </div>
        </div>

        <div class="input-section">
          <textarea 
            id="langchainInput" 
            placeholder="Wprowad≈∫ tekst do przetworzenia przez LangChain..."
            rows="8"
          ></textarea>
          
          <div class="options-panel">
            <div class="option-group">
              <label for="temperature">Temperatura (0.0-1.0):</label>
              <input type="range" id="temperature" min="0" max="1" step="0.1" value="0.7">
              <span id="tempValue">0.7</span>
            </div>
            
            <div class="option-group">
              <label for="maxTokens">Max tokeny:</label>
              <input type="number" id="maxTokens" min="100" max="4000" value="2048">
            </div>
          </div>

          <div class="action-buttons">
            <button id="processBtn" class="primary-btn">
              üîó Przetw√≥rz przez LangChain
            </button>
            <button id="clearBtn" class="secondary-btn">
              üóëÔ∏è Wyczy≈õƒá
            </button>
          </div>
        </div>

        <div class="output-section" id="outputSection" style="display: none;">
          <div class="output-header">
            <h3>Wynik przetwarzania LangChain</h3>
            <div class="processing-info" id="processingInfo"></div>
          </div>
          <div class="output-content" id="outputContent"></div>
        </div>
      </div>

      <!-- Integration Status -->
      <div class="integration-status">
        <h3>Status integracji LangChain</h3>
        <div class="status-grid">
          <div class="status-item">
            <div class="status-indicator active"></div>
            <span>DeepSeek AI Model</span>
          </div>
          <div class="status-item">
            <div class="status-indicator active"></div>
            <span>Chain Processing</span>
          </div>
          <div class="status-item">
            <div class="status-indicator active"></div>
            <span>Context Memory</span>
          </div>
          <div class="status-item">
            <div class="status-indicator warning"></div>
            <span>Vector Database</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Custom Chain Modal -->
    <div id="customChainModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
      <div class="bg-gray-800 p-8 rounded-lg max-w-2xl w-full">
        <h2 class="text-2xl font-bold text-white mb-4">Stw√≥rz w≈Çasny ≈Ça≈Ñcuch</h2>
        <textarea id="customChainPrompt" class="w-full h-40 p-2 rounded bg-gray-700 text-white" placeholder="Wpisz sw√≥j system prompt..."></textarea>
        <div class="mt-4 flex justify-end gap-4">
          <button id="cancelCustomChain" class="secondary-btn">Anuluj</button>
          <button id="saveCustomChain" class="primary-btn">Zapisz i u≈ºyj</button>
        </div>
      </div>
    </div>
  </main>

  <style>
    .chain-type-card {
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .chain-type-card:hover {
      border-color: #00d9ff;
      background: rgba(0, 217, 255, 0.1);
      transform: translateY(-4px);
    }

    .chain-type-card.active {
      border-color: #00d9ff;
      background: rgba(0, 217, 255, 0.2);
    }

    .chain-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .chain-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: white;
      margin-bottom: 0.5rem;
    }

    .chain-description {
      color: #b0b0b0;
      font-size: 0.9rem;
    }

    .langchain-interface {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .interface-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .interface-header h2 {
      color: white;
      font-size: 1.5rem;
      font-weight: 600;
    }

    .chain-selector select {
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      padding: 0.5rem;
      border-radius: 6px;
    }

    .input-section textarea {
      width: 100%;
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      padding: 1rem;
      color: white;
      font-size: 1rem;
      resize: vertical;
      margin-bottom: 1rem;
    }

    .options-panel {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1rem;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
    }

    .option-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: white;
    }

    .option-group input[type="range"] {
      flex: 1;
    }

    .option-group input[type="number"] {
      width: 80px;
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      padding: 0.25rem;
      border-radius: 4px;
    }

    .action-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }

    .primary-btn {
      background: linear-gradient(45deg, #00d9ff, #0099cc);
      border: none;
      color: white;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .primary-btn:hover {
      background: linear-gradient(45deg, #00b8e6, #0088bb);
      transform: translateY(-2px);
    }

    .secondary-btn {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .secondary-btn:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .output-section {
      margin-top: 2rem;
      background: rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      padding: 1.5rem;
    }

    .output-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .output-header h3 {
      color: white;
      font-size: 1.25rem;
    }

    .processing-info {
      color: #00d9ff;
      font-size: 0.9rem;
    }

    .output-content {
      color: white;
      line-height: 1.6;
      white-space: pre-wrap;
    }

    .integration-status {
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 2rem;
    }

    .integration-status h3 {
      color: white;
      margin-bottom: 1rem;
      text-align: center;
    }

    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 6px;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }

    .status-indicator.active {
      background: #00ff88;
      box-shadow: 0 0 6px #00ff88;
    }

    .status-indicator.warning {
      background: #ffaa00;
      box-shadow: 0 0 6px #ffaa00;
    }

    .status-item span {
      color: white;
      font-size: 0.9rem;
    }

    .prompt-card {
      background: rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      padding: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .prompt-card:hover {
      border-color: #00d9ff;
      background: rgba(0, 217, 255, 0.1);
    }

    .prompt-title {
      font-weight: 600;
      color: #00d9ff;
      margin-bottom: 0.5rem;
    }

    .prompt-text {
      font-size: 0.9rem;
      color: #b0b0b0;
    }
  </style>

  <script>
    function setPrompt(chainType, promptText) {
      document.getElementById('chainType').value = chainType;
      document.getElementById('langchainInput').value = promptText;
    }

    document.addEventListener('DOMContentLoaded', function() {
      const chainCards = document.querySelectorAll('.chain-type-card');
      const chainTypeSelect = document.getElementById('chainType');
      const processBtn = document.getElementById('processBtn');
      const clearBtn = document.getElementById('clearBtn');
      const langchainInput = document.getElementById('langchainInput');
      const outputSection = document.getElementById('outputSection');
      const outputContent = document.getElementById('outputContent');
      const processingInfo = document.getElementById('processingInfo');
      const temperatureSlider = document.getElementById('temperature');
      const tempValue = document.getElementById('tempValue');
      const maxTokensInput = document.getElementById('maxTokens');

      // Temperature slider update
      temperatureSlider.addEventListener('input', function() {
        tempValue.textContent = this.value;
      });

      // Chain type selection
      chainCards.forEach(card => {
        card.addEventListener('click', function() {
          chainCards.forEach(c => c.classList.remove('active'));
          this.classList.add('active');
          const chainType = this.dataset.chain;
          if (chainType !== 'custom') {
            chainTypeSelect.value = chainType;
          }
        });
      });

      // Process button
      processBtn.addEventListener('click', async function() {
        const message = langchainInput.value.trim();
        if (!message) {
          alert('Wprowad≈∫ tekst do przetworzenia');
          return;
        }

        processBtn.disabled = true;
        processBtn.innerHTML = 'üîÑ Przetwarzanie...';
        outputSection.style.display = 'block';
        outputContent.innerHTML = 'Przetwarzanie przez LangChain...';
        processingInfo.innerHTML = `≈Åa≈Ñcuch: ${chainTypeSelect.value}`;

        try {
          const response = await fetch('/api/gemini-langchain', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              message: message,
              chain_type: chainTypeSelect.value,
              options: {
                temperature: parseFloat(temperatureSlider.value),
                max_tokens: parseInt(maxTokensInput.value)
              }
            })
          });

          const data = await response.json();
          
          if (data.status === 'success') {
            outputContent.innerHTML = data.data.response;
            processingInfo.innerHTML = `‚úÖ Zako≈Ñczono | Model: ${data.data.model} | Czas: ${Date.now() - data.data.processing_time}ms`;
          } else {
            outputContent.innerHTML = `‚ùå B≈ÇƒÖd: ${data.error}`;
            processingInfo.innerHTML = '‚ùå B≈ÇƒÖd przetwarzania';
          }
        } catch (error) {
          outputContent.innerHTML = `‚ùå B≈ÇƒÖd komunikacji: ${error.message}`;
          processingInfo.innerHTML = '‚ùå B≈ÇƒÖd sieci';
        } finally {
          processBtn.disabled = false;
          processBtn.innerHTML = 'üîó Przetw√≥rz przez LangChain';
        }
      });

      // Clear button
      clearBtn.addEventListener('click', function() {
        langchainInput.value = '';
        outputSection.style.display = 'none';
        chainCards.forEach(c => c.classList.remove('active'));
      });

      // Enter key support
      langchainInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && e.ctrlKey) {
          processBtn.click();
        }
      });

      // Custom Chain Modal
      const customChainCard = document.querySelector('[data-chain="custom"]');
      const customChainModal = document.getElementById('customChainModal');
      const cancelCustomChainBtn = document.getElementById('cancelCustomChain');
      const saveCustomChainBtn = document.getElementById('saveCustomChain');
      const customChainPrompt = document.getElementById('customChainPrompt');

      customChainCard.addEventListener('click', () => {
        customChainModal.classList.remove('hidden');
      });

      cancelCustomChainBtn.addEventListener('click', () => {
        customChainModal.classList.add('hidden');
      });

      saveCustomChainBtn.addEventListener('click', () => {
        const newPrompt = customChainPrompt.value.trim();
        if (newPrompt) {
          // This is a simplified implementation. A real implementation would
          // require updating the backend to handle custom prompts.
          alert(`Zapisano custom prompt: ${newPrompt}`);
          chainTypeSelect.value = 'custom';
          // You would need to pass the custom prompt to the API.
          customChainModal.classList.add('hidden');
        }
      });
    });
  </script>
</MyBonzoLayout>
