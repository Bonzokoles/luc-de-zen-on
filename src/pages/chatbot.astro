---
import BackroomInterface from '@/layouts/BackroomInterface.astro';
import AiHelpAssistant from '@/components/AiHelpAssistant.svelte';
---

<BackroomInterface siteTitle="AI Chatbot | AI Workers">
  <div class="fixed inset-0 bg-[#0f1419] -z-10">
    <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/15 via-[#0f1419] to-[#0f1419]"></div>
  </div>

  <section class="backroom-header">
    <div class="backroom-container">
      <h1 class="backroom-title">AI Chatbot</h1>
      <p class="backroom-description">Inteligentny asystent AI z obsługą głosu i wieloma modelami</p>
    </div>
  </section>

  <section class="backroom-section">
    <div class="backroom-container">
      <div class="function-container">
        <h2 class="text-2xl font-semibold text-primary mb-5">AI Assistant Online</h2>
        <div class="voice-ai-panel mb-8 border border-edge rounded-lg p-6" style="background: rgba(0, 0, 0, 0.5);">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-primary-foreground">🎤 Voice AI Assistant</h3>
            <div class="flex gap-2">
              <button id="voiceToggle" onclick="toggleVoiceMode()" class="px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded font-semibold transition-colors">
                🎤 Voice OFF
              </button>
              <button onclick="openVoiceAssistant()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm">
                🔧 Ustawienia
              </button>
            </div>
          </div>
          <div id="voiceControls" class="hidden">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Język mowy:</label>
                <select id="voiceLanguage" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="pl-PL">🇵🇱 Polski</option>
                  <option value="en-US">🇺🇸 English</option>
                  <option value="de-DE">🇩🇪 Deutsch</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Głos ElevenLabs:</label>
                <select id="elevenLabsVoice" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="g8ZOdhoD9R6eYKPTjKbE">Głos Męski</option>
                  <option value="IRHApOXLvnW57QJPQH2P">Głos Żeński</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Tryb nagrywania:</label>
                <select id="voiceMode" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="continuous">Ciągły</option>
                  <option value="single">Pojedynczy</option>
                  <option value="command">Tylko komendy</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Auto-send:</label>
                <label class="flex items-center">
                  <input type="checkbox" id="voiceAutoSend" class="mr-2">
                  <span class="text-sm">Wyślij automatycznie</span>
                </label>
              </div>
            </div>
            <div id="voiceStatus" class="text-center p-4 bg-gray-800 rounded-lg">
              <div class="text-cyan-400 font-medium">🎤 Gotowy do nagrywania</div>
              <div class="text-sm text-gray-400 mt-1">Kliknij przycisk Voice lub powiedz "Słucham"</div>
            </div>
          </div>
        </div>

        <!-- AI Settings -->
        <div class="ai-settings-panel mb-8 border border-edge rounded-lg p-6" style="background: rgba(0, 0, 0, 0.5);">
          <h3 class="text-xl font-semibold text-primary-foreground mb-4">⚙️ Ustawienia AI</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label for="aiModel" class="block text-sm font-medium mb-2 text-primary-foreground">Model AI</label>
              <select id="aiModel" onchange="updateModelInfo()" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                <option value="bielik" selected>Bielik (PL)</option>
                <option value="polaczek">POLACZEK (PL)</option>
                <option value="qwen">Qwen (PL)</option>
                <option value="gemma">Gemma</option>
                <option value="fast">Fast</option>
                <option value="advanced">Advanced</option>
              </select>
            </div>
            <div>
              <label for="aiRole" class="block text-sm font-medium mb-2 text-primary-foreground">Rola AI</label>
              <select id="aiRole" onchange="updateSystemPrompt()" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                <option value="assistant">Asystent</option>
                <option value="programmer">Programista</option>
                <option value="writer">Pisarz</option>
                <option value="analyst">Analityk</option>
                <option value="teacher">Nauczyciel</option>
                <option value="business">Doradca Biznesowy</option>
                <option value="creative">Kreator</option>
                <option value="translator">Tłumacz</option>
              </select>
            </div>
            <div>
              <label for="temperature" class="block text-sm font-medium mb-2 text-primary-foreground">Temperatura: <span id="tempValue">0.7</span></label>
              <input type="range" id="temperature" min="0" max="1" step="0.1" value="0.7" class="w-full" oninput="document.getElementById('tempValue').textContent = this.value">
            </div>
            <div>
              <label for="language" class="block text-sm font-medium mb-2 text-primary-foreground">Język Odpowiedzi</label>
              <select id="language" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                <option value="pl">Polski</option>
                <option value="en">English</option>
              </select>
            </div>
          </div>
          <div id="modelInfo" class="mt-4"></div>
          <div class="mt-4">
            <button onclick="toggleSystemPrompt()" class="text-sm text-cyan-400 hover:underline">Pokaż/Ukryj System Prompt</button>
            <div id="systemPromptPreview" class="hidden mt-2 p-2 bg-gray-800/50 border border-edge rounded text-xs text-gray-300 whitespace-pre-wrap"></div>
          </div>
        </div>

        <!-- Chat Interface -->
        <div class="chat-container border border-edge rounded-lg overflow-hidden mt-8" style="background: rgba(0, 0, 0, 0.5);">
          <!-- Chat Header -->
          <div class="chat-header border-b border-edge p-4 flex items-center justify-between" style="background: rgba(0, 0, 0, 0.5);">
            <div class="flex items-center gap-3">
              <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-primary-foreground font-semibold">AI Assistant Online</span>
            </div>
            <div class="flex gap-2 flex-wrap">
              <button onclick="generateRandomPrompt()" class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm" title="Losowy prompt">
                🎲 Losowy
              </button>
              <button onclick="copyLastResponse()" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm" title="Kopiuj ostatnią odpowiedź">
                📋 Kopiuj
              </button>
              <button onclick="regenerateLastResponse()" class="px-3 py-1 bg-orange-600 hover:bg-orange-700 text-white rounded text-sm" title="Regeneruj odpowiedź">
                🔄 Regeneruj
              </button>
              <button onclick="startVoiceRecording()" class="px-3 py-1 bg-cyan-600 hover:bg-cyan-700 text-white rounded text-sm" title="Nagrywanie głosowe (F2)">
                🎤 Głos
              </button>
              <button onclick="clearChat()" class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-sm">
                Wyczyść
              </button>
              <button onclick="exportChat()" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm">
                Eksport
              </button>
            </div>
          </div>

          <!-- Chat Messages -->
          <div id="chatMessages" class="chat-messages h-96 overflow-y-auto p-4 space-y-4">
            <div class="message assistant-message">
              <div class="message-content bg-cyan-600/20 border border-cyan-400/30 rounded-lg p-3">
                <div class="message-header flex items-center gap-2 mb-2">
                  <span class="w-2 h-2 bg-cyan-400 rounded-full"></span>
                  <span class="text-cyan-400 text-sm font-medium">AI Assistant</span>
                  <span class="text-gray-400 text-xs ml-auto">Teraz</span>
                </div>
                <div class="message-text text-primary-foreground">
                  Cześć! Jestem AI Assistant. Mogę pomóc Ci w różnych zadaniach - odpowiadać na pytania, pisać kod, tłumaczyć, analizować tekst i wiele więcej. O czym chcesz porozmawiać?
                </div>
              </div>
            </div>
          </div>

          <!-- Chat Input -->
          <div class="chat-input border-t border-edge p-4">
            <div class="flex gap-3">
              <textarea id="messageInput" rows="2" placeholder="Napisz swoją wiadomość..." class="flex-1 p-3 border border-edge rounded-lg text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none" style="background: rgba(0, 0, 0, 0.5);" onkeypress="handleKeyPress(event)"></textarea>
              <button id="sendButton" onclick="sendMessage()" class="bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200 disabled:opacity-50">
                Wyślij
              </button>
            </div>
            <div id="typingIndicator" class="hidden mt-2 text-gray-400 text-sm">
              <span class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce"></span>
              <span class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></span>
              <span class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></span>
              <span class="ml-2">AI pisze odpowiedź...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>



  <script>
    let chatHistory = JSON.parse(localStorage.getItem("chatHistory") || "[]");
    let currentChatId = null;
    let isVoiceEnabled = false;
    let recognition = null;
    let synthesis = null;
    let currentSystemPrompt = "";

    // Voice AI Integration
    let SpeechRecognition = null;
    let speechSynthesis = null;

    // AI Role System Prompts
    const rolePrompts = {
      assistant: `Jesteś MyBonzo AI Assistant - pomocnym asystentem polskiej platformy AI. Odpowiadaj profesjonalnie i pomocnie na wszystkie pytania użytkowników.`,
      programmer: `Jesteś ekspertem programistą. Specjalizujesz się w JavaScript, TypeScript, Python, Astro, Svelte i technologiach webowych. Dostarczasz dokładne rozwiązania kodowe z wyjaśnieniami.`,
      writer: `Jesteś profesjonalnym pisarzem i copywriterem. Tworzysz angażujące treści, artykuły, opisy produktów i teksty marketingowe. Dbasz o styl, gramatykę i perswazyjność.`,
      analyst: `Jesteś analitykiem danych i eksperten od BigQuery, SQL, Python i narzędzi analitycznych. Pomagasz w analizie danych, tworzeniu raportów i wizualizacji.`,
      teacher: `Jesteś doświadczonym nauczycielem i edukatorem. Wyjaśniasz skomplikowane tematy w prosty sposób, używasz przykładów i zachęcasz do nauki.`,
      business: `Jesteś doradcą biznesowym i strategiem. Pomagasz w planowaniu biznesowym, analizie rynku, strategii marketingowej i podejmowaniu decyzji biznesowych.`,
      creative: `Jesteś kreatywnym designerem i artystą. Pomagasz w projektowaniu, generowaniu pomysłów kreatywnych, tworzeniu konceptów wizualnych i rozwiązań artystycznych.`,
      translator: `Jesteś profesjonalnym tłumaczem. Specjalizujesz się w tłumaczeniu tekstów między językami, dbając o kontekst kulturowy i precyzję znaczeniową.`
    };

    // Model Information
    const modelInfo = {
      "@cf/google/gemma-3-12b-it": "Najnowszy model Google Gemma 3 z 12B parametrów. Zoptymalizowany dla różnorodnych zadań AI, szybki i precyzyjny.",
      "@cf/meta/llama-3.1-8b-instruct": "Meta Llama 3.1 8B - model instrukcyjny doskonały do rozmów i złożonych zadań reasoning.",
      "@cf/qwen/qwen2.5-7b-instruct": "Qwen 2.5 7B od Alibaba - mocny model o świetnej jakości odpowiedzi w języku polskim.",
      "@cf/microsoft/phi-2": "Microsoft Phi-2 - kompaktowy ale wydajny model, szybki w generowaniu odpowiedzi.",
      "polaczek": "POLACZEK - pierwszy polski model AI stworzony specjalnie dla użytkowników polskojęzycznych.",
      "bielik": "Bielik od Sperix - zaawansowany polski model AI o wysokiej jakości rozumienia języka polskiego.",
      "gpt-4": "OpenAI GPT-4 - najbardziej zaawansowany model AI dostępny publicznie (wymaga API key).",
      "claude": "Anthropic Claude - model AI skupiony na bezpieczeństwie i pomocności (wymaga API key).",
      "gemini-pro": "Google Gemini Pro - zaawansowany model multimodalny (wymaga API key)."
    };

    function cleanupVoiceAI() {
      if (recognition) {
        recognition.stop();
        recognition.onresult = null;
        recognition.onerror = null;
        recognition.onend = null;
        recognition = null;
      }
      if (speechSynthesis && speechSynthesis.speaking) {
        speechSynthesis.cancel();
      }
    }

    function initializeVoiceAI() {
      cleanupVoiceAI(); // Clean up previous instances

      if (typeof window !== 'undefined') {
        SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        speechSynthesis = window.speechSynthesis;
        
        if (SpeechRecognition) {
          recognition = new SpeechRecognition();
          recognition.continuous = false;
          recognition.interimResults = false;
          recognition.lang = document.getElementById('voiceLanguage').value || 'pl-PL';
          
          recognition.onstart = function() {
            updateVoiceStatus('🎤 Słucham...', 'listening');
          };
          
          recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            const confidence = event.results[0][0].confidence;
            
            document.getElementById('messageInput').value = transcript;
            updateVoiceStatus(`✅ Rozpoznano (${Math.round(confidence * 100)}%): ${transcript}`, 'success');
            
            if (document.getElementById('voiceAutoSend').checked) {
              setTimeout(sendMessage, 500);
            }
          };
          
          recognition.onerror = function(event) {
            updateVoiceStatus(`❌ Błąd rozpoznawania: ${event.error}`, 'error');
          };
          
          recognition.onend = function() {
            if (isVoiceEnabled) {
              updateVoiceStatus('🎤 Gotowy do nagrywania', 'ready');
            }
          };
        }
      }
    }

    function toggleVoiceMode() {
      isVoiceEnabled = !isVoiceEnabled;
      const voiceToggle = document.getElementById('voiceToggle');
      const voiceControls = document.getElementById('voiceControls');
      
      if (isVoiceEnabled) {
        voiceToggle.textContent = '🎤 Voice ON';
        voiceToggle.className = voiceToggle.className.replace('bg-cyan-600', 'bg-green-600').replace('hover:bg-cyan-700', 'hover:bg-green-700');
        voiceControls.classList.remove('hidden');
        updateVoiceStatus('🎤 Voice AI aktywny', 'active');
        initializeVoiceAI();
      } else {
        voiceToggle.textContent = '🎤 Voice OFF';
        voiceToggle.className = voiceToggle.className.replace('bg-green-600', 'bg-cyan-600').replace('hover:bg-green-700', 'hover:bg-cyan-700');
        voiceControls.classList.add('hidden');
        if (recognition) recognition.stop();
      }
    }

    function updateVoiceStatus(message, type = 'info') {
      const statusEl = document.getElementById('voiceStatus');
      const colors = {
        info: 'text-cyan-400',
        listening: 'text-yellow-400',
        success: 'text-green-400',
        error: 'text-red-400',
        active: 'text-green-400',
        ready: 'text-cyan-400'
      };
      
      statusEl.innerHTML = `<div class="${colors[type]} font-medium">${message}</div>`;
    }

    function startVoiceRecording() {
      if (recognition && isVoiceEnabled) {
        recognition.lang = document.getElementById('voiceLanguage').value || 'pl-PL';
        recognition.start();
      }
    }

    function openVoiceAssistant() {
      window.open('/voice-ai-assistant', '_blank');
    }

    function updateModelInfo() {
      const selectedModel = document.getElementById('aiModel').value;
      const modelInfoEl = document.getElementById('modelInfo');
      
      if (modelInfo[selectedModel]) {
        modelInfoEl.innerHTML = `
          <div class="text-sm text-gray-300">
            <span class="font-medium text-cyan-400">${selectedModel}:</span> ${modelInfo[selectedModel]}
          </div>
        `;
      }
      
      updateSystemPrompt();
    }

    function updateSystemPrompt() {
      const selectedRole = document.getElementById('aiRole').value;
      currentSystemPrompt = rolePrompts[selectedRole] || rolePrompts.assistant;
      
      const previewEl = document.getElementById('systemPromptPreview');
      if (previewEl && !previewEl.classList.contains('hidden')) {
        previewEl.textContent = currentSystemPrompt;
      }
    }

    function toggleSystemPrompt() {
      const previewEl = document.getElementById('systemPromptPreview');
      console.log('Toggling system prompt. Element found:', previewEl);
      if (previewEl) {
        previewEl.classList.toggle('hidden');
        
        if (!previewEl.classList.contains('hidden')) {
          console.log('Current system prompt:', currentSystemPrompt);
          previewEl.textContent = currentSystemPrompt;
        }
      } else {
        console.error('System prompt preview element not found!');
      }
    }

    async function speakResponse(text) {
      if (!isVoiceEnabled) return;

      // Stop any currently speaking utterance before starting a new one
      if (speechSynthesis && speechSynthesis.speaking) {
        speechSynthesis.cancel();
      }

      console.log("🔊 Synthesizing speech with ElevenLabs...");
      const voiceId = (document.getElementById('elevenLabsVoice') as HTMLSelectElement)?.value || 'g8ZOdhoD9R6eYKPTjKbE';
      
      try {
        const response = await fetch("/api/polaczek/quiz/speech", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            text: text,
            voiceId: voiceId,
          }),
        });

        if (!response.ok) {
          throw new Error(`ElevenLabs API error: ${response.statusText}`);
        }

        const audioBlob = await response.blob();
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        audio.play();
        
        audio.onended = () => {
          URL.revokeObjectURL(audioUrl);
        };

      } catch (error) {
        console.error("❌ ElevenLabs TTS Error, falling back to browser synthesis:", error);
        // Fallback to browser TTS if our backend fails
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = (document.getElementById('voiceLanguage') as HTMLSelectElement)?.value || 'pl-PL';
        speechSynthesis.speak(utterance);
      }
    }

    function handleKeyPress(event) {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
      }
      
      // Voice command shortcuts
      if (event.key === "F2" && isVoiceEnabled) {
        event.preventDefault();
        startVoiceRecording();
      }
    }

    function askQuestion(question) {
      document.getElementById("messageInput").value = question;
      sendMessage();
    }

    let isRequestInProgress = false;

    async function sendMessage() {
      if (isRequestInProgress) {
        console.log("Request in progress. Please wait.");
        return;
      }

      console.log("🚀 sendMessage() wywołana");
      const messageInput = document.getElementById("messageInput");
      const message = messageInput.value.trim();
      console.log("📝 Wiadomość do wysłania:", message);

      if (!message) {
        console.log("❌ Pusta wiadomość - przerywanie");
        return;
      }

      const sendButton = document.getElementById("sendButton");
      const typingIndicator = document.getElementById("typingIndicator");

      // Add user message
      console.log("➕ Dodawanie wiadomości użytkownika do czatu");
      addMessage(message, "user");
      messageInput.value = "";

      // Disable input and set state
      isRequestInProgress = true;
      sendButton.disabled = true;
      sendButton.textContent = "Wysyłanie...";
      typingIndicator.classList.remove("hidden");
      console.log("🔒 Przycisk zablokowany, rozpoczynanie wysyłania");

      try {
        const aiModel = document.getElementById("aiModel").value;
        const temperature = parseFloat(
          document.getElementById("temperature").value
        );
        const language = document.getElementById("language").value;

        console.log("⚙️ Parametry:", { aiModel, temperature, language });

        const requestData = {
          prompt: message,
          model: aiModel,
          temperature: temperature,
          language: language,
          system: currentSystemPrompt,
          usePolaczek: aiModel === 'polaczek'
        };
        console.log("📤 Wysyłanie żądania do /api/chat:", requestData);

        const response = await fetch("/api/polaczek-chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(requestData),
        });

        console.log(
          "📥 Odpowiedź otrzymana:",
          response.status,
          response.statusText
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("📊 Dane z API:", data);

        if (data.answer || data.response) {
          // Add AI response
          const aiResponse = data.answer || data.response;
          console.log("✅ Dodawanie odpowiedzi AI:", aiResponse);
          addMessage(aiResponse, "assistant");

          // Voice AI - speak response if enabled
          if (isVoiceEnabled && document.getElementById('voiceAutoSend').checked) {
            speakResponse(aiResponse);
          }

          // Save to history
          saveChatToHistory(message, aiResponse);
        } else {
          throw new Error(data.error || "Błąd odpowiedzi AI");
        }
      } catch (error) {
        console.error("❌ Chat error:", error);
        addMessage(
          "Przepraszam, wystąpił błąd podczas przetwarzania Twojej wiadomości. Spróbuj ponownie. Błąd: " +
            error.message,
          "assistant",
          true
        );
      } finally {
        // Re-enable input and reset state
        isRequestInProgress = false;
        console.log("🔓 Odblokowanie przycisku");
        sendButton.disabled = false;
        sendButton.textContent = "Wyślij";
        typingIndicator.classList.add("hidden");
      }
    }

    // Test API connectivity function
    async function testAPI() {
      console.log("🧪 Testowanie API...");
      try {
        const response = await fetch("/api/chat", {
          method: "GET",
        });
        console.log(
          "📡 GET test response:",
          response.status,
          response.statusText
        );
        const data = await response.json();
        console.log("📊 GET test data:", data);

        // Test POST
        const postResponse = await fetch("/api/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ prompt: "test message" }),
        });
        console.log(
          "📡 POST test response:",
          postResponse.status,
          postResponse.statusText
        );
        const postData = await postResponse.json();
        console.log("📊 POST test data:", postData);
      } catch (error) {
        console.error("❌ API test error:", error);
      }
    }

    function addMessage(content, type, isError = false) {
      const chatMessages = document.getElementById("chatMessages");
      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${type}-message`;

      const timestamp = new Date().toLocaleTimeString("pl-PL", {
        hour: "2-digit",
        minute: "2-digit",
      });

      const bgColor =
        type === "user"
          ? "bg-blue-600/20 border-blue-400/30"
          : isError
          ? "bg-red-600/20 border-red-400/30"
          : "bg-cyan-600/20 border-cyan-400/30";

      const headerColor =
        type === "user"
          ? "text-blue-400"
          : isError
          ? "text-red-400"
          : "text-cyan-400";

      const dotColor =
        type === "user" ? "bg-blue-400" : isError ? "bg-red-400" : "bg-cyan-400";

      messageDiv.innerHTML = `
        <div class="message-content ${bgColor} rounded-lg p-3">
          <div class="message-header flex items-center gap-2 mb-2">
            <span class="w-2 h-2 ${dotColor} rounded-full"></span>
            <span class="${headerColor} text-sm font-medium">${type === "user" ? "Ty" : "AI Assistant"}</span>
            <span class="text-gray-400 text-xs ml-auto">${timestamp}</span>
          </div>
          <div class="message-text text-primary-foreground whitespace-pre-wrap">${content}</div>
        </div>
      `;

      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function clearChat() {
      const chatMessages = document.getElementById("chatMessages");
      if (chatMessages) {
        chatMessages.innerHTML = `
          <div class="message assistant-message">
            <div class="message-content bg-cyan-600/20 border border-cyan-400/30 rounded-lg p-3">
              <div class="message-header flex items-center gap-2 mb-2">
                <span class="w-2 h-2 bg-cyan-400 rounded-full"></span>
                <span class="text-cyan-400 text-sm font-medium">AI Assistant</span>
                <span class="text-gray-400 text-xs ml-auto">Teraz</span>
              </div>
              <div class="message-text text-primary-foreground">
                Czat został wyczyszczony. W czym mogę Ci pomóc?
              </div>
            </div>
          </div>
        `;
      }
      currentChatId = null;
    }

    function exportChat() {
      const messages = document.querySelectorAll(".message");
      let chatText = "Export czatu AI Assistant\n";
      chatText += "=".repeat(50) + "\n\n";

      messages.forEach((message) => {
        const header = message.querySelector(".message-header");
        const text = message.querySelector(".message-text");
        if (header && text) {
            const user = header.textContent.includes("Ty")
            ? "Użytkownik"
            : "AI Assistant";
            chatText += `${user}: ${text.textContent.trim()}\n\n`;
        }
      });

      const blob = new Blob([chatText], { type: "text/plain;charset=utf-8" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.style.display = "none";
      a.href = url;
      a.download = `czat_ai_${new Date().toISOString().split("T")[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      URL.revokeObjectURL(url);
      document.body.removeChild(a);
    }

    function saveChatToHistory(userMessage, aiResponse) {
      const MAX_HISTORY_SIZE = 50; // Limit number of conversations

      const chatItem = {
        id: currentChatId || Date.now(),
        timestamp: new Date().toISOString(),
        model: document.getElementById("aiModel").value,
        messages: [],
      };

      if (!currentChatId) {
        chatItem.messages.push({ role: "user", content: userMessage });
        chatItem.messages.push({ role: "assistant", content: aiResponse });
        currentChatId = chatItem.id;
        chatHistory.unshift(chatItem);
      } else {
        const existingChat = chatHistory.find(
          (chat) => chat.id === currentChatId
        );
        if (existingChat) {
          existingChat.messages.push({ role: "user", content: userMessage });
          existingChat.messages.push({ role: "assistant", content: aiResponse });
        } else {
            // This case should ideally not happen if logic is correct
            chatItem.messages.push({ role: "user", content: userMessage });
            chatItem.messages.push({ role: "assistant", content: aiResponse });
            currentChatId = chatItem.id;
            chatHistory.unshift(chatItem);
        }
      }

      // Enforce history size limit
      if (chatHistory.length > MAX_HISTORY_SIZE) {
        chatHistory = chatHistory.slice(0, MAX_HISTORY_SIZE);
      }

      try {
        localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
      } catch (error) {
        console.error("LocalStorage quota exceeded, trimming history:", error);
        // If quota is exceeded, trim the history and try again
        chatHistory = chatHistory.slice(0, Math.floor(MAX_HISTORY_SIZE / 2));
        try {
          localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
        } catch (finalError) {
          console.error("Failed to save even trimmed history:", finalError);
        }
      }
      updateHistoryDisplay();
    }

    function updateHistoryDisplay() {
      const historyList = document.getElementById("chatHistoryList");
      if (!historyList) return; // Guard clause to prevent crash

      historyList.innerHTML = "";

      chatHistory.forEach((chat) => {
        const historyItem = document.createElement("div");
        historyItem.className =
          "history-item border border-edge rounded-lg p-3 cursor-pointer hover:border-cyan-400 transition-colors";
        historyItem.style.background = "rgba(0, 0, 0, 0.5)";

        const firstMessage =
          chat.messages.find((m) => m.type === "user")?.content || "Rozmowa";
        const date = new Date(chat.timestamp).toLocaleDateString("pl-PL");

        historyItem.innerHTML = `
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <p class="text-primary-foreground text-sm font-medium truncate">${firstMessage}</p>
              <p class="text-gray-400 text-xs">${date} • ${chat.messages.length} wiadomości</p>
            </div>
            <button onclick="deleteChat(${chat.id})" class="text-red-400 hover:text-red-300 text-xs ml-2">✕</button>
          </div>
        `;

        historyItem.onclick = (e) => {
          if (e.target.tagName !== "BUTTON") {
            loadChat(chat.id);
          }
        };

        historyList.appendChild(historyItem);
      });
    }

    function loadChat(chatId) {
      const chat = chatHistory.find((c) => c.id === chatId);
      if (!chat) return;

      const chatMessages = document.getElementById("chatMessages");
      chatMessages.innerHTML = "";

      chat.messages.forEach((message) => {
        addMessage(message.content, message.type);
      });

      currentChatId = chatId;
    }

    function deleteChat(chatId) {
      event.stopPropagation();
      if (confirm("Czy na pewno chcesz usunąć tę rozmowę?")) {
        chatHistory = chatHistory.filter((chat) => chat.id !== chatId);
        localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
        updateHistoryDisplay();

        if (currentChatId === chatId) {
          clearChat();
        }
      }
    }

    // Enhanced Chat Features
    function generateRandomPrompt() {
      const prompts = [
        "Opowiedz mi o najnowszych trendach w AI",
        "Jak mogę zoptymalizować swoją stronę internetową?",
        "Napisz krótką historię o robotach w przyszłości",
        "Wyjaśnij różnice między różnymi modelami AI",
        "Pomóż mi stworzyć plan nauki programowania",
        "Jakie są najlepsze praktyki w web developmencie?",
        "Stwórz listę pomysłów na biznes online",
        "Jak działają sieci neuronowe?"
      ];
      
      const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];
      document.getElementById('messageInput').value = randomPrompt;
    }

    function copyLastResponse() {
      const messages = document.querySelectorAll('.assistant-message .message-text');
      if (messages.length > 0) {
        const lastResponse = messages[messages.length - 1].textContent;
        navigator.clipboard.writeText(lastResponse).then(() => {
          alert('Ostatnia odpowiedź AI skopiowana do schowka!');
        });
      }
    }

    function regenerateLastResponse() {
      const messages = document.querySelectorAll('.user-message .message-text');
      if (messages.length > 0) {
        const lastUserMessage = messages[messages.length - 1].textContent;
        document.getElementById('messageInput').value = lastUserMessage;
        sendMessage();
      }
    }

    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      console.log("🚀 Chatbot DOM załadowany - WERSJA DEBUG");
      
      // Initialize all systems - COMMENTED OUT FOR DEBUGGING
      // updateHistoryDisplay();
      // updateModelInfo();
      // updateSystemPrompt();

      // Setup send button event listener
      const sendButton = document.getElementById("sendButton");
      if (sendButton) {
        sendButton.addEventListener("click", sendMessage);
      }
      
      // Initialize Voice AI if supported
      if (typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition)) {
        console.log("🎤 Voice AI dostępny");
      }

      // Test API connectivity - COMMENTED OUT FOR DEBUGGING
      // testAPI();

      // Load quick prompt if available
      const quickPrompt = localStorage.getItem("quickChatPrompt");
      if (quickPrompt) {
        console.log("💾 Załadowano szybki prompt:", quickPrompt);
        document.getElementById("messageInput").value = quickPrompt;
        localStorage.removeItem("quickChatPrompt");
      }

      // Add keyboard shortcuts info
      console.log("⌨️ Skróty klawiszowe: Enter - wyślij, Shift+Enter - nowa linia, F2 - nagrywanie głosowe");

      // Make functions globally available for debugging
      window.testAPI = testAPI;
      window.sendMessage = sendMessage;
      window.toggleVoiceMode = toggleVoiceMode;
      window.startVoiceRecording = startVoiceRecording;
      window.updateModelInfo = updateModelInfo;
      window.updateSystemPrompt = updateSystemPrompt;
      window.toggleSystemPrompt = toggleSystemPrompt;
      window.openVoiceAssistant = openVoiceAssistant;
      window.generateRandomPrompt = generateRandomPrompt;
      window.copyLastResponse = copyLastResponse;
      window.regenerateLastResponse = regenerateLastResponse;
      
      console.log("✅ Chatbot w pełni zainicjalizowany z Voice AI i zaawansowanymi funkcjami");
    });

    // POLACZEK_T Assistant
    const polaczekBtn = document.getElementById('polaczekBtn');
    const polaczekWidget = document.getElementById('polaczekWidget');

    polaczekBtn.addEventListener('click', () => {
      polaczekWidget.classList.toggle('hidden');
    });
  </script>
</BackroomInterface>
