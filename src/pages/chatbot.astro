---
// TypeScript interface for component props (Astro best practice)
interface Props {
  title?: string;
  description?: string;
}

// Proper destructuring of props with defaults (Astro best practice)
const { 
  title = "AI Chatbot | AI Workers",
  description = "Inteligentny asystent AI z obsługą głosu i wieloma modelami"
} = Astro.props;

// Proper type imports (Astro best practice)
import type { HTMLAttributes } from "astro/types";
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
// import AiHelpAssistant from "../components/AiHelpAssistant.svelte";

// Metadata for SEO and performance (Astro best practice)
const pageMetadata = {
  title,
  description,
  robots: "index, follow",
  og: {
    title: title,
    description: description,
    type: "website"
  }
};
---

<MyBonzoLayout {title}>
  <main class="min-h-svh">
    <!-- Chat Settings Panel               <select
                id="chatTemperature"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0, 0, 0, 0.5);"
              >
        <div
          class="settings-panel mt-8 border border-edge rounded-lg p-6"
          style="background: rgba(0, 0, 0, 0.5);"
        >- Header Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between max-h-72 min-h-64">
          <div class="mt-auto">
            <span
              style="writing-mode: vertical-lr;"
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              AI_CHAT
            </span>
          </div>
          <span class="mt-auto">
            <span
              style=""
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              GPT_BOT
            </span>
          </span>
        </div>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex flex-row p-2">
          <a class="hover:brightness-125" href="/">
            <h1 class="text-4xl sm:text-5xl">AI CHATBOT</h1>
            <h2 class="text-2xl sm:text-3xl">Inteligentny Asystent</h2>
          </a>

          <div class="hidden ml-auto gap-4 md:gap-0 md:flex md:flex-col">
            <a class="ml-auto hover:brightness-125 duration-200" href="/">
              ← Powrót do strony głównej
              <svg
                style="--rotation: -45deg"
                class="stroke-primary-foreground inline aspect-square w-3 h-auto fill-transparent rotate-[var(--rotation)]"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3 12L21 12M21 12L12.5 3.5M21 12L12.5 20.5"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Chatbot Section -->
    <section
      class="ai-workers-section flex items-center justify-center py-16"
      style="background: rgba(0, 0, 0, 0.5);"
      id="chatbot"
    >
      <div class="section-container max-w-4xl mx-auto">
        <h2 class="section-title">AI CHATBOT</h2>
        <p class="section-description">
          Inteligentny asystent AI do rozmów, odpowiadania na pytania i pomocy w
          zadaniach
        </p>

        <!-- Voice AI Integration Panel -->
        <div class="voice-ai-panel mb-8 border border-edge rounded-lg p-6" style="background: rgba(0, 0, 0, 0.5);">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-primary-foreground">🎤 Voice AI Assistant</h3>
            <div class="flex gap-2">
              <button
                id="voiceToggle"
                onclick="toggleVoiceMode()"
                class="px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded font-semibold transition-colors"
              >
                🎤 Voice OFF
              </button>
              <button
                onclick="openVoiceAssistant()"
                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
              >
                🔧 Ustawienia
              </button>
            </div>
          </div>
          <div id="voiceControls" class="hidden">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Język mowy:</label>
                <select id="voiceLanguage" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="pl-PL">🇵🇱 Polski</option>
                  <option value="en-US">🇺🇸 English</option>
                  <option value="de-DE">🇩🇪 Deutsch</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Tryb nagrywania:</label>
                <select id="voiceMode" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="continuous">Ciągły</option>
                  <option value="single">Pojedynczy</option>
                  <option value="command">Tylko komendy</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Auto-send:</label>
                <label class="flex items-center">
                  <input type="checkbox" id="voiceAutoSend" class="mr-2">
                  <span class="text-sm">Wyślij automatycznie</span>
                </label>
              </div>
            </div>
            <div id="voiceStatus" class="text-center p-4 bg-gray-800 rounded-lg">
              <div class="text-cyan-400 font-medium">🎤 Gotowy do nagrywania</div>
              <div class="text-sm text-gray-400 mt-1">Kliknij przycisk Voice lub powiedz "Słucham"</div>
            </div>
          </div>
        </div>

        <!-- Chat Interface -->
        <div
          class="chat-container border border-edge rounded-lg overflow-hidden mt-8"
          style="background: rgba(0, 0, 0, 0.5);"
        >
          <!-- Chat Header -->
          <div
            class="chat-header border-b border-edge p-4 flex items-center justify-between"
            style="background: rgba(0, 0, 0, 0.5);"
          >
            <div class="flex items-center gap-3">
              <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse">
              </div>
              <span class="text-primary-foreground font-semibold"
                >AI Assistant Online</span
              >
            </div>
            <div class="flex gap-2 flex-wrap">
              <button
                onclick="generateRandomPrompt()"
                class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm"
                title="Losowy prompt"
              >
                🎲 Losowy
              </button>
              <button
                onclick="copyLastResponse()"
                class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm"
                title="Kopiuj ostatnią odpowiedź"
              >
                📋 Kopiuj
              </button>
              <button
                onclick="regenerateLastResponse()"
                class="px-3 py-1 bg-orange-600 hover:bg-orange-700 text-white rounded text-sm"
                title="Regeneruj odpowiedź"
              >
                🔄 Regeneruj
              </button>
              <button
                onclick="startVoiceRecording()"
                class="px-3 py-1 bg-cyan-600 hover:bg-cyan-700 text-white rounded text-sm"
                title="Nagrywanie głosowe (F2)"
              >
                🎤 Głos
              </button>
              <button
                onclick="clearChat()"
                class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-sm"
              >
                Wyczyść
              </button>
              <button
                onclick="exportChat()"
                class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
              >
                Eksport
              </button>
            </div>
          </div>

          <!-- Chat Messages -->
          <div
            id="chatMessages"
            class="chat-messages h-96 overflow-y-auto p-4 space-y-4"
          >
            <div class="message assistant-message">
              <div
                class="message-content bg-cyan-600/20 border border-cyan-400/30 rounded-lg p-3"
              >
                <div class="message-header flex items-center gap-2 mb-2">
                  <span class="w-2 h-2 bg-cyan-400 rounded-full"></span>
                  <span class="text-cyan-400 text-sm font-medium"
                    >AI Assistant</span
                  >
                  <span class="text-gray-400 text-xs ml-auto">Teraz</span>
                </div>
                <div class="message-text text-primary-foreground">
                  Cześć! Jestem AI Assistant. Mogę pomóc Ci w różnych zadaniach
                  - odpowiadać na pytania, pisać kod, tłumaczyć, analizować
                  tekst i wiele więcej. O czym chcesz porozmawiać?
                </div>
              </div>
            </div>
          </div>

          <!-- Chat Input -->
          <div class="chat-input border-t border-edge p-4">
            <div class="flex gap-3">
              <textarea
                id="messageInput"
                rows="2"
                placeholder="Napisz swoją wiadomość..."
                class="flex-1 p-3 border border-edge rounded-lg text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none"
                style="background: rgba(0, 0, 0, 0.5);"
                onkeypress="handleKeyPress(event)"></textarea>
              <button
                id="sendButton"
                onclick="sendMessage()"
                class="bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200 disabled:opacity-50"
              >
                Wyślij
              </button>
            </div>
            <div id="typingIndicator" class="hidden mt-2 text-gray-400 text-sm">
              <span
                class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce"
              ></span>
              <span
                class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                style="animation-delay: 0.1s"></span>
              <span
                class="inline-block w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                style="animation-delay: 0.2s"></span>
              <span class="ml-2">AI pisze odpowiedź...</span>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions mt-8">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">
            Szybkie akcje:
          </h3>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
            <button
              class="quick-action-btn"
              onclick="askQuestion('Jak napisać funkcję w JavaScript?')"
            >
              💻 Programowanie
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Przetłumacz ten tekst na angielski')"
            >
              🌐 Tłumaczenie
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Napisz kreatywną historię o kosmosie')"
            >
              ✍️ Pisanie
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Wyjaśnij mi podstawy uczenia maszynowego')"
            >
              🧠 Nauka
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Pomóż mi z matematyką')"
            >
              🔢 Matematyka
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Stwórz plan diety')"
            >
              🥗 Zdrowie
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Doradź mi książkę do czytania')"
            >
              📚 Książki
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Co nowego w technologii?')"
            >
              🔬 Technologia
            </button>
            <button
              class="quick-action-btn"
              onclick="startVoiceRecording()"
              style="border-color: #00bcd4; color: #00bcd4;"
            >
              🎤 Nagrywanie głosowe
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Wygeneruj kod HTML dla strony internetowej')"
            >
              🌐 HTML/CSS
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Stwórz plan marketingowy dla startupu')"
            >
              📈 Marketing
            </button>
            <button
              class="quick-action-btn"
              onclick="askQuestion('Pomóż mi zoptymalizować bazę danych SQL')"
            >
              🗄️ Bazy danych
            </button>
          </div>
        </div>

        <!-- Settings Panel -->
        <div
          class="settings-panel mt-8 bg-black/20 border border-edge rounded-lg p-6"
        >
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">
            Ustawienia czatu:
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Model AI:</label
              >
              <select
                id="aiModel"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0, 0, 0, 0.5);"
                onchange="updateModelInfo()"
              >
                <optgroup label="🚀 Cloudflare Models">
                  <option value="@cf/google/gemma-3-12b-it">Gemma 3 12B (Zalecany)</option>
                  <option value="@cf/meta/llama-3.1-8b-instruct">Llama 3.1 8B</option>
                  <option value="@cf/qwen/qwen2.5-7b-instruct">Qwen 2.5 7B</option>
                  <option value="@cf/microsoft/phi-2">Phi-2</option>
                </optgroup>
                <optgroup label="🇵🇱 Polskie Modele">
                  <option value="polaczek">POLACZEK (Polski AI)</option>
                  <option value="bielik">Bielik (Sperix)</option>
                </optgroup>
                <optgroup label="🌟 Premium Models">
                  <option value="gpt-4">GPT-4 (OpenAI)</option>
                  <option value="claude">Claude (Anthropic)</option>
                  <option value="gemini-pro">Gemini Pro</option>
                </optgroup>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Rola AI:</label>
              <select
                id="aiRole"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0, 0, 0, 0.5);"
                onchange="updateSystemPrompt()"
              >
                <option value="assistant">🤖 Asystent uniwersalny</option>
                <option value="programmer">💻 Programista</option>
                <option value="writer">✍️ Pisarz/Copywriter</option>
                <option value="analyst">📊 Analityk danych</option>
                <option value="teacher">👨‍🏫 Nauczyciel</option>
                <option value="business">💼 Doradca biznesowy</option>
                <option value="creative">🎨 Kreatywny designer</option>
                <option value="translator">🌐 Tłumacz</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Temperatura:</label
              >
              <select
                id="temperature"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0, 0, 0, 0.5);"
              >
                <option value="0.1">Precyzyjny (0.1)</option>
                <option value="0.7" selected>Zbalansowany (0.7)</option>
                <option value="1.0">Kreatywny (1.0)</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Język:</label
              >
              <select
                id="language"
                class="w-full p-2 bg-black/40 border border-edge rounded text-primary-foreground"
              >
                <option value="pl">Polski</option>
                <option value="en">English</option>
                <option value="auto">Automatyczny</option>
              </select>
            </div>
          </div>
          
          <!-- Model Info Panel -->
          <div id="modelInfo" class="mt-4 p-3 bg-gray-800 rounded-lg">
            <div class="text-sm text-gray-300">
              <span class="font-medium text-cyan-400">Gemma 3 12B:</span> Najnowszy model Google, zoptymalizowany dla różnorodnych zadań. Szybki i precyzyjny.
            </div>
          </div>
          
          <!-- System Prompt Preview -->
          <div class="mt-4">
            <button onclick="toggleSystemPrompt()" class="text-sm text-gray-400 hover:text-cyan-400">
              📝 Pokaż/ukryj prompt systemowy
            </button>
            <div id="systemPromptPreview" class="hidden mt-2 p-3 bg-gray-800 rounded text-xs text-gray-300 max-h-32 overflow-y-auto">
              <!-- System prompt will be displayed here -->
            </div>
          </div>
        </div>

        <!-- Chat History -->
        <div class="chat-history mt-8">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">
            Ostatnie rozmowy:
          </h3>
          <div id="chatHistoryList" class="space-y-2">
            <!-- History items will be populated here -->
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- AI Help Assistant rendered via SupportStack in layout -->
</MyBonzoLayout>

<style>
  /* Base styles matching main page */
  .section-container {
    padding: 2rem;
    text-align: center;
  }

  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }

  .section-description {
    font-size: 1.25rem;
    color: #d1d5db;
    margin-bottom: 2rem;
  }

  .quick-action-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s;
    cursor: pointer;
    text-align: left;
  }

  .quick-action-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
  }

  .ai-workers-section {
    background: linear-gradient(
      135deg,
      rgba(15, 23, 42, 0.75) 0%,
      rgba(30, 41, 59, 0.75) 100%
    );
    min-height: 100vh;
  }

  .message {
    animation: fadeIn 0.3s ease-out;
  }

  .user-message {
    display: flex;
    justify-content: flex-end;
  }

  .user-message .message-content {
    background-color: rgba(37, 99, 235, 0.2);
    border: 1px solid rgba(59, 130, 246, 0.3);
    max-width: 80%;
  }

  .assistant-message {
    display: flex;
    justify-content: flex-start;
  }

  .assistant-message .message-content {
    max-width: 80%;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Scrollbar styling */
  .chat-messages::-webkit-scrollbar {
    width: 8px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: #1e293b;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background: #374151;
    border-radius: 4px;
  }

  .chat-messages::-webkit-scrollbar-thumb:hover {
    background: #4b5563;
  }

  /* Voice AI Panel Styles */
  .voice-ai-panel {
    border: 1px solid #374151;
    background: rgba(0, 0, 0, 0.5);
    transition: all 0.3s ease;
  }

  .voice-ai-panel:hover {
    border-color: #00bcd4;
  }

  #voiceStatus {
    transition: all 0.3s ease;
  }

  #voiceStatus.listening {
    background: rgba(251, 191, 36, 0.1);
    border: 1px solid #f59e0b;
  }

  #voiceStatus.active {
    background: rgba(16, 185, 129, 0.1);
    border: 1px solid #10b981;
  }

  #voiceStatus.error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
  }

  /* Enhanced button styles */
  .quick-action-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    cursor: pointer;
    text-align: left;
    position: relative;
    overflow: hidden;
  }

  .quick-action-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 188, 212, 0.2);
  }

  .quick-action-btn:active {
    transform: translateY(0);
  }

  /* Model info animation */
  #modelInfo {
    transition: all 0.3s ease;
  }

  #systemPromptPreview {
    transition: all 0.3s ease;
    font-family: 'Courier New', monospace;
  }

  /* Chat input enhancements */
  #messageInput:focus {
    box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.2);
  }

  /* Loading animation for voice status */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .voice-pulse {
    animation: pulse 2s infinite;
  }
</style>

<script>
  let chatHistory = JSON.parse(localStorage.getItem("chatHistory") || "[]");
  let currentChatId = null;
  let isVoiceEnabled = false;
  let recognition = null;
  let synthesis = null;
  let currentSystemPrompt = "";

  // Voice AI Integration
  let SpeechRecognition = null;
  let speechSynthesis = null;

  // AI Role System Prompts
  const rolePrompts = {
    assistant: `Jesteś MyBonzo AI Assistant - pomocnym asystentem polskiej platformy AI. Odpowiadaj profesjonalnie i pomocnie na wszystkie pytania użytkowników.`,
    programmer: `Jesteś ekspertem programistą. Specjalizujesz się w JavaScript, TypeScript, Python, Astro, Svelte i technologiach webowych. Dostarczasz dokładne rozwiązania kodowe z wyjaśnieniami.`,
    writer: `Jesteś profesjonalnym pisarzem i copywriterem. Tworzysz angażujące treści, artykuły, opisy produktów i teksty marketingowe. Dbasz o styl, gramatykę i perswazyjność.`,
    analyst: `Jesteś analitykiem danych i eksperten od BigQuery, SQL, Python i narzędzi analitycznych. Pomagasz w analizie danych, tworzeniu raportów i wizualizacji.`,
    teacher: `Jesteś doświadczonym nauczycielem i edukatorem. Wyjaśniasz skomplikowane tematy w prosty sposób, używasz przykładów i zachęcasz do nauki.`,
    business: `Jesteś doradcą biznesowym i strategiem. Pomagasz w planowaniu biznesowym, analizie rynku, strategii marketingowej i podejmowaniu decyzji biznesowych.`,
    creative: `Jesteś kreatywnym designerem i artystą. Pomagasz w projektowaniu, generowaniu pomysłów kreatywnych, tworzeniu konceptów wizualnych i rozwiązań artystycznych.`,
    translator: `Jesteś profesjonalnym tłumaczem. Specjalizujesz się w tłumaczeniu tekstów między językami, dbając o kontekst kulturowy i precyzję znaczeniową.`
  };

  // Model Information
  const modelInfo = {
    "@cf/google/gemma-3-12b-it": "Najnowszy model Google Gemma 3 z 12B parametrów. Zoptymalizowany dla różnorodnych zadań AI, szybki i precyzyjny.",
    "@cf/meta/llama-3.1-8b-instruct": "Meta Llama 3.1 8B - model instrukcyjny doskonały do rozmów i złożonych zadań reasoning.",
    "@cf/qwen/qwen2.5-7b-instruct": "Qwen 2.5 7B od Alibaba - mocny model o świetnej jakości odpowiedzi w języku polskim.",
    "@cf/microsoft/phi-2": "Microsoft Phi-2 - kompaktowy ale wydajny model, szybki w generowaniu odpowiedzi.",
    "polaczek": "POLACZEK - pierwszy polski model AI stworzony specjalnie dla użytkowników polskojęzycznych.",
    "bielik": "Bielik od Sperix - zaawansowany polski model AI o wysokiej jakości rozumienia języka polskiego.",
    "gpt-4": "OpenAI GPT-4 - najbardziej zaawansowany model AI dostępny publicznie (wymaga API key).",
    "claude": "Anthropic Claude - model AI skupiony na bezpieczeństwie i pomocności (wymaga API key).",
    "gemini-pro": "Google Gemini Pro - zaawansowany model multimodalny (wymaga API key)."
  };

  function initializeVoiceAI() {
    if (typeof window !== 'undefined') {
      SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      speechSynthesis = window.speechSynthesis;
      
      if (SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = document.getElementById('voiceLanguage').value || 'pl-PL';
        
        recognition.onstart = function() {
          updateVoiceStatus('🎤 Słucham...', 'listening');
        };
        
        recognition.onresult = function(event) {
          const transcript = event.results[0][0].transcript;
          const confidence = event.results[0][0].confidence;
          
          document.getElementById('messageInput').value = transcript;
          updateVoiceStatus(`✅ Rozpoznano (${Math.round(confidence * 100)}%): ${transcript}`, 'success');
          
          if (document.getElementById('voiceAutoSend').checked) {
            setTimeout(sendMessage, 500);
          }
        };
        
        recognition.onerror = function(event) {
          updateVoiceStatus(`❌ Błąd rozpoznawania: ${event.error}`, 'error');
        };
        
        recognition.onend = function() {
          if (isVoiceEnabled) {
            updateVoiceStatus('🎤 Gotowy do nagrywania', 'ready');
          }
        };
      }
    }
  }

  function toggleVoiceMode() {
    isVoiceEnabled = !isVoiceEnabled;
    const voiceToggle = document.getElementById('voiceToggle');
    const voiceControls = document.getElementById('voiceControls');
    
    if (isVoiceEnabled) {
      voiceToggle.textContent = '🎤 Voice ON';
      voiceToggle.className = voiceToggle.className.replace('bg-cyan-600', 'bg-green-600').replace('hover:bg-cyan-700', 'hover:bg-green-700');
      voiceControls.classList.remove('hidden');
      updateVoiceStatus('🎤 Voice AI aktywny', 'active');
      initializeVoiceAI();
    } else {
      voiceToggle.textContent = '🎤 Voice OFF';
      voiceToggle.className = voiceToggle.className.replace('bg-green-600', 'bg-cyan-600').replace('hover:bg-green-700', 'hover:bg-cyan-700');
      voiceControls.classList.add('hidden');
      if (recognition) recognition.stop();
    }
  }

  function updateVoiceStatus(message, type = 'info') {
    const statusEl = document.getElementById('voiceStatus');
    const colors = {
      info: 'text-cyan-400',
      listening: 'text-yellow-400',
      success: 'text-green-400',
      error: 'text-red-400',
      active: 'text-green-400',
      ready: 'text-cyan-400'
    };
    
    statusEl.innerHTML = `<div class="${colors[type]} font-medium">${message}</div>`;
  }

  function startVoiceRecording() {
    if (recognition && isVoiceEnabled) {
      recognition.lang = document.getElementById('voiceLanguage').value || 'pl-PL';
      recognition.start();
    }
  }

  function openVoiceAssistant() {
    window.open('/voice-ai-assistant', '_blank');
  }

  function updateModelInfo() {
    const selectedModel = document.getElementById('aiModel').value;
    const modelInfoEl = document.getElementById('modelInfo');
    
    if (modelInfo[selectedModel]) {
      modelInfoEl.innerHTML = `
        <div class="text-sm text-gray-300">
          <span class="font-medium text-cyan-400">${selectedModel}:</span> ${modelInfo[selectedModel]}
        </div>
      `;
    }
    
    updateSystemPrompt();
  }

  function updateSystemPrompt() {
    const selectedRole = document.getElementById('aiRole').value;
    currentSystemPrompt = rolePrompts[selectedRole] || rolePrompts.assistant;
    
    const previewEl = document.getElementById('systemPromptPreview');
    if (previewEl && !previewEl.classList.contains('hidden')) {
      previewEl.textContent = currentSystemPrompt;
    }
  }

  function toggleSystemPrompt() {
    const previewEl = document.getElementById('systemPromptPreview');
    previewEl.classList.toggle('hidden');
    
    if (!previewEl.classList.contains('hidden')) {
      previewEl.textContent = currentSystemPrompt;
    }
  }

  function speakResponse(text) {
    if (speechSynthesis && isVoiceEnabled) {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = document.getElementById('voiceLanguage').value || 'pl-PL';
      utterance.rate = 0.9;
      utterance.pitch = 1.0;
      utterance.volume = 0.8;
      
      speechSynthesis.speak(utterance);
    }
  }

  function handleKeyPress(event) {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      sendMessage();
    }
    
    // Voice command shortcuts
    if (event.key === "F2" && isVoiceEnabled) {
      event.preventDefault();
      startVoiceRecording();
    }
  }

  function askQuestion(question) {
    document.getElementById("messageInput").value = question;
    sendMessage();
  }

  async function sendMessage() {
    console.log("🚀 sendMessage() wywołana");
    const messageInput = document.getElementById("messageInput");
    const message = messageInput.value.trim();
    console.log("📝 Wiadomość do wysłania:", message);

    if (!message) {
      console.log("❌ Pusta wiadomość - przerywanie");
      return;
    }

    const sendButton = document.getElementById("sendButton");
    const typingIndicator = document.getElementById("typingIndicator");

    // Add user message
    console.log("➕ Dodawanie wiadomości użytkownika do czatu");
    addMessage(message, "user");
    messageInput.value = "";

    // Disable input
    sendButton.disabled = true;
    sendButton.textContent = "Wysyłanie...";
    typingIndicator.classList.remove("hidden");
    console.log("🔒 Przycisk zablokowany, rozpoczynanie wysyłania");

    try {
      const aiModel = document.getElementById("aiModel").value;
      const temperature = parseFloat(
        document.getElementById("temperature").value
      );
      const language = document.getElementById("language").value;

      console.log("⚙️ Parametry:", { aiModel, temperature, language });

      const requestData = {
        prompt: message,
        model: aiModel,
        temperature: temperature,
        language: language,
        system: currentSystemPrompt,
        usePolaczek: aiModel === 'polaczek'
      };
      console.log("📤 Wysyłanie żądania do /api/chat:", requestData);

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestData),
      });

      console.log(
        "📥 Odpowiedź otrzymana:",
        response.status,
        response.statusText
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("📊 Dane z API:", data);

      if (data.answer || data.response) {
        // Add AI response
        const aiResponse = data.answer || data.response;
        console.log("✅ Dodawanie odpowiedzi AI:", aiResponse);
        addMessage(aiResponse, "assistant");

        // Voice AI - speak response if enabled
        if (isVoiceEnabled && document.getElementById('voiceAutoSend').checked) {
          speakResponse(aiResponse);
        }

        // Save to history
        saveChatToHistory(message, aiResponse);
      } else {
        throw new Error(data.error || "Błąd odpowiedzi AI");
      }
    } catch (error) {
      console.error("❌ Chat error:", error);
      addMessage(
        "Przepraszam, wystąpił błąd podczas przetwarzania Twojej wiadomości. Spróbuj ponownie. Błąd: " +
          error.message,
        "assistant",
        true
      );
    } finally {
      // Re-enable input
      console.log("🔓 Odblokowanie przycisku");
      sendButton.disabled = false;
      sendButton.textContent = "Wyślij";
      typingIndicator.classList.add("hidden");
    }
  }

  // Test API connectivity function
  async function testAPI() {
    console.log("🧪 Testowanie API...");
    try {
      const response = await fetch("/api/chat", {
        method: "GET",
      });
      console.log(
        "📡 GET test response:",
        response.status,
        response.statusText
      );
      const data = await response.json();
      console.log("📊 GET test data:", data);

      // Test POST
      const postResponse = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: "test message" }),
      });
      console.log(
        "📡 POST test response:",
        postResponse.status,
        postResponse.statusText
      );
      const postData = await postResponse.json();
      console.log("📊 POST test data:", postData);
    } catch (error) {
      console.error("❌ API test error:", error);
    }
  }

  function addMessage(content, type, isError = false) {
    const chatMessages = document.getElementById("chatMessages");
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${type}-message`;

    const timestamp = new Date().toLocaleTimeString("pl-PL", {
      hour: "2-digit",
      minute: "2-digit",
    });

    const bgColor =
      type === "user"
        ? "bg-blue-600/20 border-blue-400/30"
        : isError
          ? "bg-red-600/20 border-red-400/30"
          : "bg-cyan-600/20 border-cyan-400/30";

    const headerColor =
      type === "user"
        ? "text-blue-400"
        : isError
          ? "text-red-400"
          : "text-cyan-400";

    const dotColor =
      type === "user" ? "bg-blue-400" : isError ? "bg-red-400" : "bg-cyan-400";

    messageDiv.innerHTML = `
      <div class="message-content ${bgColor} rounded-lg p-3">
        <div class="message-header flex items-center gap-2 mb-2">
          <span class="w-2 h-2 ${dotColor} rounded-full"></span>
          <span class="${headerColor} text-sm font-medium">${type === "user" ? "Ty" : "AI Assistant"}</span>
          <span class="text-gray-400 text-xs ml-auto">${timestamp}</span>
        </div>
        <div class="message-text text-primary-foreground whitespace-pre-wrap">${content}</div>
      </div>
    `;

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function clearChat() {
    if (confirm("Czy na pewno chcesz wyczyścić czat?")) {
      const chatMessages = document.getElementById("chatMessages");
      chatMessages.innerHTML = `
        <div class="message assistant-message">
          <div class="message-content bg-cyan-600/20 border border-cyan-400/30 rounded-lg p-3">
            <div class="message-header flex items-center gap-2 mb-2">
              <span class="w-2 h-2 bg-cyan-400 rounded-full"></span>
              <span class="text-cyan-400 text-sm font-medium">AI Assistant</span>
              <span class="text-gray-400 text-xs ml-auto">Teraz</span>
            </div>
            <div class="message-text text-primary-foreground">
              Czat został wyczyszczony. W czym mogę Ci pomóc?
            </div>
          </div>
        </div>
      `;
      currentChatId = null;
    }
  }

  function exportChat() {
    const messages = document.querySelectorAll(".message");
    let chatText = "Export czatu AI Assistant\n";
    chatText += "=".repeat(50) + "\n\n";

    messages.forEach((message) => {
      const header = message.querySelector(".message-header");
      const text = message.querySelector(".message-text");
      const user = header.textContent.includes("Ty")
        ? "Użytkownik"
        : "AI Assistant";
      chatText += `${user}: ${text.textContent}\n\n`;
    });

    const blob = new Blob([chatText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `czat_ai_${new Date().toISOString().split("T")[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function saveChatToHistory(userMessage, aiResponse) {
    const chatItem = {
      id: currentChatId || Date.now(),
      timestamp: new Date().toISOString(),
      messages: [
        { type: "user", content: userMessage },
        { type: "assistant", content: aiResponse },
      ],
    };

    if (!currentChatId) {
      currentChatId = chatItem.id;
      chatHistory.unshift(chatItem);
    } else {
      const existingChat = chatHistory.find(
        (chat) => chat.id === currentChatId
      );
      if (existingChat) {
        existingChat.messages.push(...chatItem.messages);
      }
    }

    // Keep only last 10 chats
    if (chatHistory.length > 10) {
      chatHistory = chatHistory.slice(0, 10);
    }

    localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
    updateHistoryDisplay();
  }

  function updateHistoryDisplay() {
    const historyList = document.getElementById("chatHistoryList");
    historyList.innerHTML = "";

    chatHistory.forEach((chat) => {
      const historyItem = document.createElement("div");
      historyItem.className =
        "history-item border border-edge rounded-lg p-3 cursor-pointer hover:border-cyan-400 transition-colors";
      historyItem.style.background = "rgba(0, 0, 0, 0.5)";

      const firstMessage =
        chat.messages.find((m) => m.type === "user")?.content || "Rozmowa";
      const date = new Date(chat.timestamp).toLocaleDateString("pl-PL");

      historyItem.innerHTML = `
        <div class="flex justify-between items-start">
          <div class="flex-1">
            <p class="text-primary-foreground text-sm font-medium truncate">${firstMessage}</p>
            <p class="text-gray-400 text-xs">${date} • ${chat.messages.length} wiadomości</p>
          </div>
          <button onclick="deleteChat(${chat.id})" class="text-red-400 hover:text-red-300 text-xs ml-2">✕</button>
        </div>
      `;

      historyItem.onclick = (e) => {
        if (e.target.tagName !== "BUTTON") {
          loadChat(chat.id);
        }
      };

      historyList.appendChild(historyItem);
    });
  }

  function loadChat(chatId) {
    const chat = chatHistory.find((c) => c.id === chatId);
    if (!chat) return;

    const chatMessages = document.getElementById("chatMessages");
    chatMessages.innerHTML = "";

    chat.messages.forEach((message) => {
      addMessage(message.content, message.type);
    });

    currentChatId = chatId;
  }

  function deleteChat(chatId) {
    event.stopPropagation();
    if (confirm("Czy na pewno chcesz usunąć tę rozmowę?")) {
      chatHistory = chatHistory.filter((chat) => chat.id !== chatId);
      localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
      updateHistoryDisplay();

      if (currentChatId === chatId) {
        clearChat();
      }
    }
  }

  // Enhanced Chat Features
  function generateRandomPrompt() {
    const prompts = [
      "Opowiedz mi o najnowszych trendach w AI",
      "Jak mogę zoptymalizować swoją stronę internetową?",
      "Napisz krótką historię o robotach w przyszłości",
      "Wyjaśnij różnice między różnymi modelami AI",
      "Pomóż mi stworzyć plan nauki programowania",
      "Jakie są najlepsze praktyki w web developmencie?",
      "Stwórz listę pomysłów na biznes online",
      "Jak działają sieci neuronowe?"
    ];
    
    const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];
    document.getElementById('messageInput').value = randomPrompt;
  }

  function copyLastResponse() {
    const messages = document.querySelectorAll('.assistant-message .message-text');
    if (messages.length > 0) {
      const lastResponse = messages[messages.length - 1].textContent;
      navigator.clipboard.writeText(lastResponse).then(() => {
        alert('Ostatnia odpowiedź AI skopiowana do schowka!');
      });
    }
  }

  function regenerateLastResponse() {
    const messages = document.querySelectorAll('.user-message .message-text');
    if (messages.length > 0) {
      const lastUserMessage = messages[messages.length - 1].textContent;
      document.getElementById('messageInput').value = lastUserMessage;
      sendMessage();
    }
  }

  // Initialize
  document.addEventListener("DOMContentLoaded", () => {
    console.log("🚀 Chatbot DOM załadowany");
    
    // Initialize all systems
    updateHistoryDisplay();
    updateModelInfo();
    updateSystemPrompt();
    
    // Initialize Voice AI if supported
    if (typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition)) {
      console.log("🎤 Voice AI dostępny");
    }

    // Test API connectivity
    testAPI();

    // Load quick prompt if available
    const quickPrompt = localStorage.getItem("quickChatPrompt");
    if (quickPrompt) {
      console.log("💾 Załadowano szybki prompt:", quickPrompt);
      document.getElementById("messageInput").value = quickPrompt;
      localStorage.removeItem("quickChatPrompt");
    }

    // Add keyboard shortcuts info
    console.log("⌨️ Skróty klawiszowe: Enter - wyślij, Shift+Enter - nowa linia, F2 - nagrywanie głosowe");

    // Make functions globally available for debugging
    window.testAPI = testAPI;
    window.sendMessage = sendMessage;
    window.toggleVoiceMode = toggleVoiceMode;
    window.startVoiceRecording = startVoiceRecording;
    window.updateModelInfo = updateModelInfo;
    window.updateSystemPrompt = updateSystemPrompt;
    window.toggleSystemPrompt = toggleSystemPrompt;
    window.openVoiceAssistant = openVoiceAssistant;
    window.generateRandomPrompt = generateRandomPrompt;
    window.copyLastResponse = copyLastResponse;
    window.regenerateLastResponse = regenerateLastResponse;
    
    console.log("✅ Chatbot w pełni zainicjalizowany z Voice AI i zaawansowanymi funkcjami");
  });
</script>
