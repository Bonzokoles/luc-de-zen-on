---
import MyBonzoLayout from "../../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../../components/DecorativeLines.astro";
import AiHelpAssistant from "../../../components/AiHelpAssistant.svelte";
---

<MyBonzoLayout siteTitle="Interactive Quizzes AI | KAROL LISSON">
  <DecorativeLines />

  <main class="min-h-svh relative z-10">
    <div class="fixed inset-0 bg-[#0a0a0a]">
      <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/20 via-black to-black"></div>
      <div class="cyber-grid absolute inset-0"></div>
    </div>

    <section class="relative z-20 border-b border-[#333333] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <h1 class="text-4xl md:text-5xl font-bold text-[#00ffff] mb-2 uppercase tracking-wider font-mono">
          Interactive Quizzes AI
        </h1>
        <p class="text-[#a0a0a0] text-lg font-['Kenyan_Coffee']">
          Inteligentne quizy adaptujące się do poziomu użytkownika w czasie rzeczywistym
        </p>
        <div class="flex gap-4 mt-8">
            <a href="/" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> ← Powrót do głównej </a>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-12">
      <div class="max-w-2xl mx-auto px-4">
        <div id="quiz-container" class="bg-gradient-to-br from-[#1a1a1a] to-[#111111] border border-[#333333] p-6 rounded-sm">
          <!-- Quiz content will be rendered here by JavaScript -->
        </div>
      </div>
    </section>

  </main>

  <style>
    .cyber-grid { background-image: linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px); background-size: 20px 20px; }
    .option-label { transition: all 0.3s ease; }
    .option-label.selected { border-color: #00ffff; box-shadow: 0 0 10px rgba(0, 255, 255, 0.5); }
    .option-label.correct { background-color: rgba(0, 255, 0, 0.1); border-color: #00ff00; }
    .option-label.incorrect { background-color: rgba(255, 0, 0, 0.1); border-color: #ff3333; }
    button:disabled { cursor: not-allowed; opacity: 0.6; }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      class QuizApp {
      constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.sessionId = null;
        this.currentQuestion = null;
        this.totalQuestions = 0;
        this.questionNumber = 0;
        this.score = 0;
        this.renderStartScreen();
      }

      renderStartScreen() {
        this.container.innerHTML = `
          <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-6">Rozpocznij Nowy Quiz</h3>
          <div class="space-y-4">
            <div>
              <label for="quiz-topic" class="block text-sm font-medium text-gray-300 mb-2">Wpisz temat quizu:</label>
              <input type="text" id="quiz-topic" class="w-full p-2 bg-[#0a0a0a] border border-[#333333] text-white rounded-sm" placeholder="Np. JavaScript, Historia Polski, Kosmos">
            </div>
            <button id="start-quiz-btn" class="w-full bg-[#00ffff] text-[#0a0a0a] py-3 font-bold hover:brightness-125 transition-all duration-300 font-mono uppercase">Start</button>
          </div>
        `;
        document.getElementById('start-quiz-btn').addEventListener('click', () => this.startQuiz());
      }

      async startQuiz() {
        const topicInput = document.getElementById('quiz-topic') as HTMLInputElement;
        const topic = topicInput.value.trim();
        if (!topic) {
          alert('Proszę podać temat quizu.');
          return;
        }

        this.showLoading('Generowanie quizu...');

        try {
          const response = await this.callApi({ action: 'start_quiz', topic });
          this.sessionId = response.sessionId;
          this.totalQuestions = response.totalQuestions;
          this.questionNumber = 1;
          this.score = 0;
          this.currentQuestion = response.question;
          this.renderQuestion();
        } catch (error) {
          this.showError(error.message);
        }
      }

      renderQuestion() {
        const optionsHtml = Object.entries(this.currentQuestion.options).map(([key, value]) => `
          <label class="option-label flex items-center p-3 bg-[#0a0a0a] border border-[#333333] hover:border-[#00ffff] transition-all duration-300 cursor-pointer">
            <input type="radio" name="quiz-option" value="${key}" class="sr-only">
            <div class="w-4 h-4 border-2 border-[#333333] rounded-full mr-3 flex-shrink-0"></div>
            <span class="text-[#e0e0e0]">${value}</span>
          </label>
        `).join('');

        this.container.innerHTML = `
          <div class="flex justify-between items-center mb-4">
            <h4 class="text-[#ff6699] font-mono text-lg uppercase">Pytanie ${this.questionNumber}/${this.totalQuestions}</h4>
          </div>
          <div class="bg-[#0a0a0a] border border-[#333333] p-4 rounded-sm mb-6">
            <h5 class="text-[#e0e0e0] text-lg mb-4">${this.currentQuestion.question}</h5>
            <div id="options-container" class="space-y-3">${optionsHtml}</div>
          </div>
          <div id="feedback-container" class="mb-4"></div>
          <button id="submit-answer-btn" class="w-full bg-[#00ffff] text-[#0a0a0a] py-3 font-bold hover:brightness-125 transition-all duration-300 font-mono uppercase">Zatwierdź Odpowiedź</button>
        `;

        const optionsContainer = document.getElementById('options-container');
        optionsContainer.addEventListener('change', e => {
            document.querySelectorAll('.option-label').forEach(label => label.classList.remove('selected'));
            const selectedLabel = (e.target as HTMLElement).closest('.option-label');
            if (selectedLabel) selectedLabel.classList.add('selected');
        });

        document.getElementById('submit-answer-btn').addEventListener('click', () => this.submitAnswer());
      }

      async submitAnswer() {
        const selectedOption = document.querySelector('input[name="quiz-option"]:checked') as HTMLInputElement;
        if (!selectedOption) {
          alert('Proszę wybrać odpowiedź.');
          return;
        }

        this.showLoading('Sprawdzanie odpowiedzi...', false);

        try {
            const response = await this.callApi({ action: 'submit_answer', sessionId: this.sessionId, answer: selectedOption.value });
            
            this.showFeedback(response, selectedOption.value);

            if (response.nextQuestion) {
                this.currentQuestion = response.nextQuestion;
                this.questionNumber++;
                setTimeout(() => this.renderQuestion(), 2000); // Wait 2s before showing next question
            } else {
                this.renderFinalScore(response.finalScore, response.totalQuestions);
            }
        } catch (error) {
            this.showError(error.message);
        }
      }

      showFeedback(result, selectedValue) {
          const feedbackContainer = document.getElementById('feedback-container');
          document.querySelectorAll('.option-label').forEach(label => {
              const radio = label.querySelector('input') as HTMLInputElement;
              if (radio.value === result.correctAnswer) label.classList.add('correct');
              else if (radio.value === selectedValue) label.classList.add('incorrect');
          });

          const feedbackMessage = result.isCorrect ? 
            `<div class="p-3 bg-green-900/30 text-green-300 border border-green-500/50 rounded-sm"><strong>Dobrze!</strong> ${result.explanation}</div>` :
            `<div class="p-3 bg-red-900/30 text-red-300 border border-red-500/50 rounded-sm"><strong>Źle.</strong> Poprawna odpowiedź to ${result.correctAnswer}. ${result.explanation}</div>`;
          
          feedbackContainer.innerHTML = feedbackMessage;
          document.getElementById('submit-answer-btn').style.display = 'none';
      }

      renderFinalScore(score, total) {
          this.container.innerHTML = `
            <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-6 text-center">Quiz Zakończony!</h3>
            <div class="text-center">
                <p class="text-lg text-white">Twój wynik:</p>
                <p class="text-6xl font-bold text-cyan-400 my-4">${score} / ${total}</p>
                <p class="text-gray-400">${score/total > 0.7 ? 'Świetna robota!' : 'Warto jeszcze poćwiczyć.'}</p>
                <button id="restart-quiz-btn" class="mt-8 w-full bg-[#ff6699] text-[#0a0a0a] py-3 font-bold hover:brightness-125 transition-all duration-300 font-mono uppercase">Zagraj Ponownie</button>
            </div>
          `;
          document.getElementById('restart-quiz-btn').addEventListener('click', () => this.renderStartScreen());
      }

      showLoading(message, full = true) {
        if (full) {
            this.container.innerHTML = `<p class="text-cyan-400 text-center py-10">${message}</p>`;
        } else {
            const btn = document.getElementById('submit-answer-btn');
            if(btn) {
                btn.disabled = true;
                (btn.firstChild as Text).data = 'Sprawdzam...';
            }
        }
      }

      showError(message) {
        this.container.innerHTML = `<div class="text-red-500 text-center py-10"><h4>Wystąpił błąd</h4><p>${message}</p><button id="restart-quiz-btn" class="mt-8 w-full bg-[#ff6699] text-[#0a0a0a] py-3 font-bold hover:brightness-125 transition-all duration-300 font-mono uppercase">Spróbuj Ponownie</button></div>`;
        document.getElementById('restart-quiz-btn').addEventListener('click', () => this.renderStartScreen());
      }

      async callApi(body) {
        const response = await fetch('/api/quiz-engine', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        if (!response.ok) {
          const errData = await response.json();
          throw new Error(errData.error || `Błąd serwera: ${response.status}`);
        }
        const data = await response.json();
        if (!data.success) {
          throw new Error(data.error || 'Nieznany błąd API');
        }
        return data.data;
      }
      }

      new QuizApp('quiz-container');
    });
  </script>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm">🤖 POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Interaktywne Quizy AI" />
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const polaczekBtn = document.getElementById('polaczekBtn');
      const polaczekWidget = document.getElementById('polaczekWidget');

      if (polaczekBtn && polaczekWidget) {
        polaczekBtn.addEventListener('click', () => {
          polaczekWidget.classList.toggle('hidden');
        });
      }
    });
  </script>
</MyBonzoLayout>
