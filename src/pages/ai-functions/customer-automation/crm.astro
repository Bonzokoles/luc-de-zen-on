
---
import MyBonzoLayout from "../../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../../components/DecorativeLines.astro";
---

<MyBonzoLayout siteTitle="Integracja CRM - Customer Automation | KAROL LISSON">
  <DecorativeLines />

  <main class="min-h-svh relative z-10">
    <div class="fixed inset-0 bg-[#0a0a0a]">
      <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/20 via-black to-black"></div>
      <div class="cyber-grid absolute inset-0"></div>
    </div>

    <section class="relative z-20 border-b border-[#333333] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-4xl md:text-5xl font-bold text-[#00ffff] mb-2 uppercase tracking-wider font-mono">
              Integracja CRM
            </h1>
            <p class="text-[#a0a0a0] text-lg font-['Kenyan_Coffee']">
              Bezpo≈õrednia synchronizacja z najpopularniejszymi systemami CRM
            </p>
          </div>
          <div class="text-right text-sm text-[#a0a0a0] font-mono">
            <div class="mb-1">
              SYNC: <span id="sync-status" class="text-[#00ffff]">CONNECTING...</span>
            </div>
            <div>UPTIME: <span id="uptime-status" class="text-[#ff6699]">99.98%</span></div>
          </div>
        </div>
        <div class="flex gap-4 mb-8">
          <a href="../" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> ‚Üê Customer Automation </a>
          <a href="../qualification/" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#e0e0e0] hover:text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> Kwalifikacja </a>
          <a href="../responses/" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#e0e0e0] hover:text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> Auto-Odpowiedzi </a>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-12">
      <div class="max-w-6xl mx-auto px-4">
        <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-8">üîó Obs≈Çugiwane Platformy CRM</h3>
        <div id="crm-platforms-container" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          <div class="text-center text-gray-400 col-span-3 py-10">≈Åadowanie statusu integracji...</div>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-8 border-t border-[#333333]">
      <div class="max-w-6xl mx-auto px-4">
        <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-6">Status Synchronizacji</h3>
        <div id="sync-dashboard-container" class="grid md:grid-cols-2 gap-8">
             <div class="text-center text-gray-400 col-span-2 py-10">≈Åadowanie statystyk...</div>
        </div>
      </div>
    </section>

  </main>

  <style>
    .cyber-grid { background-image: linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px); background-size: 20px 20px; }
    button:disabled { cursor: not-allowed; opacity: 0.7; }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const platformsContainer = document.getElementById('crm-platforms-container');
      const syncDashboardContainer = document.getElementById('sync-dashboard-container');
      const syncStatusEl = document.getElementById('sync-status');

      function getStatusIndicator(status) {
        switch (status) {
          case 'active': return '<div class="w-3 h-3 bg-[#00ff00] rounded-full animate-pulse"></div>';
          case 'pending': return '<div class="w-3 h-3 bg-[#ffaa00] rounded-full animate-pulse"></div>';
          case 'inactive': default: return '<div class="w-3 h-3 bg-[#888888] rounded-full"></div>';
        }
      }
      
      function getButtonForStatus(crm) {
          let text = 'Konfiguruj';
          let style = 'bg-[#00ffff] text-[#0a0a0a]';
          if (crm.status === 'active') {
              text = 'Dezaktywuj';
              style = 'bg-red-500 text-white';
          } else if (crm.status === 'pending') {
              text = 'Aktywuj';
              style = 'bg-yellow-500 text-black';
          }
          return `<button data-crm-id="${crm.id}" class="crm-action-btn mt-4 w-full py-2 px-4 text-sm font-bold hover:brightness-125 transition-all duration-300 font-mono uppercase ${style}">${text}</button>`;
      }

      function renderPlatforms(integrations) {
        if (!platformsContainer) return;
        platformsContainer.innerHTML = integrations.map(crm => `
          <div class="bg-gradient-to-br from-[#1a1a1a] to-[#111111] border border-[#333333] p-6 rounded-sm hover:border-[#00ffff] transition-all duration-300">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-[#ff6699] font-mono text-lg uppercase">${crm.name}</h4>
              ${getStatusIndicator(crm.status)}
            </div>
            <p class="text-[#a0a0a0] text-sm mb-4">${crm.description}</p>
            <div class="space-y-2">
              ${Object.entries(crm.features).map(([key, value]) => `
                <div class="flex justify-between text-xs">
                  <span class="text-[#00ffff]">${key}:</span>
                  <span class="text-[#e0e0e0]">${value}</span>
                </div>
              `).join('')}
            </div>
            ${getButtonForStatus(crm)}
          </div>
        `).join('');
      }

      function renderSyncDashboard(stats, activity) {
        if (!syncDashboardContainer) return;
        syncDashboardContainer.innerHTML = `
          <div class="bg-[#111111] border border-[#333333] p-6 rounded-sm">
            <h4 class="text-[#ff6699] font-mono text-lg uppercase mb-4">Statystyki 24h</h4>
            <div class="grid grid-cols-2 gap-4">
              <div><div class="text-[#00ffff] text-2xl font-bold">${stats.syncedRecords}</div><div class="text-[#a0a0a0] text-sm">Records synced</div></div>
              <div><div class="text-[#00ffff] text-2xl font-bold">${stats.avgSyncTime}</div><div class="text-[#a0a0a0] text-sm">Avg sync time</div></div>
              <div><div class="text-[#ff3333] text-2xl font-bold">${stats.failedSyncs}</div><div class="text-[#a0a0a0] text-sm">Failed syncs</div></div>
              <div><div class="text-[#00ffff] text-2xl font-bold">${stats.successRate}</div><div class="text-[#a0a0a0] text-sm">Success rate</div></div>
            </div>
          </div>
          <div class="bg-[#111111] border border-[#333333] p-6 rounded-sm">
            <h4 class="text-[#ff6699] font-mono text-lg uppercase mb-4">Ostatnia Aktywno≈õƒá</h4>
            <div class="space-y-3">
              ${activity.map(act => `
                <div class="flex justify-between items-center text-sm">
                  <span class="text-[#e0e0e0]">${act.text}</span>
                  <span class="${act.status === 'success' ? 'text-[#00ff00]' : 'text-[#ff3333]'}">${act.status === 'success' ? '‚úì' : '‚úó'} ${act.time}</span>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      async function fetchData() {
        try {
          if (syncStatusEl) syncStatusEl.textContent = 'POBIERANIE...';
          // Zmieniono URL na nowe, skonsolidowane API
          const response = await fetch('/api/crm-action');
          if (!response.ok) throw new Error(`B≈ÇƒÖd serwera: ${response.status}`);
          
          const data = await response.json();
          if (data.success) {
            renderPlatforms(data.data.integrations);
            renderSyncDashboard(data.data.stats, data.data.activity);
            if (syncStatusEl) syncStatusEl.textContent = 'REAL-TIME';
          } else {
            throw new Error(data.error || 'Nieznany b≈ÇƒÖd API');
          }
        } catch (err) {
          if (platformsContainer) platformsContainer.innerHTML = `<div class="text-red-500 col-span-3 py-10">B≈ÇƒÖd ≈Çadowania danych: ${err.message}</div>`;
          if (syncDashboardContainer) syncDashboardContainer.innerHTML = `<div class="text-red-500 col-span-2 py-10">B≈ÇƒÖd ≈Çadowania statystyk.</div>`;
          if (syncStatusEl) syncStatusEl.textContent = 'ERROR';
        }
      }

      // Event listener dla przycisk√≥w akcji
      platformsContainer.addEventListener('click', async (e) => {
        const button = e.target.closest('.crm-action-btn');
        if (!button) return;

        const crmId = button.dataset.crmId;
        if (!crmId) return;

        button.disabled = true;
        button.textContent = 'Zmieniam...';

        try {
            const response = await fetch('/api/crm-action', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ crmId, action: 'toggle' })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'B≈ÇƒÖd zmiany statusu');
            }
            
            // Od≈õwie≈º dane po pomy≈õlnej zmianie
            await fetchData();

        } catch (err) {
            alert(`B≈ÇƒÖd: ${err.message}`);
            // Przywr√≥ƒá przycisk do stanu poczƒÖtkowego w razie b≈Çƒôdu
            fetchData(); 
        }
      });

      fetchData();
    });
  </script>
</MyBonzoLayout>
