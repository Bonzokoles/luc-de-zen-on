---
import MyBonzoLayout from "../../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../../components/DecorativeLines.astro";
---

<MyBonzoLayout siteTitle="Reminders & Calendar AI | KAROL LISSON">
  <DecorativeLines />

  <main class="min-h-svh relative z-10">
    <div class="fixed inset-0 bg-[#0a0a0a]">
      <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/20 via-black to-black"></div>
      <div class="cyber-grid absolute inset-0"></div>
    </div>

    <section class="relative z-20 border-b border-[#333333] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-4xl md:text-5xl font-bold text-[#00ffff] mb-2 uppercase tracking-wider font-mono">
              Smart Calendar AI
            </h1>
            <p class="text-[#a0a0a0] text-lg font-['Kenyan_Coffee']">
              Inteligentne przypomnienia i zarzƒÖdzanie kalendarzem z AI automation
            </p>
          </div>
          <div class="text-right text-sm text-[#a0a0a0] font-mono">
            <div class="mb-1">
              STATUS: <span id="sync-status" class="text-[#00ffff]">INITIALIZING</span>
            </div>
            <div>EVENTS: <span id="events-count" class="text-[#ff6699] animate-pulse">...</span></div>
          </div>
        </div>
        <div class="flex gap-4 mb-8">
          <a href="/" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> ‚Üê Powr√≥t do g≈Ç√≥wnej </a>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-12">
      <div class="max-w-6xl mx-auto px-4">
        <div class="grid lg:grid-cols-4 gap-6">
          <div id="schedule-container" class="lg:col-span-2 bg-[#111111] border border-[#333333] p-6 rounded-sm">
            <div class="flex justify-between items-center mb-4">
              <h4 class="text-[#ff6699] font-mono text-lg uppercase">Today's Schedule</h4>
              <div id="current-time" class="text-[#00ffff] text-sm"></div>
            </div>
            <div id="schedule-content" class="space-y-4">
                <p class="text-gray-500">≈Åadowanie harmonogramu...</p>
            </div>
          </div>

          <div class="lg:col-span-2 space-y-6">
            <div id="reminders-container" class="bg-[#111111] border border-[#333333] p-4 rounded-sm">
              <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-3">üß† AI Reminders</h4>
              <div id="reminders-content" class="space-y-3">
                <p class="text-gray-500">Analizujƒô harmonogram...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-8 border-t border-[#333333]">
      <div class="max-w-6xl mx-auto px-4">
        <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-6">üîÑ Calendar Sync Status</h3>
        <div id="sync-container" class="grid md:grid-cols-4 gap-4">
            <p class="text-gray-500 col-span-4">Pobieranie statusu synchronizacji...</p>
        </div>
      </div>
    </section>
  </main>

  <style>
    .cyber-grid { background-image: linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px); background-size: 20px 20px; }
    .event-item, .reminder-item, .sync-item { animation: fadeIn 0.5s ease-out; }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
        const scheduleContent = document.getElementById('schedule-content');
        const remindersContent = document.getElementById('reminders-content');
        const syncContainer = document.getElementById('sync-container');
        const currentTimeEl = document.getElementById('current-time');
        const syncStatusEl = document.getElementById('sync-status');
        const eventsCountEl = document.getElementById('events-count');

        function formatTime(date) {
            return date.toLocaleTimeString('pl-PL', { hour: '2-digit', minute: '2-digit' });
        }

        function renderSchedule(events) {
            const now = new Date();
            scheduleContent.innerHTML = events.map(event => {
                const startTime = new Date(event.startTime);
                const endTime = new Date(event.endTime);
                const isLive = now >= startTime && now <= endTime;
                const isUpcoming = startTime > now;
                const timeToEvent = Math.round((startTime.getTime() - now.getTime()) / (1000 * 60));

                let statusClass = 'border-l-[#333333]';
                let timeText = ``;
                if (isLive) {
                    statusClass = 'border-l-[#00ff00]';
                    const remaining = Math.round((endTime.getTime() - now.getTime()) / (1000 * 60));
                    timeText = `<div class="text-[#00ff00] text-xs">${remaining} min remaining</div>`;
                } else if (isUpcoming) {
                    statusClass = 'border-l-[#ffaa00]';
                    timeText = `<div class="text-[#ffaa00] text-xs">in ${timeToEvent} min</div>`;
                }

                return `
                    <div class="event-item bg-[#0a0a0a] border-l-4 ${statusClass} p-4 rounded-sm">
                        <div class="flex justify-between items-start mb-2">
                            <div class="text-sm font-bold ${isLive ? 'text-[#00ff00]' : isUpcoming ? 'text-[#ffaa00]' : 'text-[#e0e0e0]'}">${event.title}</div>
                            <div class="text-[#00ffff] text-xs">${formatTime(startTime)} - ${formatTime(endTime)}</div>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="text-[#a0a0a0] text-xs">${event.location}</div>
                            ${timeText}
                        </div>
                    </div>
                `;
            }).join('');
        }

        function renderReminders(reminders) {
            if (reminders.length === 0) {
                remindersContent.innerHTML = '<p class="text-gray-500 text-sm">Brak inteligentnych przypomnie≈Ñ w tym momencie.</p>';
                return;
            }
            const reminderStyles = {
                high: 'border-l-[#ff3333]',
                info: 'border-l-[#00ffff]',
                low: 'border-l-[#00ff00]'
            };
            remindersContent.innerHTML = reminders.map(r => `
                <div class="reminder-item bg-[#0a0a0a] border-l-4 ${reminderStyles[r.type] || 'border-l-gray-500'} p-3 rounded-sm">
                    <div class="text-[#e0e0e0] text-sm">${r.text}</div>
                </div>
            `).join('');
        }

        function renderSyncStatus(syncStatus) {
            const statusMap = {
                synced: { text: 'Synced', color: 'bg-[#00ff00]' },
                pending: { text: 'Pending', color: 'bg-[#ffaa00]' },
                error: { text: 'Error', color: 'bg-[#ff3333]' },
            };
            syncContainer.innerHTML = Object.entries(syncStatus).map(([key, value]) => `
                <div class="sync-item bg-[#111111] border border-[#333333] p-4 rounded-sm">
                    <div class="flex items-center justify-between mb-2">
                        <div class="text-[#e0e0e0] font-bold text-sm capitalize">${key}</div>
                        <div class="w-3 h-3 ${statusMap[value]?.color || 'bg-gray-500'} rounded-full animate-pulse"></div>
                    </div>
                    <div class="text-[#a0a0a0] text-xs">Last sync: ${Math.floor(Math.random() * 10) + 1} min ago</div>
                    <div class="text-[#00ffff] text-xs">${Math.floor(Math.random() * 200)} events synced</div>
                </div>
            `).join('');
        }

        function updateTime() {
            if (currentTimeEl) {
                currentTimeEl.textContent = formatTime(new Date());
            }
        }

        async function fetchData() {
            try {
                if (syncStatusEl) syncStatusEl.textContent = 'SYNCING...';
                const response = await fetch('/api/calendar-events');
                if (!response.ok) throw new Error(`B≈ÇƒÖd serwera: ${response.status}`);
                
                const data = await response.json();
                if (data.success) {
                    const { events, reminders, syncStatus } = data.data;
                    renderSchedule(events);
                    renderReminders(reminders);
                    renderSyncStatus(syncStatus);
                    if (syncStatusEl) syncStatusEl.textContent = 'SYNCED';
                    if (eventsCountEl) eventsCountEl.textContent = `${events.length} today`;
                } else {
                    throw new Error(data.error || 'Nieznany b≈ÇƒÖd API');
                }
            } catch (err) {
                if (scheduleContent) scheduleContent.innerHTML = `<p class="text-red-500">B≈ÇƒÖd ≈Çadowania danych: ${err.message}</p>`;
                if (syncStatusEl) syncStatusEl.textContent = 'ERROR';
            }
        }

        updateTime();
        fetchData();
        setInterval(updateTime, 1000); // Update time every second
        setInterval(fetchData, 60000); // Refresh calendar data every minute
    });
  </script>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm">ü§ñ POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Inteligentny Kalendarz AI" />
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const polaczekBtn = document.getElementById('polaczekBtn');
      const polaczekWidget = document.getElementById('polaczekWidget');

      if (polaczekBtn && polaczekWidget) {
        polaczekBtn.addEventListener('click', () => {
          polaczekWidget.classList.toggle('hidden');
        });
      }
    });
  </script>
</MyBonzoLayout>
