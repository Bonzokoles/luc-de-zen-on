---
import MyBonzoLayout from "../../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../../components/DecorativeLines.astro";
---

<MyBonzoLayout siteTitle="Personalized Recommendations AI | KAROL LISSON">
  <DecorativeLines />

  <main class="min-h-svh relative z-10">
    <!-- Background Grid Pattern -->
    <div class="fixed inset-0 bg-[#0a0a0a]">
      <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/20 via-black to-black"></div>
      <div class="cyber-grid absolute inset-0"></div>
    </div>

    <!-- Header Section -->
    <section class="relative z-20 border-b border-[#333333] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-4xl md:text-5xl font-bold text-[#00ffff] mb-2 uppercase tracking-wider font-mono">
              Recommendations AI
            </h1>
            <p class="text-[#a0a0a0] text-lg font-['Kenyan_Coffee']">
              Spersonalizowane rekomendacje oparte na AI - produkty, tre≈õci, us≈Çugi
            </p>
          </div>
          <div class="text-right text-sm text-[#a0a0a0] font-mono">
            <div class="mb-1">
              STATUS: <span id="system-status" class="text-[#00ffff]">INITIALIZING</span>
            </div>
            <div>ACCURACY: <span id="accuracy-rate" class="text-[#ff6699] animate-pulse">94.7%</span></div>
          </div>
        </div>

        <!-- Navigation -->
        <div class="flex gap-4 mb-8">
          <a
            href="/"
            class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"
          >
            ‚Üê Powr√≥t do g≈Ç√≥wnej
          </a>
        </div>
      </div>
    </section>

    <!-- Live Recommendations Demo -->
    <section class="relative z-20 py-8 border-t border-[#333333]">
      <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide">
              üéØ Live Recommendations Engine
            </h3>
            <div class="w-1/3">
                <label for="user-select" class="block text-sm font-medium text-gray-300 mb-1">Wybierz profil u≈ºytkownika:</label>
                <select id="user-select" class="w-full p-2 bg-[#111111] border border-[#333333] text-white rounded-sm focus:border-[#00ffff] focus:ring-[#00ffff]"></select>
            </div>
        </div>
        
        <div id="loading-state" class="text-center py-10 text-cyan-400 hidden">≈Åadowanie rekomendacji...</div>
        <div id="error-state" class="text-center py-10 text-red-500 hidden"></div>

        <div id="recommendation-dashboard" class="grid lg:grid-cols-4 gap-6">
          <!-- User Profile (Dynamic) -->
          <div id="user-profile-container" class="bg-[#111111] border border-[#333333] p-4 rounded-sm"></div>

          <!-- Recommended Products (Dynamic) -->
          <div id="recommendations-container" class="lg:col-span-2 bg-[#111111] border border-[#333333] p-4 rounded-sm"></div>

          <!-- Algorithm Insights (Dynamic) -->
          <div id="insights-container" class="bg-[#111111] border border-[#333333] p-4 rounded-sm"></div>
        </div>
      </div>
    </section>

  </main>

  <style>
    .cyber-grid {
      background-image: 
        linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
      background-size: 20px 20px;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const userSelect = document.getElementById('user-select') as HTMLSelectElement;
      const userProfileContainer = document.getElementById('user-profile-container');
      const recommendationsContainer = document.getElementById('recommendations-container');
      const insightsContainer = document.getElementById('insights-container');
      const loadingState = document.getElementById('loading-state');
      const errorState = document.getElementById('error-state');
      const dashboard = document.getElementById('recommendation-dashboard');
      const statusEl = document.getElementById('system-status');

      // --- HTML Template Functions ---

      function renderUserProfile(profile) {
        if (!userProfileContainer) return;
        userProfileContainer.innerHTML = `
          <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-3">üë§ Aktywny U≈ºytkownik</h4>
          <div class="space-y-2 text-xs">
            <div class="flex justify-between">
              <span class="text-[#a0a0a0]">User ID:</span>
              <span class="text-[#00ffff]">${profile.id}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-[#a0a0a0]">Segment:</span>
              <span class="text-[#ff6699]">${profile.segment}</span>
            </div>
          </div>
          <div class="mt-4 pt-3 border-t border-[#333333]">
            <div class="text-[#ff6699] text-xs font-bold mb-2">Zainteresowania:</div>
            <div class="flex flex-wrap gap-1">
              ${profile.interests.map(interest => `<span class="bg-[#333333] text-[#00ffff] px-2 py-1 text-xs rounded">${interest}</span>`).join('')}
            </div>
          </div>
           <div class="mt-4 pt-3 border-t border-[#333333]">
            <div class="text-[#ff6699] text-xs font-bold mb-2">Ostatnia Aktywno≈õƒá:</div>
            <div class="text-[#a0a0a0] text-xs space-y-1">
              ${profile.recentActivity.map(activity => `<div>- ${activity}</div>`).join('')}
            </div>
          </div>
        `;
      }

      function renderRecommendations(recommendations) {
        if (!recommendationsContainer) return;
        if (!recommendations || recommendations.length === 0) {
            recommendationsContainer.innerHTML = '<h4 class="text-[#ff6699] font-mono text-sm uppercase mb-4">üéØ AI Recommendations</h4><p class="text-gray-400">AI nie wygenerowa≈Ço rekomendacji.</p>';
            return;
        }

        recommendationsContainer.innerHTML = `
          <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-4">üéØ AI Recommendations</h4>
          <div class="space-y-3">
            ${recommendations.map(rec => `
              <div class="bg-[#0a0a0a] border border-[#333333] p-3 rounded-sm hover:border-[#00ffff] transition-all duration-300">
                <div class="flex justify-between items-start mb-2">
                  <div class="text-[#e0e0e0] text-sm font-bold">${rec.name}</div>
                  <div class="text-[#00ff00] text-xs">${Math.floor(Math.random() * 10) + 90}% match</div>
                </div>
                <div class="text-[#a0a0a0] text-xs mb-2">
                  ${rec.description}
                </div>
                <div class="mt-2 pt-2 border-t border-gray-700 text-cyan-300 text-xs italic">
                  <strong>Pow√≥d:</strong> ${rec.reason}
                </div>
              </div>
            `).join('')}
          </div>
        `;
      }

      function renderInsights() {
          if (!insightsContainer) return;
          insightsContainer.innerHTML = `
            <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-3">üß† AI Insights</h4>
            <div class="space-y-3 text-xs">
              <div class="bg-[#0a0a0a] border border-[#333333] p-2 rounded-sm">
                <div class="text-[#00ffff] mb-1">Collaborative Filtering</div>
                <div class="text-[#a0a0a0]">U≈ºytkownicy o podobnym profilu r√≥wnie≈º byli zainteresowani tymi produktami.</div>
              </div>
              <div class="bg-[#0a0a0a] border border-[#333333] p-2 rounded-sm">
                <div class="text-[#00ffff] mb-1">Content-Based</div>
                <div class="text-[#a0a0a0]">Rekomendacje bazujƒÖ na Twoich zainteresowaniach technologicznych.</div>
              </div>
            </div>
             <div class="mt-4 pt-3 border-t border-[#333333]">
              <div class="text-[#ff6699] text-xs font-bold mb-2">Model Performance:</div>
              <div class="space-y-1 text-xs">
                <div class="flex justify-between"><span class="text-[#a0a0a0]">Precision:</span><span class="text-[#00ff00]">94.7%</span></div>
                <div class="flex justify-between"><span class="text-[#a0a0a0]">Recall:</span><span class="text-[#00ff00]">89.3%</span></div>
              </div>
            </div>
          `;
      }

      function showLoading(isLoading) {
        loadingState.style.display = isLoading ? 'block' : 'none';
        dashboard.style.display = isLoading ? 'none' : 'grid';
        errorState.style.display = 'none';
      }

      function showError(message) {
        loadingState.style.display = 'none';
        dashboard.style.display = 'none';
        errorState.style.display = 'block';
        errorState.textContent = message;
        if(statusEl) statusEl.textContent = 'ERROR';
        if(statusEl) statusEl.classList.add('text-red-500');
      }

      // --- API Functions ---

      async function fetchRecommendations(userId) {
        showLoading(true);
        if(statusEl) statusEl.textContent = 'LOADING';

        try {
          const response = await fetch(`/api/recommendations?userId=${userId}`);
          if (!response.ok) {
            throw new Error(`B≈ÇƒÖd serwera: ${response.status}`);
          }
          const data = await response.json();
          if (data.success) {
            renderUserProfile(data.data.userProfile);
            renderRecommendations(data.data.recommendations);
            renderInsights();
            if(statusEl) statusEl.textContent = 'ONLINE';
            if(statusEl) statusEl.classList.remove('text-red-500');
          } else {
            throw new Error(data.error || 'Nieznany b≈ÇƒÖd API');
          }
        } catch (err) {
          showError(err.message);
        } finally {
          showLoading(false);
        }
      }

      async function initializePage() {
        try {
          if(statusEl) statusEl.textContent = 'CONNECTING';
          const response = await fetch('/api/recommendations');
          const data = await response.json();

          if (data.success && data.data.availableUsers) {
            const users = data.data.availableUsers;
            userSelect.innerHTML = users.map(user => `<option value="${user.id}">${user.name}</option>`).join('');
            
            userSelect.addEventListener('change', () => {
              fetchRecommendations(userSelect.value);
            });

            // Fetch initial recommendations for the first user
            if (users.length > 0) {
              fetchRecommendations(users[0].id);
            }
          } else {
             throw new Error(data.error || 'Nie uda≈Ço siƒô za≈Çadowaƒá listy u≈ºytkownik√≥w');
          }
        } catch (err) {
            showError(err.message);
        }
      }

      // --- Initial Load ---
      initializePage();
    });
  </script>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm">ü§ñ POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Spersonalizowane Rekomendacje AI" />
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const polaczekBtn = document.getElementById('polaczekBtn');
      const polaczekWidget = document.getElementById('polaczekWidget');

      if (polaczekBtn && polaczekWidget) {
        polaczekBtn.addEventListener('click', () => {
          polaczekWidget.classList.toggle('hidden');
        });
      }
    });
  </script>
</MyBonzoLayout>
