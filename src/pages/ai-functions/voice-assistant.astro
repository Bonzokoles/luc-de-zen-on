---
import MyBonzoLayout from '../../layouts/MyBonzoLayout.astro';
---

<MyBonzoLayout title="Voice AI Assistant - MyBonzo">
  <main class="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white relative overflow-hidden">
    <!-- Enhanced Animated Background -->
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(0,191,255,0.15)_0%,transparent_60%)]"></div>
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_70%_80%,rgba(138,43,226,0.15)_0%,transparent_60%)]"></div>
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(34,197,94,0.08)_0%,transparent_70%)]"></div>
      
      <!-- Floating Particles Animation -->
      <div class="absolute inset-0 overflow-hidden">
        <div class="absolute w-2 h-2 bg-cyan-400/30 rounded-full animate-float-slow" style="top: 20%; left: 10%;"></div>
        <div class="absolute w-3 h-3 bg-purple-400/20 rounded-full animate-float-medium" style="top: 60%; left: 80%;"></div>
        <div class="absolute w-1 h-1 bg-green-400/40 rounded-full animate-float-fast" style="top: 80%; left: 20%;"></div>
        <div class="absolute w-2 h-2 bg-blue-400/25 rounded-full animate-float-slow" style="top: 30%; left: 70%;"></div>
        <div class="absolute w-1 h-1 bg-cyan-400/35 rounded-full animate-float-medium" style="top: 70%; left: 40%;"></div>
      </div>
    </div>

    <div class="relative z-10 container mx-auto px-4 py-8">
      <!-- Premium Header with Animation -->
      <div class="text-center mb-12">
        <div class="inline-flex items-center gap-4 mb-8 group">
          <div class="relative">
            <div class="w-20 h-20 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-3xl flex items-center justify-center shadow-2xl transform group-hover:scale-105 transition-all duration-300">
              <span class="text-3xl animate-pulse">🎤</span>
            </div>
            <div class="absolute -inset-1 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-3xl blur opacity-20 group-hover:opacity-40 transition-opacity duration-300"></div>
          </div>
          <div class="text-left">
            <h1 class="text-5xl font-black bg-gradient-to-r from-cyan-300 via-blue-300 to-purple-300 bg-clip-text text-transparent mb-2 tracking-tight">
              Voice AI Assistant
            </h1>
            <div class="flex items-center gap-3 mb-1">
              <span class="px-3 py-1 bg-cyan-500/20 text-cyan-300 text-xs font-bold rounded-full border border-cyan-500/30">XTTS-v2</span>
              <span class="px-3 py-1 bg-purple-500/20 text-purple-300 text-xs font-bold rounded-full border border-purple-500/30">Voice Cloning</span>
              <span class="px-3 py-1 bg-blue-500/20 text-blue-300 text-xs font-bold rounded-full border border-blue-500/30">Audio Processing</span>
            </div>
            <p class="text-gray-400 text-sm">Powered by Hugging Face & Coqui TTS</p>
          </div>
        </div>
        <div class="bg-gray-900/30 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/50 max-w-3xl mx-auto">
          <p class="text-xl text-gray-200 leading-relaxed">
            🚀 <strong class="text-cyan-400">Najnowocześniejsza synteza mowy</strong> z klonowaniem głosu z 6-sekundowych próbek,
            <strong class="text-purple-400">10-pasmowym equalizerem</strong> i zaawansowanymi efektami audio
          </p>
        </div>
      </div>

      <!-- Premium Voice Interface -->
      <div class="max-w-7xl mx-auto mb-12">
        <div class="relative bg-gradient-to-br from-gray-900/60 via-gray-800/50 to-gray-900/60 backdrop-blur-2xl rounded-3xl border border-cyan-500/30 p-8 shadow-2xl hover:shadow-cyan-500/10 transition-all duration-500">
          <!-- Glowing border effect -->
          <div class="absolute -inset-0.5 bg-gradient-to-r from-cyan-500/20 via-blue-500/20 to-purple-500/20 rounded-3xl blur-sm opacity-50"></div>
          <div class="relative">
          <!-- Voice Control Panel -->
          <div class="grid md:grid-cols-2 gap-8 mb-8">
            <!-- Premium Text to Speech Section -->
            <div class="space-y-6 bg-gradient-to-br from-green-900/20 to-emerald-900/20 rounded-2xl p-6 border border-green-500/20">
              <div class="flex items-center gap-3 mb-6">
                <div class="relative">
                  <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center shadow-lg">
                    <span class="text-white text-lg">🗣️</span>
                  </div>
                  <div class="absolute -inset-1 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl blur opacity-20"></div>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-white">Text-to-Speech XTTS-v2</h3>
                  <p class="text-green-400 text-sm">Neural Voice Synthesis</p>
                </div>
              </div>

              <!-- Premium Text Input -->
              <div class="space-y-4">
                <label class="flex items-center gap-2 text-sm font-semibold text-gray-200">
                  <span class="text-green-400">✨</span>
                  Tekst do syntezy
                  <span class="px-2 py-0.5 bg-green-500/20 text-green-300 text-xs rounded-full">AI Ready</span>
                </label>
                <div class="relative">
                  <textarea
                    id="speechText"
                    placeholder="Wprowadź tekst do zamiany na mowę... np. 'Witaj w świecie sztucznej inteligencji!'"
                    rows="5"
                    class="w-full bg-gray-800/80 border border-gray-600/50 rounded-2xl px-5 py-4 text-white placeholder-gray-400 focus:border-green-500 focus:ring-2 focus:ring-green-500/30 transition-all resize-none shadow-inner backdrop-blur-sm"
                  ></textarea>
                  <div class="absolute bottom-3 right-3 text-xs text-gray-500" id="charCount">0 / 1000</div>
                </div>
              </div>

              <!-- Voice Selection -->
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">Głos</label>
                  <select id="voiceSelect" class="w-full bg-gray-800/70 border border-gray-600 rounded-xl px-3 py-2 text-white focus:border-cyan-500">
                    <option value="pl-zofia-premium">🇵🇱 Zofia Premium</option>
                    <option value="pl-marek-natural">🇵🇱 Marek Naturalny</option>
                    <option value="pl-anna-narrator">🇵🇱 Anna Narrator</option>
                    <option value="en-sarah-professional">🇺🇸 Sarah Professional</option>
                    <option value="celebrity-demo-1">⭐ Celebrity Demo</option>
                  </select>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">Język</label>
                  <select id="languageSelect" class="w-full bg-gray-800/70 border border-gray-600 rounded-xl px-3 py-2 text-white focus:border-cyan-500">
                    <option value="pl">🇵🇱 Polski</option>
                    <option value="en">🇺🇸 English</option>
                    <option value="de">🇩🇪 Deutsch</option>
                    <option value="fr">🇫🇷 Français</option>
                    <option value="es">🇪🇸 Español</option>
                  </select>
                </div>
              </div>

              <!-- Speed and Temperature Controls -->
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">Prędkość: <span id="speedValue">1.0</span></label>
                  <input 
                    type="range" 
                    id="speedSlider" 
                    min="0.5" 
                    max="2.0" 
                    step="0.1" 
                    value="1.0"
                    class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                  >
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">Emocje: <span id="temperatureValue">0.75</span></label>
                  <input 
                    type="range" 
                    id="temperatureSlider" 
                    min="0.1" 
                    max="1.0" 
                    step="0.05" 
                    value="0.75"
                    class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                  >
                </div>
              </div>

              <!-- Voice Cloning Section -->
              <div class="border-t border-gray-700 pt-4">
                <div class="flex items-center gap-2 mb-3">
                  <span class="text-purple-400">🎭</span>
                  <span class="text-sm font-medium text-purple-400">Voice Cloning (6s sample)</span>
                </div>
                <div class="flex gap-3">
                  <input 
                    type="file" 
                    id="voiceSample" 
                    accept="audio/*"
                    class="flex-1 bg-gray-800/70 border border-gray-600 rounded-xl px-3 py-2 text-white text-sm file:mr-3 file:py-1 file:px-3 file:rounded-lg file:border-0 file:bg-purple-500 file:text-white file:cursor-pointer"
                  >
                  <button 
                    id="uploadSampleBtn"
                    class="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-xl text-white text-sm font-medium transition-all"
                  >
                    Upload
                  </button>
                </div>
              </div>

              <!-- Premium Generate Button -->
              <button 
                id="generateSpeechBtn"
                class="relative w-full bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 hover:from-green-600 hover:via-emerald-600 hover:to-green-700 text-white font-bold py-5 px-8 rounded-2xl transition-all duration-300 shadow-xl hover:shadow-2xl hover:shadow-green-500/25 transform hover:scale-[1.02] group overflow-hidden"
              >
                <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700"></div>
                <span class="relative flex items-center justify-center gap-3">
                  <span class="text-xl group-hover:animate-pulse">🎤</span>
                  <span class="text-lg font-black tracking-wide">Generuj Mowę AI</span>
                  <span class="text-sm opacity-80">XTTS-v2</span>
                </span>
              </button>
            </div>

            <!-- Premium Audio Equalizer Section -->
            <div class="space-y-6 bg-gradient-to-br from-blue-900/20 to-purple-900/20 rounded-2xl p-6 border border-blue-500/20">
              <div class="flex items-center gap-3 mb-6">
                <div class="relative">
                  <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                    <span class="text-white text-lg">🎛️</span>
                  </div>
                  <div class="absolute -inset-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl blur opacity-20"></div>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-white">Audio Equalizer</h3>
                  <p class="text-blue-400 text-sm">10-Band Professional EQ</p>
                </div>
              </div>

              <!-- Equalizer Presets -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Presety equalizera</label>
                <select id="eqPreset" class="w-full bg-gray-800/70 border border-gray-600 rounded-xl px-3 py-2 text-white focus:border-cyan-500">
                  <option value="flat">🎵 Flat/Natural</option>
                  <option value="speech">🗣️ Speech Enhancement</option>
                  <option value="podcast">🎙️ Podcast Pro</option>
                  <option value="radio">📻 Radio Voice</option>
                  <option value="warm">🔥 Warm & Smooth</option>
                  <option value="bright">✨ Bright & Clear</option>
                  <option value="deep">🔊 Deep Bass</option>
                </select>
              </div>

              <!-- Equalizer Bands -->
              <div class="grid grid-cols-2 gap-3">
                <div class="space-y-2" id="eqBands1">
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">32Hz</label>
                    <input type="range" class="eq-slider" data-band="32Hz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">64Hz</label>
                    <input type="range" class="eq-slider" data-band="64Hz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">125Hz</label>
                    <input type="range" class="eq-slider" data-band="125Hz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">250Hz</label>
                    <input type="range" class="eq-slider" data-band="250Hz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">500Hz</label>
                    <input type="range" class="eq-slider" data-band="500Hz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                </div>
                <div class="space-y-2" id="eqBands2">
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">1kHz</label>
                    <input type="range" class="eq-slider" data-band="1kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">2kHz</label>
                    <input type="range" class="eq-slider" data-band="2kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">4kHz</label>
                    <input type="range" class="eq-slider" data-band="4kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">8kHz</label>
                    <input type="range" class="eq-slider" data-band="8kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">16kHz</label>
                    <input type="range" class="eq-slider" data-band="16kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                </div>
              </div>

              <!-- Audio Effects -->
              <div class="grid grid-cols-3 gap-3">
                <div>
                  <label class="block text-xs text-gray-400 mb-1">Kompresja</label>
                  <input type="range" id="compressionSlider" min="0" max="10" value="0" 
                    class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider">
                  <div class="text-center text-xs text-gray-400" id="compressionValue">0%</div>
                </div>
                <div>
                  <label class="block text-xs text-gray-400 mb-1">Reverb</label>
                  <input type="range" id="reverbSlider" min="0" max="10" value="0" 
                    class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider">
                  <div class="text-center text-xs text-gray-400" id="reverbValue">0%</div>
                </div>
                <div>
                  <label class="block text-xs text-gray-400 mb-1">Redukcja szumu</label>
                  <input type="range" id="noiseReductionSlider" min="0" max="10" value="0" 
                    class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider">
                  <div class="text-center text-xs text-gray-400" id="noiseReductionValue">0%</div>
                </div>
              </div>

              <!-- Apply Equalizer Button -->
              <button 
                id="applyEqualizerBtn"
                class="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300"
              >
                <span class="flex items-center justify-center gap-2">
                  <span>🎛️</span>
                  <span>Zastosuj Equalizer</span>
                </span>
              </button>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">2kHz</label>
                    <input type="range" class="eq-slider" data-band="2kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">4kHz</label>
                    <input type="range" class="eq-slider" data-band="4kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">8kHz</label>
                    <input type="range" class="eq-slider" data-band="8kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                  <div class="eq-band">
                    <label class="text-xs text-gray-400">16kHz</label>
                    <input type="range" class="eq-slider" data-band="16kHz" min="-12" max="12" value="0">
                    <span class="eq-value">0dB</span>
                  </div>
                </div>
              </div>

              <!-- Audio Effects -->
              <div class="space-y-3">
                <div class="flex items-center gap-3">
                  <input type="checkbox" id="compressionEnabled" class="w-4 h-4 text-cyan-500 rounded">
                  <label class="text-sm text-gray-300">🔧 Kompresja audio</label>
                </div>
                <div class="flex items-center gap-3">
                  <input type="checkbox" id="reverbEnabled" class="w-4 h-4 text-cyan-500 rounded">
                  <label class="text-sm text-gray-300">🌊 Reverb</label>
                </div>
                <div class="flex items-center gap-3">
                  <input type="checkbox" id="noiseReductionEnabled" class="w-4 h-4 text-cyan-500 rounded">
                  <label class="text-sm text-gray-300">🔇 Redukcja szumów</label>
                </div>
              </div>
            </div>
          </div>

          <!-- Audio Player and Waveform -->
          <div class="border-t border-gray-700 pt-8">
            <div class="flex items-center gap-3 mb-4">
              <div class="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                <span class="text-white text-sm">🎵</span>
              </div>
              <h3 class="text-xl font-bold text-white">Audio Player & Waveform</h3>
            </div>

            <!-- Audio Player -->
            <div class="bg-gradient-to-br from-gray-800/60 to-gray-900/60 backdrop-blur-lg rounded-2xl p-6 mb-6 border border-cyan-500/20 glow-on-hover">
              <audio id="audioPlayer" controls class="w-full mb-4" style="display: none;">
                Twoja przeglądarka nie obsługuje odtwarzacza audio.
              </audio>
              
              <!-- Custom Audio Controls -->
              <div class="flex items-center gap-4 mb-6 p-4 bg-black/30 rounded-xl border border-gray-700/30">
                <button id="playPauseBtn" class="group w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full flex items-center justify-center text-white hover:scale-110 transition-all duration-300 shadow-lg hover:shadow-cyan-500/25 relative overflow-hidden">
                  <span class="text-xl relative z-10 group-hover:animate-pulse">▶️</span>
                  <div class="absolute inset-0 bg-gradient-to-r from-cyan-400/30 to-blue-400/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </button>
                
                <div class="flex-1 space-y-2">
                  <div class="bg-gray-700/50 rounded-full h-3 relative overflow-hidden shadow-inner">
                    <div id="progressBar" class="bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 h-3 rounded-full transition-all duration-300 relative overflow-hidden" style="width: 0%">
                      <div class="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent animate-pulse"></div>
                    </div>
                  </div>
                  <div class="flex justify-between text-xs text-gray-400">
                    <span>Progress</span>
                    <span id="timeDisplay" class="text-cyan-400 font-mono">0:00 / 0:00</span>
                  </div>
                </div>
                
                <div class="flex items-center gap-3">
                  <div class="text-xs text-gray-400">🔊</div>
                  <input type="range" id="volumeSlider2" min="0" max="100" value="75" class="slider w-20">
                </div>
              </div>

              <!-- Waveform Visualization -->
              <div class="bg-gradient-to-br from-gray-900/80 to-black/80 rounded-xl p-4 border border-gray-700/50 relative overflow-hidden">
                <div class="absolute top-3 left-3 flex items-center gap-2 text-xs text-gray-400 bg-black/50 px-2 py-1 rounded-full">
                  <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span>Live Waveform</span>
                </div>
                <canvas id="waveformCanvas" width="800" height="120" class="w-full h-28 rounded-lg shadow-inner"></canvas>
                
                <!-- Waveform overlay effects -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none rounded-xl"></div>
              </div>
            </div>

            <!-- Processing Status -->
            <div id="processingStatus" class="hidden bg-gradient-to-r from-blue-900/40 to-indigo-900/40 backdrop-blur-lg border border-blue-500/40 rounded-xl p-6 shadow-lg">
              <div class="flex items-center gap-4">
                <div class="relative">
                  <div class="w-8 h-8 border-3 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                  <div class="absolute inset-0 w-8 h-8 border-3 border-blue-300/30 rounded-full animate-ping"></div>
                </div>
                <div>
                  <div class="text-blue-400 font-semibold">Przetwarzanie audio</div>
                  <div class="text-blue-300/70 text-sm">Analizowanie i optymalizowanie...</div>
                </div>
              </div>
              <div class="mt-4 bg-blue-900/20 rounded-full h-2 overflow-hidden">
                <div class="bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full animate-pulse" style="width: 100%"></div>
              </div>
            </div>

            <!-- Audio Stats -->
            <div id="audioStats" class="hidden bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-lg rounded-xl p-6 mt-4 border border-gray-700/50">
              <div class="flex items-center gap-3 mb-6">
                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                  <span class="text-white text-sm">📊</span>
                </div>
                <h4 class="text-lg font-bold text-white">Statystyki Audio</h4>
              </div>
              
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="bg-black/30 rounded-lg p-4 border border-gray-700/30 hover:border-cyan-500/30 transition-colors">
                  <div class="text-gray-400 text-xs uppercase tracking-wide mb-1">Czas trwania</div>
                  <div id="statDuration" class="text-cyan-400 text-lg font-bold">--</div>
                </div>
                <div class="bg-black/30 rounded-lg p-4 border border-gray-700/30 hover:border-green-500/30 transition-colors">
                  <div class="text-gray-400 text-xs uppercase tracking-wide mb-1">Próbkowanie</div>
                  <div id="statSampleRate" class="text-green-400 text-lg font-bold">--</div>
                </div>
                <div class="bg-black/30 rounded-lg p-4 border border-gray-700/30 hover:border-orange-500/30 transition-colors">
                  <div class="text-gray-400 text-xs uppercase tracking-wide mb-1">Peak Level</div>
                  <div id="statPeakLevel" class="text-orange-400 text-lg font-bold">--</div>
                </div>
                <div class="bg-black/30 rounded-lg p-4 border border-gray-700/30 hover:border-purple-500/30 transition-colors">
                  <div class="text-gray-400 text-xs uppercase tracking-wide mb-1">RMS Level</div>
                  <div id="statRmsLevel" class="text-purple-400 text-lg font-bold">--</div>
                </div>
              </div>
              
              <!-- Audio Quality Indicators -->
              <div class="mt-6 grid grid-cols-3 gap-4">
                <div class="text-center p-3 bg-black/20 rounded-lg border border-gray-700/30">
                  <div id="qualityIndicator" class="w-4 h-4 bg-green-500 rounded-full mx-auto mb-2 animate-pulse"></div>
                  <div class="text-xs text-gray-400">Quality</div>
                  <div class="text-sm text-green-400 font-medium">Excellent</div>
                </div>
                <div class="text-center p-3 bg-black/20 rounded-lg border border-gray-700/30">
                  <div id="connectionIndicator" class="w-4 h-4 bg-blue-500 rounded-full mx-auto mb-2 animate-pulse"></div>
                  <div class="text-xs text-gray-400">Connection</div>
                  <div class="text-sm text-blue-400 font-medium">Stable</div>
                </div>
                <div class="text-center p-3 bg-black/20 rounded-lg border border-gray-700/30">
                  <div id="latencyIndicator" class="w-4 h-4 bg-cyan-500 rounded-full mx-auto mb-2 animate-pulse"></div>
                  <div class="text-xs text-gray-400">Latency</div>
                  <div class="text-sm text-cyan-400 font-medium">Low</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Features Overview -->
      <div class="grid md:grid-cols-4 gap-6 mb-12">
        <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-md rounded-2xl p-6 border border-green-500/20 hover:border-green-500/40 transition-all duration-300 group hover:scale-105 hover:shadow-xl hover:shadow-green-500/10 animate-float-slow">
          <div class="w-12 h-12 bg-gradient-to-br from-green-500/20 to-green-600/30 rounded-xl flex items-center justify-center mb-4 group-hover:bg-gradient-to-br group-hover:from-green-500/30 group-hover:to-green-600/40 transition-all duration-300 group-hover:animate-pulse">
            <span class="text-2xl">🎤</span>
          </div>
          <h3 class="text-lg font-bold text-green-400 mb-2 group-hover:text-green-300 transition-colors">XTTS-v2 Synthesis</h3>
          <p class="text-gray-300 text-sm">
            Zaawansowana synteza mowy z klonowaniem głosu z 6-sekundowej próbki
          </p>
        </div>
        
        <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-md rounded-2xl p-6 border border-purple-500/20 hover:border-purple-500/40 transition-all duration-300 group hover:scale-105 hover:shadow-xl hover:shadow-purple-500/10 animate-float-medium">
          <div class="w-12 h-12 bg-gradient-to-br from-purple-500/20 to-purple-600/30 rounded-xl flex items-center justify-center mb-4 group-hover:bg-gradient-to-br group-hover:from-purple-500/30 group-hover:to-purple-600/40 transition-all duration-300 group-hover:animate-pulse">
            <span class="text-2xl">🎭</span>
          </div>
          <h3 class="text-lg font-bold text-purple-400 mb-2 group-hover:text-purple-300 transition-colors">Voice Cloning</h3>
          <p class="text-gray-300 text-sm">
            Klonowanie głosu z próbek audio, transfer emocji i stylu mowy
          </p>
        </div>
        
        <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-md rounded-2xl p-6 border border-blue-500/20 hover:border-blue-500/40 transition-all duration-300 group hover:scale-105 hover:shadow-xl hover:shadow-blue-500/10 animate-float-fast">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500/20 to-blue-600/30 rounded-xl flex items-center justify-center mb-4 group-hover:bg-gradient-to-br group-hover:from-blue-500/30 group-hover:to-blue-600/40 transition-all duration-300 group-hover:animate-pulse">
            <span class="text-2xl">🎛️</span>
          </div>
          <h3 class="text-lg font-bold text-blue-400 mb-2 group-hover:text-blue-300 transition-colors">Audio Equalizer</h3>
          <p class="text-gray-300 text-sm group-hover:text-gray-200 transition-colors">
            10-pasmowy equalizer z presetami dla mowy, podcastów i muzyki
          </p>
        </div>
        
        <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-md rounded-2xl p-6 border border-orange-500/20 hover:border-orange-500/40 transition-all duration-300 group hover:scale-105 hover:shadow-xl hover:shadow-orange-500/10 animate-float-medium">
          <div class="w-12 h-12 bg-gradient-to-br from-orange-500/20 to-orange-600/30 rounded-xl flex items-center justify-center mb-4 group-hover:bg-gradient-to-br group-hover:from-orange-500/30 group-hover:to-orange-600/40 transition-all duration-300 group-hover:animate-pulse">
            <span class="text-2xl">📊</span>
          </div>
          <h3 class="text-lg font-bold text-orange-400 mb-2 group-hover:text-orange-300 transition-colors">Waveform Analysis</h3>
          <p class="text-gray-300 text-sm group-hover:text-gray-200 transition-colors">
            Wizualizacja fali dźwiękowej i analiza spektrum częstotliwości
          </p>
        </div>
      </div>

      <!-- Navigation -->
      <div class="text-center space-y-6">
        <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
          <a href="/" class="group inline-flex items-center gap-3 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white px-8 py-4 rounded-2xl font-bold transition-all duration-300 shadow-xl hover:shadow-2xl hover:scale-105 relative overflow-hidden">
            <div class="absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-blue-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <span class="text-xl group-hover:animate-bounce relative z-10">←</span>
            <span class="relative z-10">Powrót do głównej</span>
          </a>
          
          <a href="/ai-functions" class="group inline-flex items-center gap-3 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-4 rounded-2xl font-bold transition-all duration-300 shadow-xl hover:shadow-2xl hover:scale-105 relative overflow-hidden">
            <div class="absolute inset-0 bg-gradient-to-r from-purple-400/20 to-pink-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <span class="text-xl group-hover:animate-pulse relative z-10">🤖</span>
            <span class="relative z-10">Więcej AI Tools</span>
          </a>
        </div>
        
        <!-- Quick Stats -->
        <div class="flex justify-center gap-8 text-sm text-gray-400">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span>Online</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
            <span>XTTS Ready</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
            <span>AI Powered</span>
          </div>
        </div>
        </a>
      </div>
    </div>
  </main>

  <style>
    .slider::-webkit-slider-thumb {
      appearance: none;
      width: 20px;
      height: 20px;
      background: linear-gradient(135deg, #06b6d4, #3b82f6);
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
    }

    .slider::-moz-range-thumb {
      width: 20px;
      height: 20px;
      background: linear-gradient(135deg, #06b6d4, #3b82f6);
      border-radius: 50%;
      cursor: pointer;
      border: none;
      box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
    }

    .eq-band {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .eq-band label {
      width: 40px;
      text-align: right;
    }

    .eq-slider {
      flex: 1;
      height: 4px;
      background: #374151;
      border-radius: 2px;
      outline: none;
      cursor: pointer;
    }

    .eq-slider::-webkit-slider-thumb {
      appearance: none;
      width: 16px;
      height: 16px;
      background: #06b6d4;
      border-radius: 50%;
      cursor: pointer;
    }

    .eq-value {
      width: 35px;
      text-align: center;
      font-size: 10px;
      color: #9ca3af;
    }

    #waveformCanvas {
      background: linear-gradient(90deg, #1f2937 0%, #111827 50%, #1f2937 100%);
      border: 1px solid rgba(6, 182, 212, 0.2);
    }

    /* Enhanced animations */
    @keyframes float-slow {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      33% { transform: translateY(-20px) rotate(120deg); }
      66% { transform: translateY(10px) rotate(240deg); }
    }

    @keyframes float-medium {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-15px) rotate(180deg); }
    }

    @keyframes float-fast {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      25% { transform: translateY(-8px) rotate(90deg); }
      50% { transform: translateY(5px) rotate(180deg); }
      75% { transform: translateY(-5px) rotate(270deg); }
    }

    .animate-float-slow {
      animation: float-slow 8s ease-in-out infinite;
    }

    .animate-float-medium {
      animation: float-medium 6s ease-in-out infinite;
    }

    .animate-float-fast {
      animation: float-fast 4s ease-in-out infinite;
    }

    /* Enhanced slider styles */
    .slider {
      background: linear-gradient(90deg, #374151 0%, #4b5563 50%, #374151 100%);
      transition: all 0.3s ease;
    }

    .slider:hover {
      background: linear-gradient(90deg, #4b5563 0%, #6b7280 50%, #4b5563 100%);
      transform: scaleY(1.2);
    }

    .slider::-webkit-slider-thumb {
      appearance: none;
      width: 22px;
      height: 22px;
      background: linear-gradient(135deg, #06b6d4, #3b82f6, #8b5cf6);
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 0 15px rgba(6, 182, 212, 0.6), 0 0 30px rgba(6, 182, 212, 0.3);
      transition: all 0.3s ease;
    }

    .slider::-webkit-slider-thumb:hover {
      transform: scale(1.2);
      box-shadow: 0 0 20px rgba(6, 182, 212, 0.8), 0 0 40px rgba(6, 182, 212, 0.4);
    }

    .eq-slider {
      background: linear-gradient(90deg, #1f2937 0%, #374151 50%, #1f2937 100%);
      transition: all 0.2s ease;
    }

    .eq-slider:hover {
      background: linear-gradient(90deg, #374151 0%, #4b5563 50%, #374151 100%);
    }

    .eq-slider::-webkit-slider-thumb {
      appearance: none;
      width: 18px;
      height: 18px;
      background: linear-gradient(135deg, #06b6d4, #3b82f6);
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
      transition: all 0.2s ease;
    }

    .eq-slider::-webkit-slider-thumb:hover {
      transform: scale(1.15);
      box-shadow: 0 0 15px rgba(6, 182, 212, 0.7);
    }

    .eq-band {
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s ease;
    }

    .eq-band:hover {
      background: rgba(6, 182, 212, 0.05);
      transform: translateY(-1px);
    }

    /* Glow effects */
    .glow-on-hover {
      transition: all 0.3s ease;
    }

    .glow-on-hover:hover {
      box-shadow: 0 0 20px rgba(6, 182, 212, 0.3);
    }

    /* Loading animation */
    @keyframes pulse-glow {
      0%, 100% { 
        box-shadow: 0 0 5px rgba(6, 182, 212, 0.4);
      }
      50% { 
        box-shadow: 0 0 20px rgba(6, 182, 212, 0.8), 0 0 30px rgba(6, 182, 212, 0.4);
      }
    }

    .pulse-glow {
      animation: pulse-glow 2s ease-in-out infinite;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
      .floating-particle {
        width: 3px !important;
        height: 3px !important;
      }
      
      .animate-float-slow,
      .animate-float-medium,
      .animate-float-fast {
        animation-duration: 6s;
      }
      
      .text-6xl {
        font-size: 3rem;
      }
      
      .grid-cols-3 {
        grid-template-columns: repeat(1, minmax(0, 1fr));
        gap: 1rem;
      }
      
      .md\\:grid-cols-4 {
        grid-template-columns: repeat(2, minmax(0, 1fr));
      }
    }

    /* Enhanced focus states */
    .focus-visible:focus {
      outline: 2px solid rgba(6, 182, 212, 0.5);
      outline-offset: 2px;
    }

    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }

    /* Disable zoom/scale on scroll wheel */
    body {
      zoom: 1.0;
      -moz-transform: scale(1.0);
      -webkit-transform: scale(1.0);
      transform: scale(1.0);
      -ms-zoom: 1.0;
      -webkit-user-scalable: no;
      -moz-user-scalable: no;
      -ms-user-scalable: no;
      user-scalable: no;
    }

    /* Prevent zoom gestures */
    * {
      touch-action: manipulation;
    }

    /* Disable browser zoom controls */
    @media screen {
      body {
        zoom: reset;
      }
    }

    /* Loading states */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid #06b6d4;
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>

  <script>
    // Setup zoom prevention
    function setupZoomPrevention() {
      // Disable zoom on scroll wheel
      document.addEventListener('wheel', (e) => {
        if (e.ctrlKey || e.metaKey) {
          e.preventDefault();
          return false;
        }
      }, { passive: false });

      // Disable pinch-to-zoom
      document.addEventListener('touchstart', (e) => {
        if (e.touches.length > 1) {
          e.preventDefault();
        }
      }, { passive: false });

      // Disable double-tap zoom
      let lastTouchEnd = 0;
      document.addEventListener('touchend', (e) => {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
          e.preventDefault();
        }
        lastTouchEnd = now;
      }, { passive: false });

      // Reset any zoom that might have been applied
      document.body.style.zoom = '1';
      document.body.style.transform = 'scale(1)';
    }

    // Voice Assistant JavaScript functionality
    class VoiceAssistant {
      constructor() {
        this.audioContext = null;
        this.currentAudio = null;
        this.isPlaying = false;
        this.waveformCanvas = null;
        this.waveformCtx = null;
        this.initialize();
      }

      initialize() {
        this.setupEventListeners();
        this.setupWaveform();
        this.setupEqualizer();
      }

      setupEventListeners() {
        console.log('Setting up event listeners...');
        
        // Speed slider
        const speedSlider = document.getElementById('speedSlider');
        const speedValue = document.getElementById('speedValue');
        console.log('Speed elements:', { speedSlider, speedValue });
        
        speedSlider?.addEventListener('input', (e) => {
          if (speedValue) speedValue.textContent = e.target.value;
        });

        // Temperature slider
        const temperatureSlider = document.getElementById('temperatureSlider');
        const temperatureValue = document.getElementById('temperatureValue');
        console.log('Temperature elements:', { temperatureSlider, temperatureValue });
        
        // Volume slider for audio player
        const volumeSlider2 = document.getElementById('volumeSlider2');
        volumeSlider2?.addEventListener('input', (e) => {
          const volume = e.target.value;
          if (this.currentAudio) {
            this.currentAudio.volume = volume / 100;
          }
        });

        // Character counter for text input
        const textInput = document.getElementById('speechText');
        const charCounter = document.getElementById('charCount');
        textInput?.addEventListener('input', (e) => {
          const length = e.target.value.length;
          if (charCounter) {
            charCounter.textContent = `${length} / 1000`;
            
            // Change color based on length
            if (length > 500) {
              charCounter.className = 'absolute bottom-3 right-3 text-xs text-red-400 font-medium';
            } else if (length > 300) {
              charCounter.className = 'absolute bottom-3 right-3 text-xs text-yellow-400 font-medium';
            } else {
              charCounter.className = 'absolute bottom-3 right-3 text-xs text-gray-500';
            }
          }
        });

        // Enhanced animations for floating particles
        this.setupFloatingParticles();
        temperatureSlider?.addEventListener('input', (e) => {
          temperatureValue.textContent = e.target.value;
        });

        // Generate speech button
        const generateBtn = document.getElementById('generateSpeechBtn');
        console.log('Generate button:', generateBtn);
        generateBtn?.addEventListener('click', () => {
          console.log('Generate button clicked!');
          this.generateSpeech();
        });

        // Upload voice sample
        const uploadBtn = document.getElementById('uploadSampleBtn');
        uploadBtn?.addEventListener('click', () => this.uploadVoiceSample());

        // Play/Pause button
        const playPauseBtn = document.getElementById('playPauseBtn');
        playPauseBtn?.addEventListener('click', () => this.togglePlayPause());

        // Equalizer preset change
        const eqPreset = document.getElementById('eqPreset');
        eqPreset?.addEventListener('change', (e) => this.applyEqualizerPreset(e.target.value));

        // Apply equalizer button
        const applyEqBtn = document.getElementById('applyEqualizerBtn');
        applyEqBtn?.addEventListener('click', () => this.applyEqualizer());

        // Audio effects sliders
        const compressionSlider = document.getElementById('compressionSlider');
        const reverbSlider = document.getElementById('reverbSlider');
        const noiseReductionSlider = document.getElementById('noiseReductionSlider');

        compressionSlider?.addEventListener('input', (e) => {
          document.getElementById('compressionValue').textContent = e.target.value + '%';
        });

        reverbSlider?.addEventListener('input', (e) => {
          document.getElementById('reverbValue').textContent = e.target.value + '%';
        });

        noiseReductionSlider?.addEventListener('input', (e) => {
          document.getElementById('noiseReductionValue').textContent = e.target.value + '%';
        });
      }

      setupWaveform() {
        this.waveformCanvas = document.getElementById('waveformCanvas');
        if (this.waveformCanvas) {
          this.waveformCtx = this.waveformCanvas.getContext('2d');
          this.drawEmptyWaveform();
        }
      }

      setupEqualizer() {
        const eqSliders = document.querySelectorAll('.eq-slider');
        eqSliders.forEach(slider => {
          slider.addEventListener('input', (e) => {
            const band = e.target.dataset.band;
            const value = e.target.value;
            const valueSpan = e.target.parentNode.querySelector('.eq-value');
            valueSpan.textContent = `${value}dB`;
            this.updateEqualizerBand(band, value);
          });
        });
      }

      async generateSpeech() {
        const textElement = document.getElementById('speechText');
        const voiceElement = document.getElementById('voiceSelect');
        const languageElement = document.getElementById('languageSelect');
        const speedElement = document.getElementById('speedSlider');
        const temperatureElement = document.getElementById('temperatureSlider');

        if (!textElement || !textElement.value || !textElement.value.trim()) {
          this.showAlert('Wprowadź tekst do syntezy!', 'warning');
          return;
        }

        const text = textElement.value.trim();
        const voice = voiceElement?.value || 'pl-zofia-premium';
        const language = languageElement?.value || 'pl';
        const speed = parseFloat(speedElement?.value || '1.0');
        const temperature = parseFloat(temperatureElement?.value || '0.75');

        this.showProcessingStatus(true, 'Generowanie mowy z XTTS-v2...');

        try {
          console.log('Generating speech with params:', { text, voice, language, speed, temperature });

          const response = await fetch('/api/voice/xtts-synthesis', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              text: text,
              language: language,
              voice_preset: voice,
              speed: speed,
              temperature: temperature,
              enable_text_splitting: true,
              output_format: 'mp3'
            })
          });

          const result = await response.json();
          console.log('XTTS Response:', result);

          if (!response.ok) {
            throw new Error(result.error || `HTTP ${response.status}: ${response.statusText}`);
          }

          if (result.success && result.audio_url) {
            await this.loadGeneratedAudio(result);
            this.updateAudioStats(result);
            this.showAlert('Mowa została wygenerowana pomyślnie!', 'success');
          } else {
            throw new Error(result.error || 'Nieznany błąd podczas generacji mowy');
          }
        } catch (error) {
          console.error('Speech generation error:', error);
          this.showAlert('Błąd generacji mowy: ' + error.message, 'error');
        } finally {
          this.showProcessingStatus(false);
        }
      }

      async loadGeneratedAudio(result) {
        return new Promise((resolve, reject) => {
          const audioPlayer = document.getElementById('audioPlayer');
          
          if (!audioPlayer) {
            reject(new Error('Audio player element not found'));
            return;
          }

          const audioUrl = result.audio_url || result.audio_data || result.url;
          if (!audioUrl) {
            reject(new Error('No audio URL or data provided in result: ' + JSON.stringify(Object.keys(result))));
            return;
          }

          console.log('Loading audio from URL:', audioUrl);

          // Reset audio player
          audioPlayer.pause();
          audioPlayer.currentTime = 0;

          const loadAudio = () => {
            audioPlayer.style.display = 'block';
            this.currentAudio = audioPlayer;
            
            // Update waveform if available
            if (result.waveform_data && Array.isArray(result.waveform_data)) {
              try {
                this.drawWaveform(result.waveform_data);
              } catch (err) {
                console.warn('Waveform drawing failed:', err);
                this.drawEmptyWaveform();
              }
            } else {
              this.drawEmptyWaveform();
            }

            // Update play button state
            const playPauseBtn = document.getElementById('playPauseBtn');
            if (playPauseBtn) {
              playPauseBtn.innerHTML = '<span>▶️</span>';
            }

            // Show audio stats section
            const audioStats = document.getElementById('audioStats');
            if (audioStats) {
              audioStats.classList.remove('hidden');
            }

            // Set up audio event listeners for stats updates
            audioPlayer.addEventListener('timeupdate', () => this.updateAudioStats());
            audioPlayer.addEventListener('loadedmetadata', () => this.updateAudioStats());
            
            resolve();
          };

          const handleError = (error) => {
            console.error('Audio loading error:', error);
            reject(new Error('Failed to load audio: ' + (error.message || 'Unknown error')));
          };

          // Set up event listeners
          audioPlayer.onloadeddata = loadAudio;
          audioPlayer.oncanplay = loadAudio;
          audioPlayer.onerror = handleError;

          // Handle different URL formats
          try {
            if (audioUrl.startsWith('data:')) {
              // Base64 encoded audio
              audioPlayer.src = audioUrl;
            } else if (audioUrl.startsWith('/') || audioUrl.startsWith('http')) {
              // Regular URL
              audioPlayer.src = audioUrl;
            } else {
              // Assume it's base64 without data URL prefix
              audioPlayer.src = `data:audio/mp3;base64,${audioUrl}`;
            }
          } catch (err) {
            handleError(err);
          }

          // Timeout after 10 seconds
          setTimeout(() => {
            if (audioPlayer.readyState === 0) {
              reject(new Error('Audio loading timeout'));
            }
          }, 10000);
        });
      }

      showProcessingStatus(show, message = 'Przetwarzanie...') {
        const status = document.getElementById('processingStatus');
        if (status) {
          if (show) {
            status.querySelector('span').textContent = message;
            status.classList.remove('hidden');
          } else {
            status.classList.add('hidden');
          }
        }
      }

      showAlert(message, type = 'info') {
        // Create alert element if doesn't exist
        let alertDiv = document.getElementById('voiceAlert');
        if (!alertDiv) {
          alertDiv = document.createElement('div');
          alertDiv.id = 'voiceAlert';
          alertDiv.className = 'fixed top-4 right-4 z-50 p-4 rounded-xl shadow-2xl transition-all duration-300 max-w-md';
          document.body.appendChild(alertDiv);
        }

        // Set alert style based on type
        const colors = {
          success: 'bg-green-900/90 border-green-500/50 text-green-200',
          error: 'bg-red-900/90 border-red-500/50 text-red-200',
          warning: 'bg-yellow-900/90 border-yellow-500/50 text-yellow-200',
          info: 'bg-blue-900/90 border-blue-500/50 text-blue-200'
        };

        const icons = {
          success: '✅',
          error: '❌',
          warning: '⚠️',
          info: 'ℹ️'
        };

        alertDiv.className = `fixed top-4 right-4 z-50 p-4 rounded-xl shadow-2xl transition-all duration-300 max-w-md border ${colors[type] || colors.info}`;
        alertDiv.innerHTML = `
          <div class="flex items-center gap-3">
            <span class="text-xl">${icons[type] || icons.info}</span>
            <span class="font-medium">${message}</span>
          </div>
        `;

        // Auto hide after 5 seconds
        setTimeout(() => {
          if (alertDiv) {
            alertDiv.style.opacity = '0';
            alertDiv.style.transform = 'translateX(100%)';
            setTimeout(() => alertDiv.remove(), 300);
          }
        }, 5000);
      }

      updateAudioStats(result) {
        const statsPanel = document.getElementById('audioStats');
        if (statsPanel && result.voice_info) {
          document.getElementById('statDuration').textContent = `${result.duration}s`;
          document.getElementById('statSampleRate').textContent = `${result.sample_rate}Hz`;
          document.getElementById('statPeakLevel').textContent = `${result.audio_stats?.peak_level || '--'}dB`;
          document.getElementById('statRmsLevel').textContent = `${result.audio_stats?.rms_level || '--'}dB`;
          statsPanel.classList.remove('hidden');
        }
      }

      drawEmptyWaveform() {
        if (!this.waveformCtx) return;
        
        const canvas = this.waveformCanvas;
        const ctx = this.waveformCtx;
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = '#374151';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(0, canvas.height / 2);
        ctx.lineTo(canvas.width, canvas.height / 2);
        ctx.stroke();
        
        // Add grid
        ctx.strokeStyle = '#1f2937';
        for (let i = 0; i < canvas.width; i += 50) {
          ctx.beginPath();
          ctx.moveTo(i, 0);
          ctx.lineTo(i, canvas.height);
          ctx.stroke();
        }
      }

      drawWaveform(waveformData) {
        if (!this.waveformCtx || !waveformData || !Array.isArray(waveformData)) {
          console.warn('Invalid waveform data or context');
          return;
        }
        
        try {
          const canvas = this.waveformCanvas;
          const ctx = this.waveformCtx;
          
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          
          // Draw waveform
          ctx.strokeStyle = '#06b6d4';
          ctx.lineWidth = 2;
          ctx.beginPath();
          
          const step = canvas.width / waveformData.length;
          for (let i = 0; i < waveformData.length; i++) {
            const x = i * step;
            const normalizedValue = Math.max(-1, Math.min(1, waveformData[i] || 0));
            const y = (canvas.height / 2) + (normalizedValue * canvas.height / 2);
            
            if (i === 0) {
              ctx.moveTo(x, y);
            } else {
              ctx.lineTo(x, y);
            }
          }
          ctx.stroke();
        } catch (error) {
          console.error('Error drawing waveform:', error);
        }
      }

      applyEqualizerPreset(presetName) {
        // Mock equalizer presets
        const presets = {
          flat: { '32Hz': 0, '64Hz': 0, '125Hz': 0, '250Hz': 0, '500Hz': 0, '1kHz': 0, '2kHz': 0, '4kHz': 0, '8kHz': 0, '16kHz': 0 },
          speech: { '32Hz': -6, '64Hz': -4, '125Hz': -2, '250Hz': 2, '500Hz': 4, '1kHz': 6, '2kHz': 4, '4kHz': 2, '8kHz': -1, '16kHz': -3 },
          podcast: { '32Hz': -8, '64Hz': -5, '125Hz': -2, '250Hz': 3, '500Hz': 5, '1kHz': 7, '2kHz': 5, '4kHz': 3, '8kHz': 1, '16kHz': -2 },
          radio: { '32Hz': -10, '64Hz': -6, '125Hz': -3, '250Hz': 4, '500Hz': 6, '1kHz': 8, '2kHz': 6, '4kHz': 4, '8kHz': 2, '16kHz': 0 }
        };
        
        const preset = presets[presetName] || presets.flat;
        
        Object.entries(preset).forEach(([band, value]) => {
          const slider = document.querySelector(`[data-band="${band}"]`);
          const valueSpan = slider?.parentNode.querySelector('.eq-value');
          if (slider && valueSpan) {
            slider.value = value;
            valueSpan.textContent = `${value}dB`;
          }
        });
      }

      updateEqualizerBand(band, value) {
        console.log(`Equalizer ${band}: ${value}dB`);
        // Implement actual equalizer logic here
      }

      togglePlayPause() {
        const audioPlayer = document.getElementById('audioPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        
        if (!audioPlayer || !playPauseBtn) {
          console.warn('Audio player or play button not found');
          this.showAlert('Odtwarzacz audio nie jest dostępny', 'error');
          return;
        }

        if (!audioPlayer.src) {
          this.showAlert('Brak audio do odtworzenia. Najpierw wygeneruj mowę.', 'warning');
          return;
        }
        
        try {
          if (audioPlayer.paused || audioPlayer.ended) {
            audioPlayer.play().then(() => {
              playPauseBtn.innerHTML = '<span>⏸️</span>';
              this.isPlaying = true;
            }).catch(err => {
              console.error('Play failed:', err);
              this.showAlert('Nie można odtworzyć audio: ' + err.message, 'error');
            });
          } else {
            audioPlayer.pause();
            playPauseBtn.innerHTML = '<span>▶️</span>';
            this.isPlaying = false;
          }
        } catch (error) {
          console.error('Toggle play/pause error:', error);
          this.showAlert('Błąd odtwarzacza: ' + error.message, 'error');
        }
      }

      async uploadVoiceSample() {
        const fileInput = document.getElementById('voiceSample');
        const file = fileInput?.files?.[0];
        
        if (!file) {
          this.showAlert('Wybierz plik audio!', 'warning');
          return;
        }
        
        // Validate file type
        const validTypes = ['audio/wav', 'audio/mp3', 'audio/mpeg', 'audio/ogg', 'audio/webm'];
        if (!validTypes.includes(file.type)) {
          this.showAlert('Nieobsługiwany format pliku. Użyj WAV, MP3 lub OGG.', 'error');
          return;
        }
        
        if (file.size > 10 * 1024 * 1024) { // 10MB limit
          this.showAlert('Plik jest za duży. Maksymalny rozmiar: 10MB', 'error');
          return;
        }
        
        this.showProcessingStatus(true, 'Przesyłanie próbki głosu...');
        
        try {
          const formData = new FormData();
          formData.append('voice_sample', file);
          formData.append('sample_name', file.name);
          
          const response = await fetch('/api/voice/upload-sample', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            this.showAlert('Próbka głosu została przesłana! Możesz teraz użyć jej do klonowania.', 'success');
            console.log('Voice sample uploaded:', result);
          } else {
            throw new Error(result.error || 'Upload failed');
          }
        } catch (error) {
          console.error('Voice sample upload error:', error);
          this.showAlert('Błąd podczas przesyłania próbki: ' + error.message, 'error');
        } finally {
          this.showProcessingStatus(false);
        }
      }

      async applyEqualizer() {
        if (!this.currentAudio) {
          this.showAlert('Brak audio do przetworzenia. Najpierw wygeneruj mowę.', 'warning');
          return;
        }

        this.showProcessingStatus(true, 'Stosowanie equalizera...');

        try {
          // Get equalizer settings
          const eqSettings = {};
          const eqSliders = document.querySelectorAll('.eq-slider');
          
          eqSliders.forEach(slider => {
            const band = slider.dataset.band;
            const value = parseFloat(slider.value);
            eqSettings[band] = value;
          });

          // Get effects settings
          const compression = document.getElementById('compressionSlider')?.value || 0;
          const reverb = document.getElementById('reverbSlider')?.value || 0;
          const noiseReduction = document.getElementById('noiseReductionSlider')?.value || 0;

          const response = await fetch('/api/voice/audio-equalizer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              audio_url: this.currentAudio.src,
              equalizer_bands: eqSettings,
              effects: {
                compression: compression,
                reverb: reverb,
                noise_reduction: noiseReduction
              }
            })
          });

          const result = await response.json();

          if (response.ok && result.success) {
            // Update audio player with processed audio
            await this.loadGeneratedAudio(result);
            this.showAlert('Equalizer został zastosowany pomyślnie!', 'success');
          } else {
            throw new Error(result.error || 'Equalizer processing failed');
          }
        } catch (error) {
          console.error('Equalizer error:', error);
          this.showAlert('Błąd equalizera: ' + error.message, 'error');
        } finally {
          this.showProcessingStatus(false);
        }
      }

      setupFloatingParticles() {
        // Create floating particles animation
        const particles = [];
        const numParticles = 15;
        
        for (let i = 0; i < numParticles; i++) {
          const particle = document.createElement('div');
          particle.className = 'floating-particle';
          particle.style.cssText = `
            position: fixed;
            width: ${Math.random() * 6 + 2}px;
            height: ${Math.random() * 6 + 2}px;
            background: ${['rgba(6, 182, 212, 0.6)', 'rgba(59, 130, 246, 0.6)', 'rgba(139, 92, 246, 0.6)'][Math.floor(Math.random() * 3)]};
            border-radius: 50%;
            pointer-events: none;
            z-index: 0;
            left: ${Math.random() * 100}vw;
            top: ${Math.random() * 100}vh;
            animation: ${['float-slow', 'float-medium', 'float-fast'][Math.floor(Math.random() * 3)]} ${Math.random() * 10 + 5}s ease-in-out infinite;
            animation-delay: ${Math.random() * 5}s;
            opacity: ${Math.random() * 0.5 + 0.3};
          `;
          
          document.body.appendChild(particle);
          particles.push(particle);
        }

        // Clean up particles on page unload
        window.addEventListener('beforeunload', () => {
          particles.forEach(particle => particle.remove());
        });
      }

      updateAudioStats() {
        if (!this.currentAudio) return;
        
        // Update time display
        const timeDisplay = document.getElementById('timeDisplay');
        if (timeDisplay && this.currentAudio.duration) {
          const current = this.formatTime(this.currentAudio.currentTime || 0);
          const total = this.formatTime(this.currentAudio.duration);
          timeDisplay.textContent = `${current} / ${total}`;
        }

        // Update progress bar
        const progressBar = document.getElementById('progressBar');
        if (progressBar && this.currentAudio.duration) {
          const progress = (this.currentAudio.currentTime / this.currentAudio.duration) * 100;
          progressBar.style.width = `${progress}%`;
        }

        // Update stats
        const stats = {
          duration: this.formatTime(this.currentAudio.duration || 0),
          sampleRate: '48kHz',
          peakLevel: '-3.2dB',
          rmsLevel: '-12.4dB'
        };

        Object.entries(stats).forEach(([key, value]) => {
          const element = document.getElementById(`stat${key.charAt(0).toUpperCase() + key.slice(1)}`);
          if (element) element.textContent = value;
        });
      }

      formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
      }
    }

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', () => {
      // Setup zoom prevention first
      setupZoomPrevention();
      
      // Initialize Voice Assistant
      const voiceAssistant = new VoiceAssistant();
      window.voiceAssistant = voiceAssistant; // Make globally accessible for debugging
      
      console.log('Voice Assistant initialized successfully');
    });
  </script>
</MyBonzoLayout>
