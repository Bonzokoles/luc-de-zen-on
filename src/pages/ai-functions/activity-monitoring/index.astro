---
import MyBonzoLayout from "../../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../../components/DecorativeLines.astro";
import AiHelpAssistant from "../../../components/AiHelpAssistant.svelte";
---

<MyBonzoLayout siteTitle="Activity Monitoring AI | KAROL LISSON">
  <DecorativeLines />

  <main class="min-h-svh relative z-10">
    <div class="fixed inset-0 bg-[#0a0a0a]">
      <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/20 via-black to-black"></div>
      <div class="cyber-grid absolute inset-0"></div>
    </div>

    <section class="relative z-20 border-b border-[#333333] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-4xl md:text-5xl font-bold text-[#00ffff] mb-2 uppercase tracking-wider font-mono">
              Activity Monitoring AI
            </h1>
            <p class="text-[#a0a0a0] text-lg font-['Kenyan_Coffee']">
              Inteligentne monitorowanie aktywno≈õci u≈ºytkownik√≥w i systemu w czasie rzeczywistym
            </p>
          </div>
          <div class="text-right text-sm text-[#a0a0a0] font-mono">
            <div class="mb-1">
              STATUS: <span id="status-indicator" class="text-[#00ff00]">MONITORING</span>
            </div>
            <div>EVENTS: <span id="events-indicator" class="text-[#ff6699] animate-pulse">...</span></div>
          </div>
        </div>
        <div class="flex gap-4 mb-8">
          <a href="/" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm"> ‚Üê Powr√≥t do g≈Ç√≥wnej </a>
        </div>
      </div>
    </section>

    <section class="relative z-20 py-12">
      <div class="max-w-6xl mx-auto px-4">
        <div class="grid lg:grid-cols-3 gap-6 mb-8">
          <div id="feed-container" class="lg:col-span-2 bg-gradient-to-br from-[#1a1a1a] to-[#111111] border border-[#333333] p-6 rounded-sm">
            <h3 class="text-[#00ffff] font-mono text-xl uppercase tracking-wide mb-6">üì° Live Activity Feed</h3>
            <div id="feed-content" class="space-y-3 max-h-96 overflow-y-auto">
              <p class="text-gray-500">Inicjalizacja strumienia danych...</p>
            </div>
          </div>

          <div id="stats-container" class="space-y-6">
             <div class="bg-gradient-to-br from-[#1a1a1a] to-[#111111] border border-[#333333] p-6 rounded-sm">
                <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-4">‚ö° Statystyki Real-time</h4>
                <div class="space-y-3" id="quick-stats-content">
                    <p class="text-gray-500">≈Åadowanie statystyk...</p>
                </div>
            </div>
            <div class="bg-gradient-to-br from-[#1a1a1a] to-[#111111] border border-[#333333] p-6 rounded-sm">
              <h4 class="text-[#ff6699] font-mono text-sm uppercase mb-4">üéØ Anomaly Detection</h4>
              <div class="space-y-2" id="anomaly-content">
                 <p class="text-gray-500">Oczekiwanie na dane...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <style>
    .cyber-grid { background-image: linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px); background-size: 20px 20px; }
    .feed-item { animation: fadeIn 0.5s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
        const feedContent = document.getElementById('feed-content');
        const quickStatsContent = document.getElementById('quick-stats-content');
        const anomalyContent = document.getElementById('anomaly-content');
        const statusIndicator = document.getElementById('status-indicator');
        const eventsIndicator = document.getElementById('events-indicator');

        const typeStyles = {
            success: { border: 'border-[#00ff00]', text: 'text-[#00ff00]' },
            warning: { border: 'border-[#ffaa00]', text: 'text-[#ffaa00]' },
            threat: { border: 'border-[#ff3333]', text: 'text-[#ff3333]' },
            info: { border: 'border-[#00ffff]', text: 'text-[#00ffff]' },
            alert: { border: 'border-[#ff6699]', text: 'text-[#ff6699]' },
        };

        function renderFeed(feed) {
            if (!feedContent) return;
            feedContent.innerHTML = feed.map(event => `
                <div class="feed-item flex items-center justify-between border-l-4 ${typeStyles[event.type]?.border || 'border-gray-500'} pl-3 py-2">
                    <div>
                        <div class="text-[#e0e0e0] text-sm">${event.message}</div>
                        <div class="text-[#a0a0a0] text-xs">${event.details}</div>
                    </div>
                    <div class="${typeStyles[event.type]?.text || 'text-gray-500'} text-xs font-bold">${event.type.toUpperCase()}</div>
                </div>
            `).join('');
        }

        function renderStats(stats) {
            if (!quickStatsContent || !eventsIndicator) return;
            quickStatsContent.innerHTML = `
                <div class="flex justify-between"><span class="text-[#a0a0a0] text-sm">Active Users:</span><span class="text-[#00ffff] font-bold">${stats.activeUsers.toLocaleString()}</span></div>
                <div class="flex justify-between"><span class="text-[#a0a0a0] text-sm">Events/min:</span><span class="text-[#00ffff] font-bold">${stats.eventsPerMin.toLocaleString()}</span></div>
                <div class="flex justify-between"><span class="text-[#a0a0a0] text-sm">Threats blocked:</span><span class="text-[#ff3333] font-bold">${stats.threatsBlocked}</span></div>
                <div class="flex justify-between"><span class="text-[#a0a0a0] text-sm">System load:</span><span class="${stats.systemLoad === 'High' ? 'text-red-500' : 'text-[#00ff00]'} font-bold">${stats.systemLoad}</span></div>
            `;
            eventsIndicator.textContent = `${stats.eventsPerMin.toLocaleString()}/min`;
        }
        
        function renderAnomalies(feed) {
            if (!anomalyContent) return;
            const anomalies = feed.filter(e => e.type === 'threat' || e.type === 'alert' || e.type === 'warning');
            if (anomalies.length === 0) {
                anomalyContent.innerHTML = '<div class="text-green-500 text-xs">‚úì No anomalies detected.</div>';
                return;
            }
            anomalyContent.innerHTML = anomalies.map(event => `
                 <div class="text-xs ${typeStyles[event.type]?.text || 'text-gray-500'}"><strong>${event.type.toUpperCase()}:</strong> ${event.message}</div>
            `).join('');
        }

        async function fetchActivity() {
            try {
                const response = await fetch('/api/activity-stream');
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.statusText}`);
                }
                const data = await response.json();
                if (data.success) {
                    renderFeed(data.data.feed);
                    renderStats(data.data.stats);
                    renderAnomalies(data.data.feed);
                    if(statusIndicator) statusIndicator.textContent = 'MONITORING';
                    if(statusIndicator) statusIndicator.classList.remove('text-red-500');
                    if(statusIndicator) statusIndicator.classList.add('text-[#00ff00]');
                } else {
                    throw new Error(data.error || 'Failed to fetch activity');
                }
            } catch (error) {
                console.error("Fetch error:", error);
                if(statusIndicator) statusIndicator.textContent = 'ERROR';
                if(statusIndicator) statusIndicator.classList.add('text-red-500');
                if(feedContent) feedContent.innerHTML = `<p class="text-red-500">Error loading activity feed: ${error.message}</p>`;
            }
        }

        // Fetch data immediately and then every 3 seconds
        fetchActivity();
        setInterval(fetchActivity, 3000);
    });
  </script>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="px-4 py-2 bg-[#111111] border border-[#333333] text-[#00ffff] hover:brightness-125 transition-all duration-300 font-mono uppercase tracking-wide text-sm">ü§ñ POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Monitorowanie Aktywno≈õci AI" />
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const polaczekBtn = document.getElementById('polaczekBtn');
      const polaczekWidget = document.getElementById('polaczekWidget');

      if (polaczekBtn && polaczekWidget) {
        polaczekBtn.addEventListener('click', () => {
          polaczekWidget.classList.toggle('hidden');
        });
      }
    });
  </script>
</MyBonzoLayout>
