---
import BackroomInterface from '@/layouts/BackroomInterface.astro';
import AiHelpAssistant from '@/components/AiHelpAssistant.svelte';
---

<BackroomInterface siteTitle="BigQuery Analytics | AI Workers">
  <div class="fixed inset-0 bg-[#0f1419]">
    <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/15 via-[#0f1419] to-[#0f1419]"></div>
  </div>

  <section class="backroom-header">
    <div class="backroom-container">
      <h1 class="backroom-title">BigQuery Analytics</h1>
      <p class="backroom-description">Analizuj dane z Google BigQuery, wykonuj zapytania SQL i generuj raporty</p>
    </div>
  </section>

  <section class="backroom-section">
    <div class="backroom-container">
      <div class="function-container">
        <h2 class="text-2xl font-semibold text-primary mb-5">BigQuery Console</h2>
        <div class="text-sm text-gray-400 mb-4">
          <p><b>Uwaga:</b> Do korzystania z tej funkcji wymagane jest posiadanie projektu Google Cloud z wÅ‚Ä…czonym API BigQuery oraz odpowiednimi danymi uwierzytelniajÄ…cymi (GCP_PROJECT_ID, GCP_ACCESS_TOKEN) skonfigurowanymi jako zmienne Å›rodowiskowe.</p>
        </div>
        <div class="query-container border border-edge rounded-lg mt-8" style="background: rgba(0, 0, 0, 0.5);">
          <!-- Query Header -->
          <div class="query-header border-b border-edge p-4 flex items-center justify-between" style="background: rgba(0, 0, 0, 0.3);">
            <div class="flex items-center gap-3">
              <div class="w-3 h-3 bg-blue-400 rounded-full animate-pulse"></div>
              <span class="text-primary-foreground font-semibold">BigQuery Console</span>
            </div>
            <div class="flex gap-2">
              <button data-action="save-query" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm">
                Zapisz
              </button>
              <button data-action="load-query" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm">
                Wczytaj
              </button>
              <button data-action="clear-query" class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-sm">
                WyczyÅ›Ä‡
              </button>
            </div>
          </div>

          <!-- SQL Editor -->
          <div class="sql-editor p-4">
            <label for="sqlQuery" class="block text-lg font-semibold mb-3 text-primary-foreground">
              Zapytanie SQL:
            </label>
            <div class="relative">
              <textarea id="sqlQuery" rows="8" class="w-full p-4 border border-edge rounded-lg text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none font-mono text-sm" style="background: rgba(0, 0, 0, 0.5);" placeholder="SELECT * FROM `project.dataset.table` WHERE ..."></textarea>
              <div class="absolute top-2 right-2 text-xs text-gray-400" id="lineCounter">
                Linia: 1, Kolumna: 1
              </div>
            </div>
          </div>

          <!-- Query Settings -->
          <div class="query-settings p-4 border-t border-edge" style="background: rgba(0, 0, 0, 0.5);">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Projekt:</label>
                <input id="projectId" type="text" placeholder="project-id" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);" />
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Dataset:</label>
                <input id="datasetId" type="text" placeholder="dataset_name" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);" />
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Limit wynikÃ³w:</label>
                <select id="rowLimit" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="100">100 wierszy</option>
                  <option value="1000">1,000 wierszy</option>
                  <option value="10000">10,000 wierszy</option>
                  <option value="0">Bez limitu</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2 text-primary-foreground">Format:</label>
                <select id="outputFormat" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0, 0, 0, 0.5);">
                  <option value="table">Tabela</option>
                  <option value="json">JSON</option>
                  <option value="csv">CSV</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Execute Button -->
          <div class="execute-section p-4 border-t border-edge">
            <button id="executeBtn" data-action="execute-query" class="w-full bg-cyan-600 hover:bg-cyan-700 text-white py-3 px-6 rounded-lg font-semibold text-lg transition-colors duration-200 disabled:opacity-50">
              ðŸš€ Wykonaj Zapytanie
            </button>
          </div>

          <!-- Progress Section -->
          <div id="progressSection" class="progress-section hidden p-4 border-t border-edge">
            <div class="border border-edge rounded-lg p-4" style="background: rgba(0, 0, 0, 0.5);">
              <div class="flex items-center justify-between mb-2">
                <span class="text-primary-foreground">Wykonywanie zapytania...</span>
                <span id="queryTime" class="text-cyan-400">0s</span>
              </div>
              <div class="w-full bg-gray-700 rounded-full h-2">
                <div id="progressBar" class="bg-cyan-400 h-2 rounded-full transition-all duration-300 animate-pulse" style="width: 100%"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Results Section -->
        <div id="resultsSection" class="results-section hidden mt-8">
          <div class="border border-edge rounded-lg" style="background: rgba(0, 0, 0, 0.5);">
            <!-- Results Header -->
            <div class="results-header border-b border-edge p-4 flex items-center justify-between" style="background: rgba(0, 0, 0, 0.3);">
              <div>
                <h3 class="text-xl font-semibold text-primary-foreground">Wyniki zapytania</h3>
                <p id="resultsInfo" class="text-gray-400 text-sm"></p>
              </div>
              <div class="flex gap-2">
                <button data-action="export-csv" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm">
                  Export CSV
                </button>
                <button data-action="export-json" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm">
                  Export JSON
                </button>
                <button data-action="create-chart" class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm">
                  Wykres
                </button>
              </div>
            </div>

            <!-- Results Content -->
            <div id="resultsContent" class="results-content p-4 max-h-96 overflow-auto">
              <!-- Results will be populated here -->
            </div>
          </div>
        </div>

        <!-- Public Datasets Examples -->
        <div class="quick-queries mt-8">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">
            PrzykÅ‚ady z publicznych danych Google:
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              class="quick-query-btn text-left"
              onclick="setQuery('SELECT * FROM `bigquery-public-data.usa_names.usa_1910_2013` WHERE name = \'Mary\' ORDER BY year DESC LIMIT 10')"
            >
              <div class="font-semibold text-cyan-400">
                ðŸ‘¶ Najpopularniejsze imiona w USA
              </div>
              <div class="text-sm text-gray-300">
                Zapytanie o imiÄ™ 'Mary' w publicznym zbiorze danych o imionach w USA.
              </div>
            </button>
            <button
              class="quick-query-btn text-left"
              onclick="setQuery('SELECT DISTINCT author, title FROM `bigquery-public-data.hacker_news.full` WHERE type = \'story\' AND score > 1000 ORDER BY score DESC LIMIT 10')"
            >
              <div class="font-semibold text-cyan-400">
                ðŸ“° Popularne artykuÅ‚y na Hacker News
              </div>
              <div class="text-sm text-gray-300">
                Zapytanie o najpopularniejsze artykuÅ‚y na Hacker News z ponad 1000 punktÃ³w.
              </div>
            </button>
            <button
              class="quick-query-btn text-left"
              onclick="setQuery('SELECT * FROM `bigquery-public-data.github_repos.languages` ORDER BY bytes DESC LIMIT 10')"
            >
              <div class="font-semibold text-cyan-400">
                ðŸ’» Najpopularniejsze jÄ™zyki na GitHub
              </div>
              <div class="text-sm text-gray-300">
                Zapytanie o najpopularniejsze jÄ™zyki programowania na GitHubie.
              </div>
            </button>
            <button
              class="quick-query-btn text-left"
              onclick="setQuery('SELECT * FROM `bigquery-public-data.london_bicycles.cycle_stations` WHERE name LIKE \'%Hyde Park%\' LIMIT 10')"
            >
              <div class="font-semibold text-cyan-400">
                ðŸš² Stacje rowerowe w Londynie
              </div>
              <div class="text-sm text-gray-300">
                Zapytanie o stacje rowerowe w pobliÅ¼u Hyde Parku w Londynie.
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="action-btn">ðŸ¤– POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="BigQuery Analytics | AI Workers" />
    </div>
  </div>

  <script>
    let queryHistory = JSON.parse(
      localStorage.getItem("bigqueryHistory") || "[]"
    );
    let currentResults = null;
    let queryStartTime = null;

    const exampleQueries = {
      basic: `SELECT \n  column1,\n  column2,\n  column3\nFROM \`project.dataset.table\`\nLIMIT 100;`,

      aggregate: `SELECT \n  category,\n  COUNT(*) as total_count,\n  AVG(value) as avg_value,\n  SUM(amount) as total_amount\nFROM \`project.dataset.table\`\nGROUP BY category\nORDER BY total_count DESC;`,

      join: `SELECT \n  a.id,\n  a.name,\n  b.description\nFROM \`project.dataset.table_a\` a\nLEFT JOIN \`project.dataset.table_b\` b\n  ON a.id = b.table_a_id\nWHERE a.status = 'active';`,

      analytics: `SELECT \n  date,\n  value,\n  LAG(value) OVER (ORDER BY date) as prev_value,\n  RANK() OVER (ORDER BY value DESC) as rank\nFROM \`project.dataset.table\`\nWHERE date >= '2023-01-01'\nORDER BY date;`,
    };

    function setQuery(query) {
      document.getElementById("sqlQuery").value = query;
    }

    async function executeQuery() {
      const query = document.getElementById("sqlQuery").value.trim();
      if (!query) {
        alert("ProszÄ™ wprowadziÄ‡ zapytanie SQL");
        return;
      }

      const executeBtn = document.getElementById("executeBtn");
      const progressSection = document.getElementById("progressSection");
      const resultsSection = document.getElementById("resultsSection");

      // Start execution
      executeBtn.disabled = true;
      executeBtn.textContent = "Wykonywanie...";
      progressSection.classList.remove("hidden");
      resultsSection.classList.add("hidden");

      queryStartTime = Date.now();

      // Update timer
      const timerInterval = setInterval(() => {
        const elapsed = ((Date.now() - queryStartTime) / 1000).toFixed(1);
        document.getElementById("queryTime").textContent = elapsed + "s";
      }, 100);

      try {
        const projectId = document.getElementById("projectId").value;
        const datasetId = document.getElementById("datasetId").value;
        const rowLimit = parseInt(document.getElementById("rowLimit").value);
        const format = document.getElementById("outputFormat").value;

        const response = await fetch("/api/bigquery-light", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            query,
            projectId,
            datasetId,
            rowLimit,
            format,
          }),
        });

        const data = await response.json();

        clearInterval(timerInterval);

        if (data.success) {
          currentResults = data.results;
          displayResults(data.results, data.metadata);

          // Add to history
          addToHistory(query, data.metadata);
        } else {
          throw new Error(data.error || "BÅ‚Ä…d wykonania zapytania");
        }
      } catch (error) {
        clearInterval(timerInterval);
        console.error("Query error:", error);
        displayError(error.message);
      } finally {
        // Reset UI
        executeBtn.disabled = false;
        executeBtn.textContent = "ðŸš€ Wykonaj Zapytanie";
        setTimeout(() => {
          progressSection.classList.add("hidden");
        }, 500);
      }
    }

    function displayResults(results, metadata) {
      const resultsSection = document.getElementById("resultsSection");
      const resultsContent = document.getElementById("resultsContent");
      const resultsInfo = document.getElementById("resultsInfo");

      resultsInfo.textContent = `${metadata.rowCount} wierszy, ${metadata.columnCount} kolumn, czas: ${metadata.executionTime}s`;

      if (results.length === 0) {
        resultsContent.innerHTML =
          '<div class="text-gray-400 text-center py-8">Brak wynikÃ³w</div>';
      } else {
        const format = document.getElementById("outputFormat").value;

        if (format === "table") {
          displayTableResults(results, resultsContent);
        } else if (format === "json") {
          displayJsonResults(results, resultsContent);
        } else if (format === "csv") {
          displayCsvResults(results, resultsContent);
        }
      }

      resultsSection.classList.remove("hidden");
    }

    function displayTableResults(results, container) {
      if (results.length === 0) return;

      const columns = Object.keys(results[0]);
      let html = '<table class="results-table"><thead><tr>';

      columns.forEach((col) => {
        html += `<th>${col}</th>`;
      });
      html += "</tr></thead><tbody>";

      results.forEach((row) => {
        html += "<tr>";
        columns.forEach((col) => {
          const value = row[col];
          html += `<td>${value !== null && value !== undefined ? value : '<span class="text-gray-500">NULL</span>'}</td>`;
        });
        html += "</tr>";
      });

      html += "</tbody></table>";
      container.innerHTML = html;
    }

    function displayJsonResults(results, container) {
      const json = JSON.stringify(results, null, 2);
      container.innerHTML = `<pre class="text-green-400 text-sm overflow-auto"><code>${json}</code></pre>`;
    }

    function displayCsvResults(results, container) {
      if (results.length === 0) return;

      const columns = Object.keys(results[0]);
      let csv = columns.join(",") + "\n";

      results.forEach((row) => {
        const values = columns.map((col) => {
          const value = row[col];
          return value !== null && value !== undefined ? `"${value}"` : "";
        });
        csv += values.join(",") + "\n";
      });

      container.innerHTML = `<pre class="text-blue-400 text-sm overflow-auto"><code>${csv}</code></pre>`;
    }

    function displayError(error) {
      const resultsSection = document.getElementById("resultsSection");
      const resultsContent = document.getElementById("resultsContent");
      const resultsInfo = document.getElementById("resultsInfo");

      resultsInfo.textContent = "BÅ‚Ä…d wykonania zapytania";
      resultsContent.innerHTML = `<div class="bg-red-600/20 border border-red-400/30 rounded p-4">
        <div class="text-red-400 font-semibold mb-2">BÅ‚Ä…d SQL:</div>
        <div class="text-primary-foreground">${error}</div>
      </div>`;

      resultsSection.classList.remove("hidden");
    }

    function saveQuery() {
      const query = document.getElementById("sqlQuery").value.trim();
      if (!query) {
        alert("Brak zapytania do zapisania");
        return;
      }

      const name = prompt("Nazwa zapytania:");
      if (name) {
        const savedQueries = JSON.parse(
          localStorage.getItem("savedQueries") || "[]"
        );
        savedQueries.push({
          id: Date.now(),
          name,
          query,
          timestamp: new Date().toISOString(),
        });
        localStorage.setItem("savedQueries", JSON.stringify(savedQueries));
        alert("Zapytanie zostaÅ‚o zapisane");
      }
    }

    function loadQuery() {
      const savedQueries = JSON.parse(
        localStorage.getItem("savedQueries") || "[]"
      );
      if (savedQueries.length === 0) {
        alert("Brak zapisanych zapytaÅ„");
        return;
      }

      const options = savedQueries.map((q, i) => `${i}: ${q.name}`).join("\n");
      const choice = prompt(`Wybierz zapytanie:\n${options}`);

      if (choice !== null) {
        const index = parseInt(choice);
        if (index >= 0 && index < savedQueries.length) {
          document.getElementById("sqlQuery").value = savedQueries[index].query;
        }
      }
    }

    function clearQuery() {
      if (confirm("Czy na pewno chcesz wyczyÅ›ciÄ‡ zapytanie?")) {
        document.getElementById("sqlQuery").value = "";
      }
    }

    function exportResults(format) {
      if (!currentResults) {
        alert("Brak wynikÃ³w do eksportu");
        return;
      }

      let content, filename, mimeType;

      if (format === "csv") {
        content = convertToCSV(currentResults);
        filename = "bigquery_results.csv";
        mimeType = "text/csv";
      } else if (format === "json") {
        content = JSON.stringify(currentResults, null, 2);
        filename = "bigquery_results.json";
        mimeType = "application/json";
      }

      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
    }

    function convertToCSV(data) {
      if (data.length === 0) return "";

      const columns = Object.keys(data[0]);
      let csv = columns.join(",") + "\n";

      data.forEach((row) => {
        const values = columns.map((col) => {
          const value = row[col];
          return value !== null && value !== undefined ? `"${value}"` : "";
        });
        csv += values.join(",") + "\n";
      });

      return csv;
    }

    function createChart() {
      if (!currentResults || currentResults.length === 0) {
        alert("Brak danych do stworzenia wykresu");
        return;
      }

      // This would open a chart creation interface
      alert("Funkcja tworzenia wykresÃ³w bÄ™dzie dostÄ™pna wkrÃ³tce");
    }

    function addToHistory(query, metadata) {
      const historyItem = {
        id: Date.now(),
        query: query.substring(0, 100) + (query.length > 100 ? "..." : ""),
        fullQuery: query,
        timestamp: new Date().toISOString(),
        metadata,
      };

      queryHistory.unshift(historyItem);
      if (queryHistory.length > 20) {
        queryHistory = queryHistory.slice(0, 20);
      }

      localStorage.setItem("bigqueryHistory", JSON.stringify(queryHistory));
      updateHistoryDisplay();
    }

    function updateHistoryDisplay() {
      const historyList = document.getElementById("queryHistoryList");
      historyList.innerHTML = "";

      queryHistory.forEach((item) => {
        const historyItem = document.createElement("div");
        historyItem.className =
          "history-item border border-edge rounded-lg p-3 cursor-pointer hover:border-cyan-400 transition-colors";
        item.style.background = "rgba(0, 0, 0, 0.5)";

        const date = new Date(item.timestamp).toLocaleDateString("pl-PL");
        const time = new Date(item.timestamp).toLocaleTimeString("pl-PL");

        historyItem.innerHTML = `
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <p class="text-primary-foreground text-sm font-medium">${item.query}</p>
              <p class="text-gray-400 text-xs">${date} ${time} â€¢ ${item.metadata.rowCount} wierszy</p>
            </div>
            <button onclick="deleteFromHistory(${item.id})" class="text-red-400 hover:text-red-300 text-xs ml-2">âœ•</button>
          </div>
        `;

        historyItem.onclick = (e) => {
          if (e.target.tagName !== "BUTTON") {
            document.getElementById("sqlQuery").value = item.fullQuery;
          }
        };

        historyList.appendChild(historyItem);
      });
    }

    function deleteFromHistory(id) {
      event.stopPropagation();
      if (confirm("Czy na pewno chcesz usunÄ…Ä‡ to zapytanie z historii?")) {
        queryHistory = queryHistory.filter((item) => item.id !== id);
        localStorage.setItem("bigqueryHistory", JSON.stringify(queryHistory));
        updateHistoryDisplay();
      }
    }

    // Line counter for SQL editor
    function updateLineCounter() {
      const textarea = document.getElementById("sqlQuery");
      const counter = document.getElementById("lineCounter");

      const text = textarea.value;
      const lines = text.split("\n").length;
      const cursorPos = textarea.selectionStart;
      const textBeforeCursor = text.substring(0, cursorPos);
      const currentLine = textBeforeCursor.split("\n").length;
      const currentCol = textBeforeCursor.split("\n").pop().length + 1;

      counter.textContent = `Linia: ${currentLine}, Kolumna: ${currentCol}`;
    }

    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      updateHistoryDisplay();

      // Add line counter event listener
      const sqlQuery = document.getElementById("sqlQuery");
      sqlQuery.addEventListener("input", updateLineCounter);
      sqlQuery.addEventListener("click", updateLineCounter);
      sqlQuery.addEventListener("keyup", updateLineCounter);

      // Add event listeners for all data-action buttons
      document.querySelectorAll('[data-action]').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const action = this.getAttribute('data-action');
          
          switch(action) {
            case 'save-query':
              saveQuery();
              break;
            case 'load-query':
              loadQuery();
              break;
            case 'clear-query':
              clearQuery();
              break;
            case 'execute-query':
              executeQuery();
              break;
            case 'export-csv':
              exportResults('csv');
              break;
            case 'export-json':
              exportResults('json');
              break;
            case 'create-chart':
              createChart();
              break;
            case 'set-query-basic':
              setQuery(exampleQueries.basic);
              break;
            case 'set-query-aggregate':
              setQuery(exampleQueries.aggregate);
              break;
            case 'set-query-join':
              setQuery(exampleQueries.join);
              break;
            case 'set-query-analytics':
              setQuery(exampleQueries.analytics);
              break;
            default:
              console.log('Unknown action:', action);
          }
        });
      });

      // Load quick query if available
      const quickQuery = localStorage.getItem("quickSQLQuery");
      if (quickQuery) {
        document.getElementById("sqlQuery").value = quickQuery;
        localStorage.removeItem("quickSQLQuery");
      }
    });

    // POLACZEK_T Assistant
    const polaczekBtn = document.getElementById('polaczekBtn');
    const polaczekWidget = document.getElementById('polaczekWidget');

    polaczekBtn.addEventListener('click', () => {
      polaczekWidget.classList.toggle('hidden');
    });
  </script>
</BackroomInterface>