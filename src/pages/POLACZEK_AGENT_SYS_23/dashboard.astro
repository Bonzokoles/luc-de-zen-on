---
import MyBonzoLayout from "../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../components/DecorativeLines.astro";
---

<MyBonzoLayout siteTitle="POLACZEK Agent System 23 - Dashboard">
  <DecorativeLines />

  <!-- Global vertical lines for workers sections -->
  <div class="workers-vertical-line-left"></div>
  <div class="workers-vertical-line-right"></div>

  <main class="min-h-svh">
    <!-- Top Separator Section -->
    <section class="border border-edge relative">
      <div class="max-w-6xl mx-auto">
        <div class="py-1"></div>
      </div>
    </section>

    <!-- Header Section - Styl nr.1 -->
    <section class="border border-edge relative">
      <div class="max-w-6xl mx-auto">
        <div class="flex justify-between max-h-72 min-h-64">
          <!-- Left corner - Dashboard info -->
          <div class="mt-auto" style="max-width: 45vw;">
            <div
              class="text-edge text-sm italic px-2"
              style="
                transform: scale(1.32);
                transform-origin: left center;
                margin: 15px;
                margin-left: 0px;
                width: calc(45vw - 30px);
                max-width: 380px;
                line-height: 1.4;
                word-wrap: break-word;
                hyphens: auto;
              "
            >
              đź¤– POLACZEK DASHBOARD - Centrum<br />
              zarzÄ…dzania agentami AI. Monitoruj,<br />
              kontroluj i optymalizuj wydajnoĹ›Ä‡<br />
              wszystkich aktywnych agentĂłw.
            </div>
          </div>
          <span class="mt-auto">
            <div
              style="
              transform: scale(1.56);
              transform-origin: center right;
              margin: 30px;
              margin-right: 0px;
              line-height: 1.1;
              "
              class="text-edge font-bold text-right"
            >
              DASHBOARD<br />
              CONTROL
            </div>
          </span>
        </div>
      </div>
    </section>

    <!-- Main Dashboard Content with transparent background -->
    <section class="border border-edge relative">
      <div class="max-w-6xl mx-auto">
        <!-- Dashboard background with 55% transparency -->
        <div style="background: rgba(0, 0, 0, 0.55); border: 1px solid white; border-radius: 0; padding: 2rem;">
          
          <!-- System Status Panel -->
          <div class="mb-8">
            <h2 class="text-2xl font-bold text-white mb-4">đź“Š Status Systemu</h2>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div style="background: rgba(34, 197, 94, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="active-agents">0</div>
                  <div class="text-sm">Aktywne Agenty</div>
                </div>
              </div>
              <div style="background: rgba(59, 130, 246, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="total-messages">0</div>
                  <div class="text-sm">WiadomoĹ›ci</div>
                </div>
              </div>
              <div style="background: rgba(168, 85, 247, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="system-health">100%</div>
                  <div class="text-sm">Zdrowie Systemu</div>
                </div>
              </div>
              <div style="background: rgba(245, 101, 101, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="error-count">0</div>
                  <div class="text-sm">BĹ‚Ä™dy</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Quick Actions -->
          <div class="mb-8">
            <h3 class="text-xl font-bold text-white mb-4">đźš€ Szybkie Akcje</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button
                onclick="window.open('/POLACZEK_AGENT_SYS_23/agents/create', '_blank')"
                style="background: rgba(34, 197, 94, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">+ StwĂłrz Agenta</div>
                <div class="text-sm">Nowy agent AI</div>
              </button>
              <button
                onclick="refreshAgentsList()"
                style="background: rgba(59, 130, 246, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">đź”„ OdĹ›wieĹĽ</div>
                <div class="text-sm">Lista agentĂłw</div>
              </button>
              <button
                onclick="window.open('/POLACZEK_AGENT_SYS_23', '_blank')"
                style="background: rgba(168, 85, 247, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">đźŹ  SDK</div>
                <div class="text-sm">GĹ‚Ăłwna strona</div>
              </button>
            </div>
          </div>

          <!-- Active Agents List -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-white">đź¤– Aktywne Agenty</h3>
              <div class="text-sm text-gray-300">Ostatnia aktualizacja: <span id="last-update">Nigdy</span></div>
            </div>
            <div id="agents-container" style="background: rgba(0, 0, 0, 0.3); border: 1px solid white; border-radius: 0; padding: 1rem;">
              <div class="text-center text-gray-400 py-8" id="loading-message">
                Ĺadowanie agentĂłw...
              </div>
            </div>
          </div>

        </div>
      </div>
    </section>
  </main>

  <!-- JavaScript Dashboard Functions -->
  <script>
    // Dashboard state
    let agentsData = [];
    let lastUpdateTime = null;

    // Load agents data from API
    async function loadAgents() {
      try {
        document.getElementById('loading-message').textContent = 'Ĺadowanie agentĂłw...';
        
        const response = await fetch('/POLACZEK_AGENT_SYS_23/api/agents/list');
        const data = await response.json();
        
        if (data.success) {
          agentsData = data.agents || [];
          renderAgents();
          updateSystemStats();
          lastUpdateTime = new Date();
          document.getElementById('last-update').textContent = lastUpdateTime.toLocaleTimeString();
        } else {
          throw new Error(data.error || 'BĹ‚Ä…d Ĺ‚adowania agentĂłw');
        }
      } catch (error) {
        console.error('Error loading agents:', error);
        document.getElementById('agents-container').innerHTML = `
          <div class="text-center text-red-400 py-8">
            âťŚ BĹ‚Ä…d Ĺ‚adowania agentĂłw: ${error.message}
            <br><button onclick="loadAgents()" class="mt-2 px-4 py-2 bg-blue-600 text-white hover:bg-blue-500" style="border-radius: 0;">SprĂłbuj ponownie</button>
          </div>
        `;
      }
    }

    // Render agents list
    function renderAgents() {
      const container = document.getElementById('agents-container');
      
      if (agentsData.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-400 py-8">
            đź“­ Brak aktywnych agentĂłw
            <br><a href="/POLACZEK_AGENT_SYS_23/agents/create" class="mt-2 inline-block px-4 py-2 bg-green-600 text-white hover:bg-green-500" style="border-radius: 0;">StwĂłrz pierwszego agenta</a>
          </div>
        `;
        return;
      }

      const agentsHTML = agentsData.map(agent => `
        <div style="background: rgba(255, 255, 255, 0.1); border: 1px solid white; border-radius: 0; padding: 1rem; margin-bottom: 1rem;">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                <span class="text-lg font-bold text-white">${agent.name}</span>
                <span class="px-2 py-1 text-xs font-bold ${getStatusColor(agent.status)}" style="border-radius: 0;">
                  ${getStatusText(agent.status)}
                </span>
                <span class="px-2 py-1 text-xs bg-gray-600 text-white" style="border-radius: 0;">
                  ${agent.type}
                </span>
              </div>
              <p class="text-gray-300 text-sm mb-2">${agent.description}</p>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
                <div class="text-gray-400">CPU: <span class="text-white">${agent.cpu_usage}%</span></div>
                <div class="text-gray-400">RAM: <span class="text-white">${agent.memory_usage}MB</span></div>
                <div class="text-gray-400">WiadomoĹ›ci: <span class="text-white">${agent.messages_processed}</span></div>
                <div class="text-gray-400">BĹ‚Ä™dy: <span class="text-white">${agent.errors_count}</span></div>
              </div>
            </div>
            <div class="flex gap-2 ml-4">
              ${getActionButtons(agent)}
            </div>
          </div>
        </div>
      `).join('');

      container.innerHTML = agentsHTML;
    }

    // Get status color class
    function getStatusColor(status) {
      switch (status) {
        case 'running': return 'bg-green-600 text-white';
        case 'stopped': return 'bg-red-600 text-white';
        case 'starting': return 'bg-yellow-600 text-white';
        case 'error': return 'bg-red-700 text-white';
        default: return 'bg-gray-600 text-white';
      }
    }

    // Get status text
    function getStatusText(status) {
      switch (status) {
        case 'running': return 'DZIAĹA';
        case 'stopped': return 'ZATRZYMANY';
        case 'starting': return 'URUCHAMIA';
        case 'error': return 'BĹÄ„D';
        default: return status.toUpperCase();
      }
    }

    // Get action buttons for agent
    function getActionButtons(agent) {
      if (agent.status === 'running') {
        return `
          <button onclick="controlAgent('${agent.name}', 'stop')" 
                  class="px-3 py-1 bg-red-600 text-white hover:bg-red-500 text-xs" 
                  style="border-radius: 0;">STOP</button>
          <button onclick="controlAgent('${agent.name}', 'restart')" 
                  class="px-3 py-1 bg-yellow-600 text-white hover:bg-yellow-500 text-xs" 
                  style="border-radius: 0;">RESTART</button>
        `;
      } else {
        return `
          <button onclick="controlAgent('${agent.name}', 'start')" 
                  class="px-3 py-1 bg-green-600 text-white hover:bg-green-500 text-xs" 
                  style="border-radius: 0;">START</button>
          <button onclick="controlAgent('${agent.name}', 'kill')" 
                  class="px-3 py-1 bg-red-700 text-white hover:bg-red-600 text-xs" 
                  style="border-radius: 0;">USUĹ</button>
        `;
      }
    }

    // Control agent (start/stop/restart/kill)
    async function controlAgent(agentName, action) {
      try {
        const response = await fetch('/POLACZEK_AGENT_SYS_23/api/agents/control', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            agent_id: agentName,
            action: action
          })
        });

        const result = await response.json();
        
        if (result.success) {
          // Show success message
          showNotification(`âś… Agent ${agentName}: ${action} - ${result.message}`, 'success');
          // Refresh agents list
          setTimeout(() => loadAgents(), 1000);
        } else {
          throw new Error(result.error || 'Operacja nieudana');
        }
      } catch (error) {
        console.error('Control agent error:', error);
        showNotification(`âťŚ BĹ‚Ä…d kontroli agenta: ${error.message}`, 'error');
      }
    }

    // Update system statistics
    function updateSystemStats() {
      const activeCount = agentsData.filter(a => a.status === 'running').length;
      const totalMessages = agentsData.reduce((sum, a) => sum + (a.messages_processed || 0), 0);
      const totalErrors = agentsData.reduce((sum, a) => sum + (a.errors_count || 0), 0);
      const healthScore = agentsData.length > 0 ? Math.round((activeCount / agentsData.length) * 100) : 100;

      document.getElementById('active-agents').textContent = activeCount;
      document.getElementById('total-messages').textContent = totalMessages.toLocaleString();
      document.getElementById('error-count').textContent = totalErrors;
      document.getElementById('system-health').textContent = healthScore + '%';
    }

    // Show notification
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem;
        border-radius: 0;
        color: white;
        z-index: 1000;
        background: ${type === 'success' ? 'rgba(34, 197, 94, 0.9)' : 'rgba(239, 68, 68, 0.9)'};
        border: 1px solid ${type === 'success' ? '#22c55e' : '#ef4444'};
      `;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => {
        document.body.removeChild(notification);
      }, 5000);
    }

    // Refresh agents list
    function refreshAgentsList() {
      loadAgents();
    }

    // Auto-refresh every 30 seconds
    function startAutoRefresh() {
      setInterval(() => {
        if (document.visibilityState === 'visible') {
          loadAgents();
        }
      }, 30000);
    }

    // Initialize dashboard when page loads
    document.addEventListener('DOMContentLoaded', function() {
      loadAgents();
      startAutoRefresh();
    });
  </script>

</MyBonzoLayout>
