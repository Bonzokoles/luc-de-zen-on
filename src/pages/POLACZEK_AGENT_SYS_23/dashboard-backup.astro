---
import MyBonzoLayout from "../../layouts/MyBonzoLayout.astro";
import DecorativeLines from "../../components/DecorativeLines.astro";
---

<MyBonzoLayout siteTitle="POLACZEK Agent System 23 - Dashboard">
  <DecorativeLines />

  <!-- Global vertical lines for workers sections -->
  <div class="workers-vertical-line-left"></div>
  <div class="workers-vertical-line-right"></div>

  <main class="min-h-svh">
    <!-- Header Section - Styl nr.1 -->
    <section class="border border-edge relative">
      <div class="max-w-6xl mx-auto">
        <div class="flex justify-between max-h-72 min-h-64">
          <!-- Left corner - Dashboard info -->
          <div class="mt-auto" style="max-width: 45vw;">
            <div
              class="text-edge text-sm italic px-2"
              style="
                transform: scale(1.32);
                transform-origin: left center;
                margin: 15px;
                margin-left: 0px;
                width: calc(45vw - 30px);
                max-width: 380px;
                line-height: 1.4;
                word-wrap: break-word;
                hyphens: auto;
              "
            >
              ü§ñ POLACZEK DASHBOARD - Centrum<br />
              zarzƒÖdzania agentami AI. Monitoruj,<br />
              kontroluj i optymalizuj wydajno≈õƒá<br />
              wszystkich aktywnych agent√≥w.
            </div>
          </div>
          <span class="mt-auto">
            <div
              style="
              transform: scale(1.56);
              transform-origin: center right;
              margin: 30px;
              margin-right: 0px;
              line-height: 1.1;
              "
              class="text-edge font-bold text-right"
            >
              DASHBOARD<br />
              CONTROL
            </div>
          </span>
        </div>
      </div>
    </section>

    <!-- Main Dashboard Content with transparent background -->
    <section class="border border-edge relative">
      <div class="max-w-6xl mx-auto">
        <!-- Dashboard background with 55% transparency -->
        <div style="background: rgba(0, 0, 0, 0.55); border-radius: 0; padding: 2rem;">
          
          <!-- System Status Panel -->
          <div class="mb-8">
            <h2 class="text-2xl font-bold text-white mb-4">üìä Status Systemu</h2>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div style="background: rgba(34, 197, 94, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="active-agents">0</div>
                  <div class="text-sm">Aktywne Agenty</div>
                </div>
              </div>
              <div style="background: rgba(59, 130, 246, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="total-messages">0</div>
                  <div class="text-sm">Wiadomo≈õci</div>
                </div>
              </div>
              <div style="background: rgba(168, 85, 247, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="system-health">100%</div>
                  <div class="text-sm">Zdrowie Systemu</div>
                </div>
              </div>
              <div style="background: rgba(245, 101, 101, 0.8); border-radius: 0; padding: 1rem;">
                <div class="text-white">
                  <div class="text-2xl font-bold" id="error-count">0</div>
                  <div class="text-sm">B≈Çƒôdy</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Quick Actions -->
          <div class="mb-8">
            <h3 class="text-xl font-bold text-white mb-4">üöÄ Szybkie Akcje</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button
                onclick="window.open('/POLACZEK_AGENT_SYS_23/agents/create', '_blank')"
                style="background: rgba(34, 197, 94, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">+ Stw√≥rz Agenta</div>
                <div class="text-sm">Nowy agent AI</div>
              </button>
              <button
                onclick="refreshAgentsList()"
                style="background: rgba(59, 130, 246, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">üîÑ Od≈õwie≈º</div>
                <div class="text-sm">Lista agent√≥w</div>
              </button>
              <button
                onclick="window.open('/POLACZEK_AGENT_SYS_23', '_blank')"
                style="background: rgba(168, 85, 247, 0.8); border-radius: 0; padding: 1rem; color: white; border: none; cursor: pointer;"
                class="hover:opacity-80 transition-opacity"
              >
                <div class="text-lg font-bold">üè† SDK</div>
                <div class="text-sm">G≈Ç√≥wna strona</div>
              </button>
            </div>
          </div>

          <!-- Active Agents List -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-white">ü§ñ Aktywne Agenty</h3>
              <div class="text-sm text-gray-300">Ostatnia aktualizacja: <span id="last-update">Nigdy</span></div>
            </div>
            <div id="agents-container" style="background: rgba(0, 0, 0, 0.3); border-radius: 0; padding: 1rem;">
              <div class="text-center text-gray-400 py-8" id="loading-message">
                ≈Åadowanie agent√≥w...
              </div>
            </div>
          </div>

        </div>
      </div>
    </section>
                <div class="text-sm opacity-90">Aktywne Agenty</div>
              </div>
            </div>
            <div class="bg-gradient-to-br from-blue-600 to-blue-700 rounded-lg p-4">
              <div class="text-white">
                <div class="text-2xl font-bold" id="total-agents">0</div>
                <div class="text-sm opacity-90">≈ÅƒÖcznie Agent√≥w</div>
              </div>
            </div>
            <div class="bg-gradient-to-br from-orange-600 to-orange-700 rounded-lg p-4">
              <div class="text-white">
                <div class="text-2xl font-bold" id="pending-tasks">0</div>
                <div class="text-sm opacity-90">OczekujƒÖce Zadania</div>
              </div>
            </div>
            <div class="bg-gradient-to-br from-purple-600 to-purple-700 rounded-lg p-4">
              <div class="text-white">
                <div class="text-2xl font-bold" id="system-health">100%</div>
                <div class="text-sm opacity-90">Zdrowie Systemu</div>
              </div>
            </div>
          </div>
        </div>
      </GlassPanel>

      <!-- Active Agents Grid -->
      <GlassPanel class="mb-8">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-bold text-white">ü§ñ Aktywne Agenty</h2>
            <button 
              id="refresh-agents" 
              class="px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded-lg text-white transition-colors"
            >
              üîÑ Od≈õwie≈º
            </button>
          </div>
          <div id="agents-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Agent cards will be dynamically loaded here -->
          </div>
        </div>
      </GlassPanel>

      <!-- Quick Actions -->
      <GlassPanel>
        <div class="p-6">
          <h2 class="text-2xl font-bold text-white mb-4">‚ö° Szybkie Akcje</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <CyberpunkButton 
              href="/POLACZEK_AGENT_SYS_23/monitor" 
              class="bg-red-600 hover:bg-red-500"
            >
              üìà Monitoring Systemu
            </CyberpunkButton>
            <CyberpunkButton 
              href="/POLACZEK_AGENT_SYS_23/analytics" 
              class="bg-purple-600 hover:bg-purple-500"
            >
              üìä Analityka
            </CyberpunkButton>
            <CyberpunkButton 
              href="/POLACZEK_AGENT_SYS_23/logs" 
              class="bg-gray-600 hover:bg-gray-500"
            >
              üìù Logi Systemu
            </CyberpunkButton>
            <CyberpunkButton 
              href="/POLACZEK_AGENT_SYS_23/settings" 
              class="bg-indigo-600 hover:bg-indigo-500"
            >
              ‚öôÔ∏è Ustawienia
            </CyberpunkButton>
          </div>
        </div>
      </GlassPanel>
    </div>
  </main>

  <!-- Agent Management Modal -->
  <div id="agent-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-900 rounded-xl border border-cyan-500/30 p-6 max-w-md w-full">
        <div class="flex justify-between items-center mb-4">
          <h3 id="modal-title" class="text-xl font-bold text-white"></h3>
          <button id="close-modal" class="text-gray-400 hover:text-white">
            ‚úï
          </button>
        </div>
        <div id="modal-content" class="text-gray-300">
          <!-- Modal content will be dynamically loaded -->
        </div>
        <div class="flex justify-end space-x-2 mt-6">
          <button id="modal-cancel" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-white transition-colors">
            Anuluj
          </button>
          <button id="modal-action" class="px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded-lg text-white transition-colors">
            Wykonaj
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Dashboard functionality
    class AgentDashboard {
      constructor() {
        this.agents = new Map();
        this.websocket = null;
        this.init();
      }

      async init() {
        this.setupEventListeners();
        await this.connectWebSocket();
        await this.loadAgents();
        this.startStatusUpdates();
      }

      setupEventListeners() {
        document.getElementById('refresh-agents')?.addEventListener('click', () => {
          this.loadAgents();
        });

        document.getElementById('close-modal')?.addEventListener('click', () => {
          this.hideModal();
        });

        document.getElementById('modal-cancel')?.addEventListener('click', () => {
          this.hideModal();
        });
      }

      async connectWebSocket() {
        try {
          const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
          const wsUrl = `${protocol}//${window.location.host}/api/agents/websocket`;
          
          this.websocket = new WebSocket(wsUrl);
          
          this.websocket.onopen = () => {
            console.log('WebSocket connected to agent system');
          };

          this.websocket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleWebSocketMessage(data);
          };

          this.websocket.onclose = () => {
            console.log('WebSocket disconnected, retrying...');
            setTimeout(() => this.connectWebSocket(), 5000);
          };
        } catch (error) {
          console.error('WebSocket connection error:', error);
        }
      }

      handleWebSocketMessage(data) {
        switch (data.type) {
          case 'agent_status_update':
            this.updateAgentStatus(data.agent_name, data.status);
            break;
          case 'system_stats':
            this.updateSystemStats(data.stats);
            break;
          case 'agent_log':
            console.log(`[${data.agent_name}]`, data.message);
            break;
        }
      }

      async loadAgents() {
        try {
          const response = await fetch('/POLACZEK_AGENT_SYS_23/api/agents/list');
          const data = await response.json();
          
          if (data.success) {
            this.renderAgents(data.agents);
            this.updateSystemStats(data.system_stats);
          }
        } catch (error) {
          console.error('Error loading agents:', error);
        }
      }

      renderAgents(agents) {
        const grid = document.getElementById('agents-grid');
        if (!grid) return;

        grid.innerHTML = agents.map(agent => `
          <div class="bg-gray-800/50 rounded-lg p-4 border border-cyan-500/20 hover:border-cyan-500/40 transition-colors">
            <div class="flex justify-between items-start mb-2">
              <div class="flex items-center space-x-2">
                <div class="w-3 h-3 rounded-full ${this.getStatusColor(agent.status)}"></div>
                <h3 class="text-lg font-semibold text-white">${agent.name}</h3>
              </div>
              <span class="text-xs px-2 py-1 rounded-full ${this.getTypeColor(agent.type)}">${agent.type}</span>
            </div>
            <p class="text-sm text-gray-400 mb-3">${agent.description || 'Brak opisu'}</p>
            <div class="text-xs text-gray-500 mb-3">
              <div>Status: ${agent.status}</div>
              <div>Ostatnia aktywno≈õƒá: ${this.formatTime(agent.last_activity)}</div>
              ${agent.cpu_usage ? `<div>CPU: ${agent.cpu_usage}%</div>` : ''}
            </div>
            <div class="flex space-x-2">
              <button 
                onclick="dashboard.controlAgent('${agent.name}', '${agent.status === 'running' ? 'stop' : 'start'}')"
                class="flex-1 py-2 px-3 rounded text-xs font-medium transition-colors
                       ${agent.status === 'running' 
                         ? 'bg-red-600 hover:bg-red-500 text-white' 
                         : 'bg-green-600 hover:bg-green-500 text-white'}"
              >
                ${agent.status === 'running' ? '‚èπÔ∏è Stop' : '‚ñ∂Ô∏è Start'}
              </button>
              <button 
                onclick="dashboard.showAgentDetails('${agent.name}')"
                class="py-2 px-3 bg-blue-600 hover:bg-blue-500 rounded text-xs font-medium text-white transition-colors"
              >
                üìä Szczeg√≥≈Çy
              </button>
            </div>
          </div>
        `).join('');

        this.updateSystemStats({
          total_agents: agents.length,
          active_agents: agents.filter(a => a.status === 'running').length
        });
      }

      updateSystemStats(stats) {
        if (stats.total_agents !== undefined) {
          document.getElementById('total-agents').textContent = stats.total_agents;
        }
        if (stats.active_agents !== undefined) {
          document.getElementById('active-agents').textContent = stats.active_agents;
        }
        if (stats.pending_tasks !== undefined) {
          document.getElementById('pending-tasks').textContent = stats.pending_tasks;
        }
        if (stats.system_health !== undefined) {
          document.getElementById('system-health').textContent = `${stats.system_health}%`;
        }
      }

      async controlAgent(agentName, action) {
        try {
          const response = await fetch('/POLACZEK_AGENT_SYS_23/api/agents/control', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              agent_name: agentName,
              action: action
            })
          });

          const data = await response.json();
          
          if (data.success) {
            console.log(`Agent ${agentName} ${action} successful`);
            await this.loadAgents(); // Refresh the agent list
          } else {
            console.error(`Failed to ${action} agent ${agentName}:`, data.error);
          }
        } catch (error) {
          console.error(`Error controlling agent ${agentName}:`, error);
        }
      }

      showAgentDetails(agentName) {
        this.showModal(`Szczeg√≥≈Çy agenta: ${agentName}`, `
          <div class="space-y-3">
            <div>≈Åadowanie szczeg√≥≈Ç√≥w agenta...</div>
            <div class="animate-pulse bg-gray-700 h-4 rounded w-3/4"></div>
            <div class="animate-pulse bg-gray-700 h-4 rounded w-1/2"></div>
          </div>
        `);

        // Load detailed agent info
        this.loadAgentDetails(agentName);
      }

      async loadAgentDetails(agentName) {
        try {
          const response = await fetch(`/POLACZEK_AGENT_SYS_23/api/agents/details/${agentName}`);
          const data = await response.json();
          
          if (data.success) {
            const details = data.agent;
            document.getElementById('modal-content').innerHTML = `
              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-gray-400">Nazwa:</label>
                  <div class="text-white">${details.name}</div>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-400">Typ:</label>
                  <div class="text-white">${details.type}</div>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-400">Status:</label>
                  <div class="text-white">${details.status}</div>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-400">Ostatnia aktywno≈õƒá:</label>
                  <div class="text-white">${this.formatTime(details.last_activity)}</div>
                </div>
                ${details.memory_usage ? `
                <div>
                  <label class="text-sm font-medium text-gray-400">U≈ºycie pamiƒôci:</label>
                  <div class="text-white">${details.memory_usage} MB</div>
                </div>
                ` : ''}
                ${details.messages_processed ? `
                <div>
                  <label class="text-sm font-medium text-gray-400">Przetworzonych wiadomo≈õci:</label>
                  <div class="text-white">${details.messages_processed}</div>
                </div>
                ` : ''}
              </div>
            `;
          }
        } catch (error) {
          console.error('Error loading agent details:', error);
        }
      }

      showModal(title, content) {
        document.getElementById('modal-title').textContent = title;
        document.getElementById('modal-content').innerHTML = content;
        document.getElementById('agent-modal').classList.remove('hidden');
      }

      hideModal() {
        document.getElementById('agent-modal').classList.add('hidden');
      }

      getStatusColor(status) {
        switch (status) {
          case 'running': return 'bg-green-500';
          case 'stopped': return 'bg-red-500';
          case 'error': return 'bg-orange-500';
          default: return 'bg-gray-500';
        }
      }

      getTypeColor(type) {
        switch (type) {
          case 'monitor': return 'bg-red-500/20 text-red-300';
          case 'translator': return 'bg-blue-500/20 text-blue-300';
          case 'searcher': return 'bg-green-500/20 text-green-300';
          case 'dashboard': return 'bg-purple-500/20 text-purple-300';
          default: return 'bg-gray-500/20 text-gray-300';
        }
      }

      formatTime(timestamp) {
        if (!timestamp) return 'Nieznany';
        try {
          return new Date(timestamp).toLocaleString('pl-PL');
        } catch {
          return 'Nieprawid≈Çowy czas';
        }
      }

      startStatusUpdates() {
        // Refresh agents every 30 seconds
        setInterval(() => {
          this.loadAgents();
        }, 30000);
      }

      updateAgentStatus(agentName, status) {
        // Update specific agent status without full reload
        const agentCard = document.querySelector(`[data-agent="${agentName}"]`);
        if (agentCard) {
          // Update status indicator and other elements
          const statusDot = agentCard.querySelector('.status-dot');
          if (statusDot) {
            statusDot.className = `w-3 h-3 rounded-full ${this.getStatusColor(status)}`;
          }
        }
      }
    }

    // Initialize dashboard when page loads
    const dashboard = new AgentDashboard();

    // Make dashboard globally available for onclick handlers
    window.dashboard = dashboard;
  </script>
</Layout>
