
---
import BackroomInterface from '@/layouts/BackroomInterface.astro';
import AiHelpAssistant from '@/components/AiHelpAssistant.svelte';
---

<BackroomInterface siteTitle="Voice AI Assistant | MyBonzo Platform">
  <div class="fixed inset-0 bg-[#0f1419]">
    <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/15 via-[#0f1419] to-[#0f1419]"></div>
  </div>

  <section class="backroom-header">
    <div class="backroom-container">
      <h1 class="backroom-title">Voice AI Assistant</h1>
      <p class="backroom-description">Zaawansowany asystent głosowy z AI, rozpoznawanie mowy, synteza głosu i sterowanie głosowe</p>
    </div>
  </section>

  <section class="backroom-section">
    <div class="backroom-container">
      <div class="function-container">
        <h2 class="text-2xl font-semibold text-primary mb-5">🎤 Voice AI Assistant</h2>
        <div class="voice-controls-grid">
          <!-- Speech-to-Text Settings -->
          <div class="control-card">
            <h3 class="control-title">🎙️ Speech-to-Text (STT)</h3>
            <div class="control-content">
              <div class="setting-item">
                <label>Język rozpoznawania:</label>
                <select id="stt-language" class="setting-select">
                  <option value="pl-PL">🇵🇱 Polski</option>
                  <option value="en-US">🇺🇸 Angielski</option>
                  <option value="de-DE">🇩🇪 Niemiecki</option>
                  <option value="fr-FR">🇫🇷 Francuski</option>
                  <option value="es-ES">🇪🇸 Hiszpański</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Tryb nagrywania:</label>
                <select id="recording-mode" class="setting-select">
                  <option value="continuous">Ciągły</option>
                  <option value="single">Pojedyncze komendy</option>
                  <option value="push-to-talk">Push-to-Talk</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Czułość mikrofonu:</label>
                <input type="range" id="mic-sensitivity" min="0" max="100" value="70" class="setting-range">
                <span id="mic-value">70%</span>
              </div>
              <button id="start-recording" class="control-btn primary">🎤 Rozpocznij nagrywanie</button>
              <button id="stop-recording" class="control-btn secondary" disabled>⏹️ Zatrzymaj</button>
            </div>
          </div>

          <!-- Text-to-Speech Settings -->
          <div class="control-card">
            <h3 class="control-title">🔊 Text-to-Speech (TTS)</h3>
            <div class="control-content">
              <div class="setting-item">
                <label>Głos:</label>
                <select id="tts-voice" class="setting-select">
                  <option value="pl-zofia">Zofia (Premium) 🇵🇱</option>
                  <option value="pl-marek">Marek (Premium) 🇵🇱</option>
                  <option value="pl-ewa">Ewa 🇵🇱</option>
                  <option value="pl-adam">Adam 🇵🇱</option>
                  <option value="en-sarah">Sarah (Premium) 🇺🇸</option>
                  <option value="en-michael">Michael (Premium) 🇺🇸</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Prędkość mowy:</label>
                <input type="range" id="speech-speed" min="0.5" max="2.0" step="0.1" value="1.0" class="setting-range">
                <span id="speed-value">1.0x</span>
              </div>
              <div class="setting-item">
                <label>Wysokość głosu:</label>
                <input type="range" id="speech-pitch" min="0.5" max="2.0" step="0.1" value="1.0" class="setting-range">
                <span id="pitch-value">1.0</span>
              </div>
              <div class="setting-item">
                <label>Ton emocjonalny:</label>
                <select id="emotional-tone" class="setting-select">
                  <option value="neutral">Neutralny</option>
                  <option value="friendly">Przyjazny</option>
                  <option value="professional">Profesjonalny</option>
                  <option value="excited">Podekscytowany</option>
                  <option value="calm">Spokojny</option>
                </select>
              </div>
              <div class="setting-item">
                <textarea id="tts-text" placeholder="Wpisz tekst do syntezy..." class="setting-textarea"></textarea>
              </div>
              <button id="start-synthesis" class="control-btn primary">🔊 Syntezuj mowę</button>
              <button id="play-audio" class="control-btn secondary" disabled>▶️ Odtwórz</button>
            </div>
          </div>

          <!-- Voice Commands & AI Models -->
          <div class="control-card">
            <h3 class="control-title">⚡ Voice Commands & AI</h3>
            <div class="control-content">
              <div class="setting-item">
                <label>Model AI:</label>
                <select id="ai-model" class="setting-select">
                  <option value="gemini-pro">Gemini Pro ✨</option>
                  <option value="gemini-vision">Gemini Vision 👁️</option>
                  <option value="code-bison">Code Bison 💻</option>
                  <option value="text-bison">Text Bison 📝</option>
                  <option value="google-bard">Google Bard 🧠</option>
                  <option value="palm-api">PaLM API 🌴</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Tryb Voice AI:</label>
                <select id="voice-mode" class="setting-select">
                  <option value="passive">Pasywny (nasłuchiwanie)</option>
                  <option value="active">Aktywny (instruktor)</option>
                  <option value="faq">FAQ/Tutorial</option>
                  <option value="ondemand">Na żądanie</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Tryb przetwarzania:</label>
                <select id="processing-mode" class="setting-select">
                  <option value="realtime">Czas rzeczywisty</option>
                  <option value="batch">Wsadowy</option>
                  <option value="background">W tle</option>
                </select>
              </div>
              <div class="setting-item">
                <label>Auto-odpowiedzi:</label>
                <input type="checkbox" id="auto-responses" checked> 
                <span>Automatyczne odpowiedzi głosowe</span>
              </div>
              <div class="setting-item">
                <label>Wizualizacja audio:</label>
                <input type="checkbox" id="audio-visualization" checked>
                <span>Pokaż wizualizację dźwięku</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="action-btn">🤖 POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Voice AI Assistant | MyBonzo Platform" />
    </div>
  </div>

  <script>
    // Voice AI Assistant - Enhanced with full STT/TTS functionality
    let recognition = null;
    let synthesis = null;
    let isRecording = false;
    let currentSettings = {};
    let audioContext = null;
    let analyser = null;
    let microphone = null;

    document.addEventListener('DOMContentLoaded', function() {
      console.log('🎙️ Voice AI Assistant Enhanced - Loaded');
      
      // Show welcome toast
      showToast(
        'System Voice AI Assistant załadowany pomyślnie',
        'success',
        'Witaj w Voice AI Assistant!'
      );
      
      initializeVoiceControls();
      loadSavedSettings();
      loadAgentSelection();
      loadPageConfiguration();
      checkPrivacyConsent();
      setupEventListeners();
      updateStats();
      
      // Page configuration event listeners
      const savePageBtn = document.getElementById('save-page-config');
      const resetPageBtn = document.getElementById('reset-page-config');
      
      if (savePageBtn) savePageBtn.addEventListener('click', savePageConfiguration);
      if (resetPageBtn) resetPageBtn.addEventListener('click', resetPageConfiguration);

      // Agent selection event listeners
      const selectAllBtn = document.getElementById('select-all-agents');
      const deselectAllBtn = document.getElementById('deselect-all-agents');
      const saveSelectionBtn = document.getElementById('save-agent-selection');
      
      if (selectAllBtn) selectAllBtn.addEventListener('click', selectAllAgents);
      if (deselectAllBtn) deselectAllBtn.addEventListener('click', deselectAllAgents);
      if (saveSelectionBtn) saveSelectionBtn.addEventListener('click', saveAgentSelection);

      // Privacy event listeners
      const privacyResetBtn = document.getElementById('privacy-reset');
      if (privacyResetBtn) privacyResetBtn.addEventListener('click', clearAllLocalData);

      document.querySelectorAll('#microphone-consent, #data-processing-consent, #ai-learning-consent').forEach(checkbox => {
        checkbox.addEventListener('change', savePrivacyConsent);
      });

      // Voice mode change listener
      const voiceModeSelect = document.getElementById('voice-mode');
      if (voiceModeSelect) voiceModeSelect.addEventListener('change', handleVoiceModeChange);

      // Auto-save on checkbox changes
      document.querySelectorAll('.agent-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', saveAgentSelection);
      });

      document.querySelectorAll('.page-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', savePageConfiguration);
      });
    });

    function initializeVoiceControls() {
      // Initialize Web Speech API for Speech-to-Text
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        recognition.continuous = true;
        recognition.interimResults = true;
        recognition.lang = 'pl-PL';

        recognition.onstart = () => {
          console.log('🎤 Voice recognition started');
          isRecording = true;
          updateRecordingUI(true);
        };

        recognition.onresult = (event) => {
          let finalTranscript = '';
          for (let i = event.resultIndex; i < event.results.length; i++) {
            if (event.results[i].isFinal) {
              finalTranscript += event.results[i][0].transcript;
            }
          }
          if (finalTranscript) processVoiceCommand(finalTranscript);
        };

        recognition.onerror = (event) => {
          console.error('Speech recognition error:', event.error);
          updateRecordingUI(false);
        };

        recognition.onend = () => {
          console.log('Voice recognition ended');
          isRecording = false;
          updateRecordingUI(false);
        };
      }

      // Initialize Speech Synthesis for Text-to-Speech
      if ('speechSynthesis' in window) {
        synthesis = window.speechSynthesis;
        if (synthesis.onvoiceschanged !== undefined) {
          synthesis.onvoiceschanged = loadVoices;
        }
      }
    }

    function setupEventListeners() {
      // STT Controls
      const startBtn = document.getElementById('start-recording');
      const stopBtn = document.getElementById('stop-recording');
      
      if (startBtn) startBtn.addEventListener('click', startRecording);
      if (stopBtn) stopBtn.addEventListener('click', stopRecording);
      
      // TTS Controls
      const synthesisBtn = document.getElementById('start-synthesis');
      const playBtn = document.getElementById('play-audio');
      
      if (synthesisBtn) synthesisBtn.addEventListener('click', synthesizeSpeech);
      if (playBtn) playBtn.addEventListener('click', playAudio);
      
      // Settings Controls
      const saveBtn = document.getElementById('save-settings');
      const loadBtn = document.getElementById('load-settings');
      const loadApiBtn = document.getElementById('load-api-config');
      const resetBtn = document.getElementById('reset-settings');
      const applyProfileBtn = document.getElementById('apply-profile');
      
      if (saveBtn) saveBtn.addEventListener('click', saveSettings);
      if (loadBtn) loadBtn.addEventListener('click', loadSettings);
      if (loadApiBtn) loadApiBtn.addEventListener('click', loadConfigFromAPI);
      if (resetBtn) resetBtn.addEventListener('click', resetSettings);
      if (applyProfileBtn) applyProfileBtn.addEventListener('click', applyProfile);

      // Range sliders
      setupRangeSliders();
      
      // Language change
      const sttLanguage = document.getElementById('stt-language');
      if (sttLanguage) {
        sttLanguage.addEventListener('change', function() {
          if (recognition) recognition.lang = this.value;
        });
      }
    }

    function setupRangeSliders() {
      const sliders = [
        { id: 'mic-sensitivity', display: 'mic-value', suffix: '%' },
        { id: 'speech-speed', display: 'speed-value', suffix: 'x' },
        { id: 'speech-pitch', display: 'pitch-value', suffix: '' }
      ];

      sliders.forEach(slider => {
        const element = document.getElementById(slider.id);
        const display = document.getElementById(slider.display);
        
        if (element && display) {
          element.addEventListener('input', function() {
            display.textContent = this.value + slider.suffix;
          });
        }
      });
    }

    function startRecording() {
      console.log('🎤 Rozpoczynanie nagrywania...');
      
      if (recognition && !isRecording) {
        const language = document.getElementById('stt-language')?.value || 'pl-PL';
        recognition.lang = language;
        
        try {
          recognition.start();
        } catch (error) {
          console.error('Error starting recognition:', error);
          showStatus('❌ Błąd uruchamiania rozpoznawania mowy');
        }
      }
    }

    function stopRecording() {
      console.log('⏹️ Zatrzymywanie nagrywania...');
      
      if (recognition && isRecording) {
        recognition.stop();
      }
    }

    function synthesizeSpeech() {
      console.log('🔊 Synteza mowy...');
      
      const textEl = document.getElementById('tts-text');
      const text = textEl?.value;
      
      if (!text || !synthesis) {
        showStatus('⚠️ Brak tekstu lub wsparcia TTS');
        return;
      }

      const utterance = new SpeechSynthesisUtterance(text);
      
      // Apply settings
      const speed = parseFloat(document.getElementById('speech-speed')?.value || '1.0');
      const pitch = parseFloat(document.getElementById('speech-pitch')?.value || '1.0');
      
      utterance.rate = speed;
      utterance.pitch = pitch;
      utterance.lang = 'pl-PL';

      utterance.onstart = () => {
        const playBtn = document.getElementById('play-audio');
        if (playBtn) playBtn.disabled = true;
        showStatus('🔊 Synteza w toku...');
      };
      
      utterance.onend = () => {
        const playBtn = document.getElementById('play-audio');
        if (playBtn) playBtn.disabled = false;
        showStatus('✅ Synteza zakończona');
      };

      synthesis.speak(utterance);
    }

    function playAudio() {
      console.log('▶️ Test audio...');
      
      if (!synthesis) return;
      
      const testText = "Test polskiego głosu MyBonzo AI Assistant. System działa prawidłowo.";
      const utterance = new SpeechSynthesisUtterance(testText);
      utterance.lang = 'pl-PL';
      synthesis.speak(utterance);
    }

    function processVoiceCommand(command) {
      console.log('Processing voice command:', command);
      
      const model = document.getElementById('ai-model')?.value || 'gemini-pro';
      const autoResponses = document.getElementById('auto-responses')?.checked;
      
      // Display recognized command
      const textArea = document.getElementById('tts-text');
      if (textArea) {
        textArea.value = `Rozpoznano: "${command}"`;
      }
      
      if (autoResponses) {
        generateAIResponse(command, model);
      }
      
      showStatus(`🎯 Przetworzono komendę: ${command.substring(0, 30)}...`);
    }

    function generateAIResponse(command, model) {
      const responses = {
        'gemini-pro': `Gemini Pro analizuje: "${command}". Mogę pomóc w dalszej analizie.`,
        'gemini-vision': `Gemini Vision interpretuje polecenie wizualne: "${command}".`,
        'code-bison': `Code Bison generuje kod dla: "${command}". Czy potrzebujesz implementacji?`,
        'text-bison': `Text Bison przetwarza tekst: "${command}". Oto szczegółowa odpowiedź.`,
        'google-bard': `Google Bard odpowiada kreatywnie na: "${command}".`,
        'palm-api': `PaLM API analizuje inteligentnie: "${command}".`
      };
      
      const response = responses[model] || `AI ${model}: "${command}"`;
      
      // Update text area and speak response
      const textArea = document.getElementById('tts-text');
      if (textArea) textArea.value = response;
      
      if (synthesis) {
        const utterance = new SpeechSynthesisUtterance(response);
        utterance.lang = 'pl-PL';
        synthesis.speak(utterance);
      }
    }

    // Removed old saveSettings - using new async version below

    function loadSettings() {
      try {
        const saved = localStorage.getItem('voiceAISettings');
        if (saved) {
          currentSettings = JSON.parse(saved);
          applySettingsToUI(currentSettings);
          showSettingsStatus('✅ Ustawienia wczytane!', 'success');
        } else {
          showSettingsStatus('⚠️ Brak zapisanych ustawień', 'warning');
        }
      } catch (error) {
        showSettingsStatus('❌ Błąd wczytywania', 'error');
      }
    }

    function loadSavedSettings() {
      const saved = localStorage.getItem('voiceAISettings');
      if (saved) {
        try {
          currentSettings = JSON.parse(saved);
          applySettingsToUI(currentSettings);
        } catch (error) {
          console.error('Auto-load error:', error);
        }
      }
    }

    function applySettingsToUI(settings) {
      Object.keys(settings).forEach(key => {
        const kebabKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();
        const element = document.getElementById(kebabKey);
        
        if (element) {
          if (element.type === 'checkbox') {
            element.checked = settings[key];
          } else {
            element.value = settings[key];
          }
          element.dispatchEvent(new Event('input'));
        }
      });
    }

    function resetSettings() {
      if (confirm('Przywrócić domyślne ustawienia?')) {
        localStorage.removeItem('voiceAISettings');
        showSettingsStatus('🔄 Ustawienia zresetowane', 'info');
        setTimeout(() => location.reload(), 1000);
      }
    }

    function applyProfile() {
      const profileName = document.getElementById('voice-profiles')?.value;
      if (!profileName) return;

      const profiles = {
        'polish-assistant': {
          sttLanguage: 'pl-PL', ttsVoice: 'pl-zofia', speechSpeed: '1.0',
          emotionalTone: 'friendly', aiModel: 'gemini-pro', autoResponses: true
        },
        'english-professional': {
          sttLanguage: 'en-US', ttsVoice: 'en-sarah', speechSpeed: '0.9',
          emotionalTone: 'professional', aiModel: 'gemini-pro', autoResponses: true
        },
        'multilingual': {
          sttLanguage: 'pl-PL', ttsVoice: 'pl-zofia', speechSpeed: '1.1',
          emotionalTone: 'neutral', aiModel: 'gemini-vision', autoResponses: false
        },
        'developer': {
          sttLanguage: 'en-US', ttsVoice: 'en-michael', speechSpeed: '1.2',
          emotionalTone: 'professional', aiModel: 'code-bison', autoResponses: true
        }
      };

      const profile = profiles[profileName];
      if (profile) {
        applySettingsToUI(profile);
        showSettingsStatus(`✅ Profil "${profileName}" zastosowany!`, 'success');
      }
    }

    function showSettingsStatus(message, type = 'info') {
      const statusEl = document.getElementById('settings-status');
      if (statusEl) {
        statusEl.textContent = message;
        statusEl.className = `settings-status ${type}`;
        setTimeout(() => {
          statusEl.textContent = 'Gotowy do zapisania ustawień';
          statusEl.className = 'settings-status';
        }, 3000);
      }
    }

    function showStatus(message) {
      console.log(message);
      // Could show in UI status bar if exists
    }

    function updateRecordingUI(recording) {
      const startBtn = document.getElementById('start-recording');
      const stopBtn = document.getElementById('stop-recording');
      
      if (startBtn) {
        startBtn.disabled = recording;
        startBtn.textContent = recording ? '🔴 Nagrywanie...' : '🎤 Rozpocznij nagrywanie';
        if (recording) startBtn.classList.add('recording');
        else startBtn.classList.remove('recording');
      }
      
      if (stopBtn) stopBtn.disabled = !recording;
    }

    function loadVoices() {
      if (synthesis) {
        const voices = synthesis.getVoices();
        console.log(`Available voices: ${voices.length}`);
      }
    }

    // Original functions adapted
    function testMicrophone() {
      console.log('🎤 Testowanie mikrofonu...');
      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(() => showStatus('✅ Mikrofon działa prawidłowo'))
          .catch(() => showStatus('❌ Problem z mikrofonem'));
      }
    }

    function testSpeakers() {
      console.log('🔊 Testowanie głośników...');
      playAudio();
    }

    function downloadTranscription() {
      console.log('📝 Pobieranie transkrypcji...');
      const textEl = document.getElementById('tts-text');
      const text = textEl?.value || 'Brak transkrypcji do pobrania';
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `transkrypcja_${new Date().toISOString().slice(0,10)}.txt`;
      a.click();
      URL.revokeObjectURL(url);
    }

    function clearAll() {
      console.log('🗑️ Czyszczenie wszystkiego...');
      const textArea = document.getElementById('tts-text');
      if (textArea) textArea.value = '';
      if (isRecording) stopRecording();
      if (synthesis) synthesis.cancel();
      showStatus('🗑️ Wyczyszczono');
    }

    function openSettings() {
      console.log('⚙️ Otwieranie ustawień...');
      const settingsCard = document.querySelector('.settings-save');
      if (settingsCard) {
        settingsCard.scrollIntoView({ behavior: 'smooth' });
      }
    }

    function openHelp() {
      console.log('❓ Otwieranie pomocy...');
      alert(`MyBonzo Voice AI Assistant - Pomoc:

🎤 Speech-to-Text: Wybierz język → Rozpocznij nagrywanie → Mów
🔊 Text-to-Speech: Wpisz tekst → Dostosuj ustawienia → Syntezuj
⚡ AI Models: Gemini Pro, Vision, Code/Text Bison, Bard, PaLM
💾 Ustawienia: Zapisuj preferencje, używaj profili

Wsparcie: Web Speech API, 5 języków, 8 modeli AI`);
    }

    function updateStats() {
      const stats = {
        'models-count': '8 modeli AI',
        'languages-count': '5 języków', 
        'features-count': '15+ funkcji'
      };
      
      Object.keys(stats).forEach(id => {
        const el = document.getElementById(id);
        if (el) el.textContent = stats[id];
      });
    }

    // Global exports
    window.getVoiceSettings = () => currentSettings;
    window.applyVoiceSettings = (settings) => {
      if (settings) {
        applySettingsToUI(settings);
        currentSettings = settings;
      }
    };

    // Toast Notification System
    function showToast(message, type = 'info', title = '', duration = 5000) {
      const container = document.getElementById('toast-container');
      if (!container) return;

      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      
      const icons = {
        success: '✅',
        error: '❌', 
        warning: '⚠️',
        info: 'ℹ️'
      };

      toast.innerHTML = `
        <div class="toast-icon">${icons[type] || icons.info}</div>
        <div class="toast-content">
          ${title ? `<div class="toast-title">${title}</div>` : ''}
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">×</button>
        <div class="toast-progress"></div>
      `;

      container.appendChild(toast);

      // Auto remove after duration
      setTimeout(() => {
        if (toast.parentElement) {
          toast.style.animation = 'slideInRight 0.3s ease-out reverse';
          setTimeout(() => toast.remove(), 300);
        }
      }, duration);

      console.log(`🍞 Toast: [${type.toUpperCase()}] ${title} - ${message}`);
    }

    // Page-level voice configuration
    function savePageConfiguration() {
      const selectedPages = [];
      const checkboxes = document.querySelectorAll('.page-checkbox:checked');
      
      checkboxes.forEach(checkbox => {
        selectedPages.push({
          id: checkbox.id,
          name: checkbox.nextElementSibling.querySelector('.page-name').textContent,
          pattern: getPagePattern(checkbox.id)
        });
      });

      localStorage.setItem('voiceEnabledPages', JSON.stringify(selectedPages));
      
      showToast(
        `Zapisano konfigurację dla ${selectedPages.length} typów stron`,
        'success',
        'Konfiguracja stron zapisana'
      );
      
      console.log('📄 Zapisano konfigurację stron:', selectedPages);
    }

    function getPagePattern(pageId) {
      const patterns = {
        'page-home': '/',
        'page-agents': '/agent-*',
        'page-api': '/api-*', 
        'page-voice': '/voice-*'
      };
      return patterns[pageId] || '/*';
    }

    function loadPageConfiguration() {
      const savedPages = localStorage.getItem('voiceEnabledPages');
      if (savedPages) {
        const pageData = JSON.parse(savedPages);
        
        // Odznacz wszystkie
        document.querySelectorAll('.page-checkbox').forEach(checkbox => {
          checkbox.checked = false;
        });

        // Zaznacz zapisane
        pageData.forEach(page => {
          const checkbox = document.getElementById(page.id);
          if (checkbox) checkbox.checked = true;
        });

        console.log('📥 Wczytano konfigurację stron:', pageData);
      }
    }

    function resetPageConfiguration() {
      if (confirm('Przywrócić domyślną konfigurację stron?')) {
        localStorage.removeItem('voiceEnabledPages');
        
        // Ustaw domyślne
        document.getElementById('page-home').checked = true;
        document.getElementById('page-agents').checked = true;
        document.getElementById('page-api').checked = false;
        document.getElementById('page-voice').checked = true;
        
        showToast('Przywrócono domyślną konfigurację stron', 'info', 'Reset konfiguracji');
        savePageConfiguration();
      }
    }

    // Privacy and consent management
    function checkPrivacyConsent() {
      const microphone = localStorage.getItem('microphoneConsent') === 'true';
      const dataProcessing = localStorage.getItem('dataProcessingConsent') === 'true';
      const aiLearning = localStorage.getItem('aiLearningConsent') === 'true';

      document.getElementById('microphone-consent').checked = microphone;
      document.getElementById('data-processing-consent').checked = dataProcessing;
      document.getElementById('ai-learning-consent').checked = aiLearning;

      return { microphone, dataProcessing, aiLearning };
    }

    function savePrivacyConsent() {
      const microphone = document.getElementById('microphone-consent').checked;
      const dataProcessing = document.getElementById('data-processing-consent').checked;
      const aiLearning = document.getElementById('ai-learning-consent').checked;

      localStorage.setItem('microphoneConsent', microphone);
      localStorage.setItem('dataProcessingConsent', dataProcessing);
      localStorage.setItem('aiLearningConsent', aiLearning);

      showToast('Zapisano ustawienia prywatności', 'success', 'Prywatność');
    }

    function clearAllLocalData() {
      if (confirm('⚠️ To usunie WSZYSTKIE lokalne dane Voice AI!\n\nUsuniemy:\n• Ustawienia głosowe\n• Wybór agentów\n• Konfigurację stron\n• Zgody prywatności\n\nCzy kontynuować?')) {
        const keys = ['voiceAISettings', 'voiceEnabledAgents', 'voiceEnabledPages', 'microphoneConsent', 'dataProcessingConsent', 'aiLearningConsent'];
        
        keys.forEach(key => localStorage.removeItem(key));
        
        showToast('Wszystkie lokalne dane zostały usunięte', 'warning', 'Dane wyczyszczone');
        
        setTimeout(() => {
          location.reload();
        }, 2000);
      }
    }

    // Voice mode management
    function handleVoiceModeChange() {
      const mode = document.getElementById('voice-mode').value;
      const descriptions = {
        passive: 'Nasłuchuje komend głosowych po aktywacji słowem kluczowym',
        active: 'Aktywnie prowadzi użytkownika przez funkcje krok po kroku',
        faq: 'Aktywny tylko na stronach pomocy i dokumentacji', 
        ondemand: 'Uruchamiany tylko na życzenie użytkownika'
      };

      showToast(
        descriptions[mode] || 'Nieznany tryb głosowy',
        'info',
        `Tryb głosowy: ${mode}`
      );
    }

    // Agent selection functions
    function selectAllAgents() {
      const checkboxes = document.querySelectorAll('.agent-checkbox');
      checkboxes.forEach(checkbox => checkbox.checked = true);
      saveAgentSelection();
    }

    function deselectAllAgents() {
      const checkboxes = document.querySelectorAll('.agent-checkbox');
      checkboxes.forEach(checkbox => checkbox.checked = false);
      saveAgentSelection();
    }

    function saveAgentSelection() {
      const selectedAgents = [];
      const checkboxes = document.querySelectorAll('.agent-checkbox:checked');
      
      checkboxes.forEach(checkbox => {
        selectedAgents.push({
          id: checkbox.id,
          name: checkbox.nextElementSibling.querySelector('.agent-name').textContent
        });
      });

      localStorage.setItem('voiceEnabledAgents', JSON.stringify(selectedAgents));
      
      showToast(
        `Zapisano wybór ${selectedAgents.length} agentów`,
        'success',
        'Konfiguracja agentów'
      );
      console.log('🎯 Zapisano wybór agentów:', selectedAgents);
    }

    function loadAgentSelection() {
      const savedAgents = localStorage.getItem('voiceEnabledAgents');
      if (savedAgents) {
        const agentData = JSON.parse(savedAgents);
        
        // Odznacz wszystkie
        document.querySelectorAll('.agent-checkbox').forEach(checkbox => {
          checkbox.checked = false;
        });

        // Zaznacz zapisane
        agentData.forEach(agent => {
          const checkbox = document.getElementById(agent.id);
          if (checkbox) checkbox.checked = true;
        });

        console.log('📥 Wczytano wybór agentów:', agentData);
      }
    }

    // API Communication
    async function loadConfigFromAPI() {
      try {
        const response = await fetch('/api/voice-assistant/config');
        const data = await response.json();
        
        if (data.success) {
          showToast('Wczytano konfigurację z serwera', 'success', 'API Config');
          console.log('📡 API Config loaded:', data.config);
          return data.config;
        }
      } catch (error) {
        showToast('Błąd wczytywania konfiguracji z API', 'error', 'API Error');
        console.error('❌ API Config error:', error);
      }
      return null;
    }

    async function saveConfigToAPI(config) {
      try {
        const response = await fetch('/api/voice-assistant/config', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ config })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showToast('Konfiguracja zapisana na serwerze', 'success', 'API Save');
          return true;
        } else {
          showToast('Błąd zapisywania na serwerze', 'error', 'API Error');
          return false;
        }
      } catch (error) {
        showToast('Błąd komunikacji z API', 'error', 'API Error');
        console.error('❌ API Save error:', error);
        return false;
      }
    }

    // Enhanced settings management with API sync
    async function saveSettings() {
      console.log('💾 Enhanced saving settings with API sync...');
      
      const settings = collectAllSettings();
      
      // Save locally
      try {
        localStorage.setItem('voiceAISettings', JSON.stringify(settings));
        
        // Save to API
        const apiSuccess = await saveConfigToAPI(settings);
        
        showToast(
          apiSuccess ? 'Ustawienia zapisane lokalnie i na serwerze' : 'Ustawienia zapisane tylko lokalnie',
          apiSuccess ? 'success' : 'warning',
          'Zapisywanie ustawień'
        );

        // Notify parent for floating button integration
        if (window.parent !== window) {
          window.parent.postMessage({
            type: 'VOICE_SETTINGS_SAVED',
            settings: settings
          }, '*');
        }
        
      } catch (error) {
        console.error('Error saving settings:', error);
        showToast('Błąd podczas zapisywania ustawień', 'error', 'Błąd zapisu');
      }
    }

    function collectAllSettings() {
      // Collect all current settings from UI
      const agentCheckboxes = Array.from(document.querySelectorAll('.agent-checkbox:checked')).map(cb => cb.id);
      const pageCheckboxes = Array.from(document.querySelectorAll('.page-checkbox:checked')).map(cb => cb.id);
      
      return {
        // Agent and page configuration
        agents: agentCheckboxes,
        pages: pageCheckboxes,
        
        // Voice settings
        voiceMode: document.getElementById('voice-mode')?.value || 'passive',
        sttLanguage: document.getElementById('stt-language')?.value || 'pl-PL',
        recordingMode: document.getElementById('recording-mode')?.value || 'continuous',
        micSensitivity: document.getElementById('mic-sensitivity')?.value || '70',
        
        // TTS settings
        ttsVoice: document.getElementById('tts-voice')?.value || 'pl-zofia',
        speechSpeed: document.getElementById('speech-speed')?.value || '1.0',
        speechPitch: document.getElementById('speech-pitch')?.value || '1.0',
        emotionalTone: document.getElementById('emotional-tone')?.value || 'neutral',
        
        // AI settings
        aiModel: document.getElementById('ai-model')?.value || 'gemini-pro',
        processingMode: document.getElementById('processing-mode')?.value || 'realtime',
        autoResponses: document.getElementById('auto-responses')?.checked || false,
        audioVisualization: document.getElementById('audio-visualization')?.checked || false,
      };
    }

    // POLACZEK_T Assistant
    const polaczekBtn = document.getElementById('polaczekBtn');
    const polaczekWidget = document.getElementById('polaczekWidget');

    polaczekBtn.addEventListener('click', () => {
      polaczekWidget.classList.toggle('hidden');
    });
  </script>
</BackroomInterface>
