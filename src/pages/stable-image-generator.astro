---
import Layout from "../layouts/Layout.astro";
---

<Layout title="STABLE IMAGE GENERATOR - LUC de ZEN ON">
  <div class="header-with-help">
    <h1 class="page-title">🎨 STABLE IMAGE GENERATOR</h1>
    <button id="helpButton" class="help-icon">?</button>
  </div>

  <!-- Quick Actions -->
  <div class="quick-actions">
    <button class="action-btn primary" id="quickGenerate">
      <span class="btn-icon">⚡</span>
      <span>Quick Generate</span>
    </button>
    <button class="action-btn secondary" id="wildcardsLibrary">
      <span class="btn-icon">📚</span>
      <span>Wildcards Library</span>
    </button>
    <button class="action-btn secondary" id="galleryView">
      <span class="btn-icon">🖼️</span>
      <span>Gallery</span>
    </button>
    <button class="action-btn secondary" id="settingsBtn">
      <span class="btn-icon">⚙️</span>
      <span>Settings</span>
    </button>
  </div>

  <!-- System Status -->
  <div class="system-status">
    <h2>Generator Status</h2>
    <div class="status-grid">
      <div class="status-card active">
        <div class="status-indicator"></div>
        <h3>Stable Diffusion API</h3>
        <p class="status-text">Connected</p>
        <div class="status-metrics">
          <span>Response Time: 2.3s</span>
          <span>Queue: 0 jobs</span>
        </div>
      </div>
      
      <div class="status-card active">
        <div class="status-indicator"></div>
        <h3>Wildcards Engine</h3>
        <p class="status-text">Ready</p>
        <div class="status-metrics">
          <span>Categories: 47</span>
          <span>Total wildcards: 2,847</span>
        </div>
      </div>
      
      <div class="status-card warning">
        <div class="status-indicator"></div>
        <h3>Image Storage</h3>
        <p class="status-text">85% Full</p>
        <div class="status-metrics">
          <span>Used: 8.5GB / 10GB</span>
          <span>Images: 1,234</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Generator Interface -->
  <div class="generator-interface">
    <div class="generator-left">
      <!-- Prompt Input -->
      <div class="prompt-section">
        <h3>Prompt Generator</h3>
        <div class="prompt-input-container">
          <textarea id="promptInput" placeholder="Opisz obraz który chcesz wygenerować... Możesz użyć wildcards jak {animal}, {color}, {style}"></textarea>
          <div class="prompt-tools">
            <button class="tool-btn" id="randomPrompt">🎲 Random</button>
            <button class="tool-btn" id="wildcardsBtn">📚 Add Wildcards</button>
            <button class="tool-btn" id="enhancePrompt">✨ Enhance</button>
          </div>
        </div>
      </div>

      <!-- Wildcards Library Panel -->
      <div class="wildcards-panel" id="wildcardsPanel">
        <h3>Biblioteka Wildcards</h3>
        <div class="wildcards-categories">
          <div class="category-tabs">
            <button class="tab-btn active" data-category="animals">🐾 Zwierzęta</button>
            <button class="tab-btn" data-category="colors">🌈 Kolory</button>
            <button class="tab-btn" data-category="styles">🎨 Style</button>
            <button class="tab-btn" data-category="objects">📦 Obiekty</button>
            <button class="tab-btn" data-category="emotions">😊 Emocje</button>
          </div>
          
          <div class="wildcards-content">
            <div class="wildcards-grid" id="wildcardsGrid">
              <!-- Wildcards będą wczytane dynamicznie -->
            </div>
          </div>
        </div>
      </div>

      <!-- Generation Settings -->
      <div class="settings-panel">
        <h3>Ustawienia Generacji</h3>
        <div class="settings-grid">
          <div class="setting-group">
            <label>Model:</label>
            <select id="modelSelect">
              <option value="sd-xl">SDXL 1.0</option>
              <option value="sd-1.5">SD 1.5</option>
              <option value="sd-2.1">SD 2.1</option>
            </select>
          </div>
          
          <div class="setting-group">
            <label>Rozmiar:</label>
            <select id="sizeSelect">
              <option value="512x512">512x512</option>
              <option value="768x768">768x768</option>
              <option value="1024x1024">1024x1024</option>
            </select>
          </div>
          
          <div class="setting-group">
            <label>Steps: <span id="stepsValue">20</span></label>
            <input type="range" id="stepsSlider" min="10" max="50" value="20">
          </div>
          
          <div class="setting-group">
            <label>CFG Scale: <span id="cfgValue">7</span></label>
            <input type="range" id="cfgSlider" min="1" max="20" value="7">
          </div>
        </div>
      </div>
    </div>

    <div class="generator-right">
      <!-- Generation Area -->
      <div class="generation-area">
        <div class="image-preview" id="imagePreview">
          <div class="placeholder">
            <div class="placeholder-icon">🖼️</div>
            <p>Twój wygenerowany obraz pojawi się tutaj</p>
            <button class="generate-btn" id="generateBtn">
              <span class="generate-icon">🚀</span>
              Generuj Obraz
            </button>
          </div>
        </div>
        
        <div class="generation-progress" id="progressBar" style="display: none;">
          <div class="progress-fill"></div>
          <span class="progress-text">Generowanie... 0%</span>
        </div>
      </div>

      <!-- Recent Images -->
      <div class="recent-images">
        <h3>Ostatnie obrazy</h3>
        <div class="images-grid" id="recentGrid">
          <div class="image-slot empty">+</div>
          <div class="image-slot empty">+</div>
          <div class="image-slot empty">+</div>
          <div class="image-slot empty">+</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Help Modal -->
  <div id="helpModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>STABLE IMAGE GENERATOR - Instrukcja</h2>
        <span id="closeModal" class="close">&times;</span>
      </div>
      <div class="modal-body">
        <p>
          <strong>STABLE IMAGE GENERATOR to zaawansowany generator obrazów AI z biblioteką wildcards.</strong>
        </p>

        <h3>Główne funkcje:</h3>
        <ul>
          <li><strong>Prompt Generator</strong> - tworzenie opisów obrazów z pomocą AI</li>
          <li><strong>Biblioteka Wildcards</strong> - gotowe kategorie słów kluczowych</li>
          <li><strong>Różne modele</strong> - SDXL, SD 1.5, SD 2.1</li>
          <li><strong>Galeria</strong> - przeglądanie wygenerowanych obrazów</li>
        </ul>

        <h3>Jak używać wildcards:</h3>
        <ul>
          <li><code>&#123;animal&#125;</code> - losowe zwierzę</li>
          <li><code>&#123;color&#125;</code> - losowy kolor</li>
          <li><code>&#123;style&#125;</code> - losowy styl artystyczny</li>
          <li><code>&#123;emotion&#125;</code> - losowa emocja</li>
        </ul>

        <div class="feature-highlight">
          <h3>Przykłady promptów:</h3>
          <ul>
            <li>🎨 "A &#123;color&#125; &#123;animal&#125; in &#123;style&#125; style"</li>
            <li>🏞️ "Beautiful landscape with &#123;color&#125; sky, &#123;style&#125; painting"</li>
            <li>👑 "Portrait of a &#123;emotion&#125; person, &#123;style&#125; art"</li>
            <li>🌟 "Magical &#123;object&#125; glowing with &#123;color&#125; light"</li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Wildcards data
    const wildcards = {
      animals: ['cat', 'dog', 'dragon', 'wolf', 'eagle', 'lion', 'tiger', 'bear', 'fox', 'owl'],
      colors: ['red', 'blue', 'golden', 'silver', 'purple', 'emerald', 'crimson', 'azure', 'violet', 'amber'],
      styles: ['photorealistic', 'anime', 'oil painting', 'watercolor', 'digital art', 'cyberpunk', 'steampunk', 'fantasy', 'sci-fi', 'vintage'],
      objects: ['sword', 'crystal', 'flower', 'castle', 'spaceship', 'crown', 'book', 'tree', 'mountain', 'ocean'],
      emotions: ['happy', 'mysterious', 'sad', 'angry', 'peaceful', 'excited', 'contemplative', 'fierce', 'gentle', 'majestic']
    };

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      loadWildcards('animals');
      setupEventListeners();
    });

    function setupEventListeners() {
      // Help modal
      const helpButton = document.getElementById("helpButton");
      const helpModal = document.getElementById("helpModal");
      const closeModal = document.getElementById("closeModal");

      helpButton?.addEventListener("click", () => {
        helpModal.style.display = "flex";
      });

      closeModal?.addEventListener("click", () => {
        helpModal.style.display = "none";
      });

      helpModal?.addEventListener("click", (e) => {
        if (e.target === helpModal) {
          helpModal.style.display = "none";
        }
      });

      // Wildcards categories
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          loadWildcards(btn.dataset.category);
        });
      });

      // Settings sliders
      const stepsSlider = document.getElementById('stepsSlider');
      const cfgSlider = document.getElementById('cfgSlider');
      
      stepsSlider?.addEventListener('input', (e) => {
        document.getElementById('stepsValue').textContent = e.target.value;
      });
      
      cfgSlider?.addEventListener('input', (e) => {
        document.getElementById('cfgValue').textContent = e.target.value;
      });

      // Generate button
      document.getElementById('generateBtn')?.addEventListener('click', generateImage);
      
      // Random prompt
      document.getElementById('randomPrompt')?.addEventListener('click', generateRandomPrompt);

      // Toggle wildcards panel
      document.getElementById('wildcardsBtn')?.addEventListener('click', toggleWildcardsPanel);
    }

    function loadWildcards(category) {
      const grid = document.getElementById('wildcardsGrid');
      if (!grid) return;
      
      grid.innerHTML = '';
      
      wildcards[category]?.forEach(item => {
        const wildcard = document.createElement('div');
        wildcard.className = 'wildcard-item';
        wildcard.innerHTML = `
          <span class="wildcard-text">{${item}}</span>
          <button class="add-btn" onclick="addToPrompt('{${item}}')">+</button>
        `;
        grid.appendChild(wildcard);
      });
    }

    // Funkcja globalna do dodawania wildcards
    window.addToPrompt = function(wildcard) {
      const promptInput = document.getElementById('promptInput');
      if (!promptInput) return;
      
      const currentValue = promptInput.value;
      const cursorPos = promptInput.selectionStart;
      const newValue = currentValue.slice(0, cursorPos) + wildcard + ' ' + currentValue.slice(cursorPos);
      
      promptInput.value = newValue;
      promptInput.focus();
      promptInput.setSelectionRange(cursorPos + wildcard.length + 1, cursorPos + wildcard.length + 1);
    }

    function generateRandomPrompt() {
      const templates = [
        "A {color} {animal} in {style} style",
        "Beautiful {object} with {emotion} atmosphere, {style} art",
        "Portrait of a {emotion} {animal}, {style} painting",
        "Magical {color} {object} in a fantasy landscape",
        "{emotion} {animal} surrounded by {color} {objects}"
      ];
      
      const template = templates[Math.floor(Math.random() * templates.length)];
      document.getElementById('promptInput').value = template;
    }

    function toggleWildcardsPanel() {
      const panel = document.getElementById('wildcardsPanel');
      panel.classList.toggle('visible');
    }

    async function generateImage() {
      const promptInput = document.getElementById('promptInput');
      const generateBtn = document.getElementById('generateBtn');
      const progressBar = document.getElementById('progressBar');
      const imagePreview = document.getElementById('imagePreview');
      
      if (!promptInput.value.trim()) {
        alert('Wprowadź prompt!');
        return;
      }

      // Show progress
      generateBtn.disabled = true;
      generateBtn.innerHTML = '<span class="generate-icon">⏳</span> Generowanie...';
      progressBar.style.display = 'block';
      
      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += 5;
        const fill = progressBar.querySelector('.progress-fill');
        const text = progressBar.querySelector('.progress-text');
        
        fill.style.width = progress + '%';
        text.textContent = `Generowanie... ${progress}%`;
        
        if (progress >= 100) {
          clearInterval(progressInterval);
          completeGeneration();
        }
      }, 200);
    }

    function completeGeneration() {
      const generateBtn = document.getElementById('generateBtn');
      const progressBar = document.getElementById('progressBar');
      const imagePreview = document.getElementById('imagePreview');
      
      // Reset button
      generateBtn.disabled = false;
      generateBtn.innerHTML = '<span class="generate-icon">🚀</span> Generuj Obraz';
      progressBar.style.display = 'none';
      
      // Show success (placeholder)
      imagePreview.innerHTML = `
        <div class="generated-image">
          <div class="success-placeholder">
            <div class="success-icon">✅</div>
            <p>Obraz wygenerowany pomyślnie!</p>
            <p class="image-info">1024x1024 • SDXL • 20 steps</p>
            <div class="image-actions">
              <button class="action-btn-small">💾 Zapisz</button>
              <button class="action-btn-small">🔄 Regeneruj</button>
              <button class="action-btn-small">📤 Udostępnij</button>
            </div>
          </div>
        </div>
      `;
    }

    // Status indicators animation
    setInterval(() => {
      const indicators = document.querySelectorAll(".status-indicator");
      indicators.forEach((indicator) => {
        const card = indicator.closest(".status-card");
        
        if (card && card.classList.contains("active")) {
          indicator.style.opacity = indicator.style.opacity === "0.5" ? "1" : "0.5";
        }
      });
    }, 1500);
  </script>
</Layout>

<style>
  /* Base styles podobne do POLACZEK */
  .quick-actions {
    display: flex;
    gap: 20px;
    margin-bottom: 40px;
    flex-wrap: wrap;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 15px 25px;
    border-radius: 10px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    color: #ffffff;
    box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
  }

  .action-btn.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 92, 246, 0.5);
  }

  .action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #e0e0e0;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .system-status {
    margin-bottom: 50px;
  }

  .system-status h2 {
    color: #ffffff;
    margin-bottom: 25px;
    font-size: 1.5rem;
  }

  .status-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
  }

  .status-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 25px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .status-card h3 {
    color: #ffffff;
    margin-bottom: 10px;
  }

  .status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-bottom: 15px;
    transition: all 0.3s ease;
  }

  .status-card.active .status-indicator {
    background: #8b5cf6;
    box-shadow: 0 0 10px rgba(139, 92, 246, 0.5);
  }

  .status-card.warning .status-indicator {
    background: #f59e0b;
    box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
  }

  .status-text {
    color: #cccccc;
    margin-bottom: 15px;
  }

  .status-metrics {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .status-metrics span {
    color: #999999;
    font-size: 0.9rem;
  }

  /* Generator Interface */
  .generator-interface {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 50px;
  }

  .generator-left, .generator-right {
    display: flex;
    flex-direction: column;
    gap: 25px;
  }

  .prompt-section, .wildcards-panel, .settings-panel, .generation-area, .recent-images {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 25px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .prompt-section h3, .wildcards-panel h3, .settings-panel h3, .recent-images h3 {
    color: #ffffff;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .prompt-input-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  #promptInput {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    padding: 15px;
    color: #ffffff;
    font-size: 1rem;
    min-height: 100px;
    resize: vertical;
    backdrop-filter: blur(5px);
  }

  #promptInput::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .prompt-tools {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .tool-btn {
    background: rgba(139, 92, 246, 0.2);
    color: #8b5cf6;
    border: 1px solid rgba(139, 92, 246, 0.3);
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tool-btn:hover {
    background: rgba(139, 92, 246, 0.3);
    color: #ffffff;
  }

  /* Wildcards Panel */
  .wildcards-panel {
    display: none;
  }

  .wildcards-panel.visible {
    display: block;
  }

  .category-tabs {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .tab-btn {
    background: rgba(255, 255, 255, 0.1);
    color: #cccccc;
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 8px 15px;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tab-btn.active {
    background: rgba(139, 92, 246, 0.3);
    color: #8b5cf6;
    border-color: rgba(139, 92, 246, 0.5);
  }

  .wildcards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 10px;
  }

  .wildcard-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 10px;
  }

  .wildcard-text {
    color: #8b5cf6;
    font-family: monospace;
    font-weight: bold;
  }

  .add-btn {
    background: rgba(139, 92, 246, 0.3);
    color: #ffffff;
    border: none;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .add-btn:hover {
    background: rgba(139, 92, 246, 0.5);
    transform: scale(1.1);
  }

  /* Settings Panel */
  .settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
  }

  .setting-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .setting-group label {
    color: #cccccc;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .setting-group select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 10px;
    color: #ffffff;
  }

  .setting-group input[type="range"] {
    accent-color: #8b5cf6;
  }

  /* Generation Area */
  .generation-area {
    min-height: 400px;
  }

  .image-preview {
    background: rgba(0, 0, 0, 0.3);
    border: 2px dashed rgba(255, 255, 255, 0.2);
    border-radius: 15px;
    min-height: 350px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(5px);
  }

  .placeholder {
    text-align: center;
    color: #cccccc;
  }

  .placeholder-icon {
    font-size: 4rem;
    margin-bottom: 20px;
  }

  .generate-btn {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    color: #ffffff;
    border: none;
    padding: 15px 30px;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    margin-top: 20px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 92, 246, 0.5);
  }

  .generate-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .generation-progress {
    background: rgba(0, 0, 0, 0.5);
    border-radius: 10px;
    padding: 15px;
    margin-top: 20px;
  }

  .progress-fill {
    height: 8px;
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-text {
    color: #cccccc;
    font-size: 0.9rem;
    margin-top: 10px;
    display: block;
  }

  /* Recent Images */
  .images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: 15px;
  }

  .image-slot {
    aspect-ratio: 1;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: rgba(255, 255, 255, 0.5);
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .image-slot:hover {
    border-color: rgba(139, 92, 246, 0.5);
    background: rgba(139, 92, 246, 0.1);
  }

  .success-placeholder {
    text-align: center;
    padding: 20px;
  }

  .success-icon {
    font-size: 3rem;
    margin-bottom: 15px;
  }

  .image-info {
    color: #999999;
    font-size: 0.9rem;
    margin: 10px 0;
  }

  .image-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 15px;
  }

  .action-btn-small {
    background: rgba(139, 92, 246, 0.2);
    color: #8b5cf6;
    border: 1px solid rgba(139, 92, 246, 0.3);
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-btn-small:hover {
    background: rgba(139, 92, 246, 0.3);
    color: #ffffff;
  }

  @media (max-width: 1024px) {
    .generator-interface {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .quick-actions {
      flex-direction: column;
    }
    
    .status-grid, .settings-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
