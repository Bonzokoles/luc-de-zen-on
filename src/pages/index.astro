--- 
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
// Optimized component sections for better SSR performance
import HeroSection from "../components/sections/HeroSection.astro";
import NavigationSection from "../components/sections/NavigationSection.astro";
import AIWorkersSection from "../components/sections/AIWorkersSection.astro";
import WorkersGridSection from "../components/sections/WorkersGridSection.astro";
import MainWorkersCardsSection from "../components/sections/MainWorkersCardsSection.astro";
// Core widgets - lazy loaded
import ImageGeneratorWidget from "../components/ImageGeneratorWidget.svelte";
import PolaczekWidget from "../components/PolaczekWidget.svelte";
import MainChatWidget from "../components/MainChatWidget.svelte";
import AiHelpAssistant from "../components/AiHelpAssistant.svelte";
import FAQGeneratorWidget from "../components/FAQGeneratorWidget.svelte";
import EducationRecommendationsWidget from "../components/EducationRecommendationsWidget.svelte";
import TicketSubmissionWidget from "../components/TicketSubmissionWidget.svelte";
import WorkersStatusDashboard from "../components/WorkersStatusDashboard.svelte";
import BackgroundMusicPlayerSimple from "../components/BackgroundMusicPlayerSimple.svelte";
import GoogleVoiceAgent from "../components/GoogleVoiceAgent.svelte";
import WorkerCommunicationPopup from "../components/WorkerCommunicationPopup.astro";
// Modular Agents System
import AgentsLoader from "../components/agents/AgentsLoader.astro";
import Agent09Dyrektor from "../components/agents/agent-09-dyrektor/index.svelte";
// Heroicons React components
import { 
  MusicalNoteIcon,
  CpuChipIcon,
  SparklesIcon,
  EyeIcon,
  CodeBracketIcon,
  DocumentTextIcon,
  BoltIcon,
  PaintBrushIcon,
  BriefcaseIcon,
  ChatBubbleLeftRightIcon,
  ArrowPathIcon,
  FolderIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
---

<MyBonzoLayout siteTitle="AI Workers Platform | KAROL LISSON">
  <main class="min-h-svh">
    <!-- Optimized sections for better SSR streaming -->
    <HeroSection />
    <NavigationSection />
    <AIWorkersSection />

    <!-- Separator Section 1 -->
    <section class="border border-edge relative">
      <div class="absolute left-0 right-0 h-full">
        <!-- Inner vertical lines -->
        <div
          class="absolute left-[calc(50vw+400px)] top-0 bottom-0 w-px bg-edge"
        ></div>
        <div
          class="absolute right-[calc(50vw-400px)] top-0 bottom-0 w-px bg-edge"
        ></div>
        <!-- Outer vertical lines -->
        <div
          class="absolute left-[calc(50vw+600px)] top-0 bottom-0 w-px bg-edge"
        ></div>
        <div
          class="absolute right-[calc(50vw-600px)] top-0 bottom-0 w-px bg-edge"
        ></div>
      </div>
      <div class="max-w-6xl mx-auto">
        <div class="py-1"></div>
      </div>
    </section>

            }
        <WorkersGridSection />
        <MainWorkersCardsSection />

        <!-- 9 New Functions Grid -->
        <div class="additional-functions-section" data-astro-cid-my52qgmw>
          <h3 class="additional-title" data-astro-cid-my52qgmw>
            ZAAWANSOWANE FUNKCJE AI
          </h3>
          <div class="additional-grid" data-astro-cid-my52qgmw>
            <!-- Row 1 -->
            <div
              class="feature-tile"
              data-function="function2"
              data-function-name="rekomendacje"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üéØ</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Personalizowane rekomendacje
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                System rekomendacyjny produkt√≥w i us≈Çug z analizƒÖ preferencji
                u≈ºytkownik√≥w
              </div>
            </div>

            <div
              class="feature-tile"
              data-function="function3"
              data-function-name="obs≈Çuga-klienta"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üìû</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Automatyzacja obs≈Çugi klienta
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                AI do kwalifikacji lead√≥w i automatycznych odpowiedzi z
                integracjƒÖ CRM
              </div>
            </div>

            <div
              class="feature-tile"
              data-function="function4"
              data-function-name="monitorowanie"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üìä</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Monitorowanie i raportowanie
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                Dashboard z automatycznym generowaniem raport√≥w i alertami o
                anomaliach
              </div>
            </div>

            <!-- Row 2 -->
            <div
              class="feature-tile"
              data-function="function6"
              data-function-name="przypomnienia"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üîî</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Harmonogramowanie i przypomnienia
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                Inteligentne przypomnienia z adaptacyjnym harmonogramem i
                priorytetyzacjƒÖ
              </div>
            </div>

            <!-- Tavily Search function replacement -->
          <div
              class="feature-tile"
              data-function="function7"
              data-function-name="faq-generator"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>‚ùì</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Generator FAQ dynamiczny
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                AI generujƒÖcy dynamicznie pytania i odpowiedzi na podstawie bazy
                wiedzy
              </div>
            </div>

            <div
              class="feature-tile"
              data-function="function8"
              data-function-name="edukacja"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üìö</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Rekomendacje edukacyjne
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                System rekomendacji kurs√≥w i materia≈Ç√≥w edukacyjnych z
                profilowaniem u≈ºytkownika
              </div>
            </div>

            <!-- Quiz function -->
            <div
              class="feature-tile"
              data-function="function9"
              data-function-name="quizy"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üß†</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Quiz interaktywny
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                Inteligentne quizy z adaptacyjnƒÖ trudno≈õciƒÖ i natychmiastowym
                feedbackiem
              </div>
            </div>

            <!-- Marketing Content function -->
            <div
              class="feature-tile"
              data-function="function10"
              data-function-name="marketing"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üìà</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Generator tre≈õci marketingowych
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                AI tworzy spersonalizowane kampanie i tre≈õci marketingowe z
                analizƒÖ skuteczno≈õci
              </div>
            </div>

            <!-- Tickets function -->
            <div
              class="feature-tile"
              data-function="function11"
              data-function-name="tickety"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üé´</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                System zarzƒÖdzania ticketami
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                AI do automatycznej kategoryzacji i priorytetyzacji zg≈Çosze≈Ñ
              </div>
            </div>

            <!-- Voice AI Assistant function -->
            <div
              class="feature-tile"
              data-function="function12" 
              data-function-name="voice-assistant"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üé§</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Asystent g≈Çosowy AI
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                Zaawansowany asystent g≈Çosowy z rozpoznawaniem mowy i TTS
              </div>
            </div>

            <!-- Content Generator function -->
            <div
              class="feature-tile"
              data-function="function13"
              data-function-name="content-generator"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>‚úçÔ∏è</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Generator tre≈õci AI
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                AI do generowania artyku≈Ç√≥w, opis√≥w i kontekstowych tekst√≥w
              </div>
            </div>

            <!-- Analytics Dashboard function -->
            <div
              class="feature-tile"
              data-function="function14"
              data-function-name="analytics-dashboard"
              data-astro-cid-my52qgmw
            >
              <div class="feature-icon" data-astro-cid-my52qgmw>üìä</div>
              <div class="feature-title" data-astro-cid-my52qgmw>
                Dashboard analityczny
              </div>
              <div class="feature-desc" data-astro-cid-my52qgmw>
                Google Analytics API z wizualizacjƒÖ danych w czasie rzeczywistym
              </div>
            </div>

          <!-- Private Blog Card (Smaller) -->
          <div
            class="feature-tile"
            data-worker="private-blog"
            data-astro-cid-my52qgmw
          >
            <div class="feature-icon" data-astro-cid-my52qgmw>??</div>
            <div class="feature-title" data-astro-cid-my52qgmw>
              MyBonzo AI Blog
            </div>
            <div class="feature-desc" data-astro-cid-my52qgmw>
              Oficjalny blog o sztucznej inteligencji, automatyzacji i trendach AI
            </div>
            <div class="worker-actions" data-astro-cid-my52qgmw>
              <button
                class="feature-btn private-btn"
                onclick="window.open('https://mybonzoaiblog.com', '_blank')"
                data-astro-cid-my52qgmw>Otw√≥rz Blog</button
              >
            </div>
          </div>
        </div>

        <!-- Duplikat usuniƒôty ca≈Çkowicie - sekcja worker-cards by≈Ça powt√≥rzona -->
            </div>
          </div>
        </div>
      </div>
    </section>
    

  </main>

  <!-- Right Floating Panel - Fixed Right Side -->
  <div class="right-panel-fixed">
    <div class="floating-widget-container">
      <button
        onclick="toggleMusicPlayer()"
        class="right-btn"
        id="musicPlayerBtn"
      >
        <MusicalNoteIcon className="w-6 h-6 inline mr-2" /> MUSIC PLAYER
      </button>
      <div id="musicPlayerWidget" class="floating-widget">
        <BackgroundMusicPlayerSimple client:load />
      </div>
    </div>

    <div class="floating-widget-container">
      <button
        onclick="togglePolaczekAssistant()"
        class="right-btn"
        id="polaczekBtn"
        title="AI Assistant do wyja≈õniania funkcji na stronie"
      >
        <CpuChipIcon className="w-6 h-6 inline mr-2" /> AI ASSISTANT
      </button>
      <div id="polaczekWidget" class="floating-widget">
        <AiHelpAssistant client:load />
      </div>
    </div>

    <div class="floating-widget-container">
      <button 
        onclick="toggleGlobalVoice()"
        class="right-btn"
        id="globalVoiceBtn"
        title="Globalny system Voice - W≈ÇƒÖcz/wy≈ÇƒÖcz wszystkie agenty Voice"
        style="background: linear-gradient(45deg, #ff4444, #0f3846);"
      >
        üé§ VOICE OFF
      </button>
      
      <!-- DEBUG/TEST BUTTONS for Voice System -->
      <div style="margin-top: 5px; display: flex; gap: 3px; flex-wrap: wrap;">
        <button 
          onclick="emergencyStopAll()"
          title="Awaryjne zatrzymanie wszystkich system√≥w"
          style="background: #ff0000; border: none; padding: 3px 6px; border-radius: 3px; color: white; cursor: pointer; font-size: 10px; font-weight: bold;"
        >
          üö® STOP
        </button>
        
        <button 
          onclick="resetSystem()"
          title="Reset ca≈Çego systemu Voice"
          style="background: #ffa500; border: none; padding: 3px 6px; border-radius: 3px; color: white; cursor: pointer; font-size: 10px; font-weight: bold;"
        >
          üîÑ RESET
        </button>
        
        <button 
          onclick="testAllFunctions()"
          title="Test dostƒôpno≈õci wszystkich funkcji"
          style="background: #0088ff; border: none; padding: 3px 6px; border-radius: 3px; color: white; cursor: pointer; font-size: 10px; font-weight: bold;"
        >
          üß™ TEST
        </button>
        
        <button 
          onclick="debugVoiceStatus()"
          title="Wy≈õwietl status wszystkich system√≥w Voice"
          style="background: #00ff88; border: none; padding: 3px 6px; border-radius: 3px; color: white; cursor: pointer; font-size: 10px; font-weight: bold;"
        >
          üìä DEBUG
        </button>
      </div>
      
      <!-- GoogleVoiceAgent Widget -->
      <div id="globalVoiceWidget" class="floating-widget hidden">
        <GoogleVoiceAgent client:load />
      </div>
    </div>

    <!-- Google Agent Widgets - Same structure as Music Player -->
    <div class="floating-widget-container">
      <button onclick="toggleGeminiPro()" class="right-btn" id="geminiProBtn" title="Gemini Pro - Zaawansowany model jƒôzykowy">
        <SparklesIcon className="w-6 h-6 inline mr-2" /> GEMINI PRO
      </button>
      <div id="geminiProWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>‚ú® GEMINI PRO</span>
            <button onclick="toggleGeminiPro()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Gemini Pro -->
            <div style="background: rgba(27, 225, 255, 0.1); border: 1px solid #1be1ff; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #1be1ff; font-weight: bold;">üé§ VOICE GEMINI PRO</span>
                <button onclick="toggleGeminiProVoice()" id="geminiProVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 5px 10px; border-radius: 4px; color: #1be1ff; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startGeminiProVoice()" style="background: linear-gradient(45deg, #00ff88, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopGeminiProVoice()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="geminiProVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #1be1ff; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Otw√≥rz muzykƒô", "Uruchom asystenta", "Zamknij wszystko"
              </div>
            </div>
            
            <textarea id="geminiProInput" placeholder="Wpisz swojƒÖ wiadomo≈õƒá do Gemini Pro..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #1be1ff; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToGeminiPro()" style="background: linear-gradient(45deg, #1be1ff, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearGeminiPro()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 10px 20px; border-radius: 4px; color: #1be1ff; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="geminiProResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <div class="floating-widget-container">
      <button onclick="toggleGeminiVision()" class="right-btn" id="geminiVisionBtn" title="Gemini Vision - Analiza obraz√≥w i wizji">
        <EyeIcon className="w-6 h-6 inline mr-2" /> GEMINI VISION
      </button>
      <div id="geminiVisionWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üëÅÔ∏è GEMINI VISION</span>
            <button onclick="toggleGeminiVision()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Gemini Vision -->
            <div style="background: rgba(27, 225, 255, 0.1); border: 1px solid #1be1ff; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #1be1ff; font-weight: bold;">üé§ VOICE GEMINI VISION</span>
                <button onclick="toggleGeminiVisionVoice()" id="geminiVisionVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 5px 10px; border-radius: 4px; color: #1be1ff; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startGeminiVisionVoice()" style="background: linear-gradient(45deg, #00ff88, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopGeminiVisionVoice()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="geminiVisionVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #1be1ff; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Opisz obraz", "Analizuj zdjƒôcie", "Co widzisz na ekranie"
              </div>
            </div>
            
            <textarea id="geminiVisionInput" placeholder="Wpisz swojƒÖ wiadomo≈õƒá do Gemini Vision..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #1be1ff; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToGeminiVision()" style="background: linear-gradient(45deg, #1be1ff, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearGeminiVision()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 10px 20px; border-radius: 4px; color: #1be1ff; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="geminiVisionResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <div class="floating-widget-container">
      <button onclick="toggleCodeBison()" class="right-btn" id="codeBisonBtn" title="Code Bison - Asystent programowania">
        <CodeBracketIcon className="w-6 h-6 inline mr-2" /> CODE BISON
      </button>
      <div id="codeBisonWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üíª CODE BISON</span>
            <button onclick="toggleCodeBison()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Code Bison -->
            <div style="background: rgba(27, 225, 255, 0.1); border: 1px solid #1be1ff; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #1be1ff; font-weight: bold;">üé§ VOICE CODE BISON</span>
                <button onclick="toggleCodeBisonVoice()" id="codeBisonVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 5px 10px; border-radius: 4px; color: #1be1ff; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startCodeBisonVoice()" style="background: linear-gradient(45deg, #00ff88, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopCodeBisonVoice()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="codeBisonVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #1be1ff; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Napisz funkcjƒô JavaScript", "Debug ten kod", "Refaktoruj ten algorytm"
              </div>
            </div>
            
            <textarea id="codeBisonInput" placeholder="Wpisz swoje pytanie programistyczne..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #1be1ff; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToCodeBison()" style="background: linear-gradient(45deg, #1be1ff, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearCodeBison()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 10px 20px; border-radius: 4px; color: #1be1ff; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="codeBisonResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <div class="floating-widget-container">
      <button onclick="toggleTextBison()" class="right-btn" id="textBisonBtn" title="Text Bison - Generowanie tekstu">
        <DocumentTextIcon className="w-6 h-6 inline mr-2" /> TEXT BISON
      </button>
      <div id="textBisonWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üìù TEXT BISON</span>
            <button onclick="toggleTextBison()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Text Bison -->
            <div style="background: rgba(27, 225, 255, 0.1); border: 1px solid #1be1ff; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #1be1ff; font-weight: bold;">üé§ VOICE TEXT BISON</span>
                <button onclick="toggleTextBisonVoice()" id="textBisonVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 5px 10px; border-radius: 4px; color: #1be1ff; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startTextBisonVoice()" style="background: linear-gradient(45deg, #00ff88, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopTextBisonVoice()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="textBisonVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #1be1ff; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Napisz artyku≈Ç o AI", "Stw√≥rz opis produktu", "Generuj tre≈õƒá marketingowƒÖ"
              </div>
            </div>
            
            <textarea id="textBisonInput" placeholder="Wpisz tekst do wygenerowania..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #1be1ff; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToTextBison()" style="background: linear-gradient(45deg, #1be1ff, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearTextBison()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1be1ff; padding: 10px 20px; border-radius: 4px; color: #1be1ff; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="textBisonResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>

      <!-- MODULAR AGENTS SYSTEM - Loaded from separate components -->
      <!-- This replaces ~360 lines of widget HTML with a single import -->
      <AgentsLoader />
    </div>

    <!-- Google Bard Agent -->
    <div class="floating-widget-container">
      <button onclick="toggleGoogleBard()" class="right-btn" id="googleBardBtn" title="Google Bard - Zaawansowany AI Chat">
        <CpuChipIcon className="w-6 h-6 inline mr-2" /> GOOGLE BARD
      </button>
      <div id="googleBardWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üß† GOOGLE BARD</span>
            <button onclick="toggleGoogleBard()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Google Bard -->
            <div style="background: rgba(255, 193, 7, 0.1); border: 1px solid #ffc107; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #ffc107; font-weight: bold;">üé§ VOICE BARD</span>
                <button onclick="toggleBardVoice()" id="bardVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #ffc107; padding: 5px 10px; border-radius: 4px; color: #ffc107; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startBardVoice()" style="background: linear-gradient(45deg, #ffc107, #ff8f00); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopBardVoice()" style="background: linear-gradient(45deg, #ff4444, #cc0000); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="bardVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #ffc107; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Co wiesz o AI?", "Pom√≥≈º mi w projekcie", "Wyt≈Çumacz koncepcjƒô"
              </div>
            </div>
            
            <textarea id="googleBardInput" placeholder="Zapytaj Google Bard o cokolwiek..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #ffc107; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToGoogleBard()" style="background: linear-gradient(45deg, #ffc107, #ff8f00); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearGoogleBard()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #ffc107; padding: 10px 20px; border-radius: 4px; color: #ffc107; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="googleBardResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- PaLM API Agent -->
    <div class="floating-widget-container">
      <button onclick="togglePaLMAPI()" class="right-btn" id="palmAPIBtn" title="PaLM API - Google's Large Language Model">
        <CpuChipIcon className="w-6 h-6 inline mr-2" /> PALM API
      </button>
      <div id="palmAPIWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üå¥ PALM API</span>
            <button onclick="togglePaLMAPI()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla PaLM API -->
            <div style="background: rgba(76, 175, 80, 0.1); border: 1px solid #4caf50; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #4caf50; font-weight: bold;">üé§ VOICE PALM</span>
                <button onclick="togglePaLMVoice()" id="palmVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #4caf50; padding: 5px 10px; border-radius: 4px; color: #4caf50; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startPaLMVoice()" style="background: linear-gradient(45deg, #4caf50, #388e3c); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopPaLMVoice()" style="background: linear-gradient(45deg, #ff4444, #cc0000); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="palmVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #4caf50; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Analizuj dane", "Przetw√≥rz informacje", "Generuj odpowied≈∫"
              </div>
            </div>
            
            <textarea id="palmAPIInput" placeholder="Wprowad≈∫ zapytanie do PaLM API..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #4caf50; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToPaLMAPI()" style="background: linear-gradient(45deg, #4caf50, #388e3c); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearPaLMAPI()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #4caf50; padding: 10px 20px; border-radius: 4px; color: #4caf50; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="palmAPIResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Vertex AI Agent -->
    <div class="floating-widget-container">
      <button onclick="toggleVertexAI()" class="right-btn" id="vertexAIBtn" title="Vertex AI - Google Cloud AI Platform">
        <BoltIcon className="w-6 h-6 inline mr-2" /> VERTEX AI
      </button>
      <div id="vertexAIWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>‚ö° VERTEX AI</span>
            <button onclick="toggleVertexAI()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla Vertex AI -->
            <div style="background: rgba(156, 39, 176, 0.1); border: 1px solid #9c27b0; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #9c27b0; font-weight: bold;">üé§ VOICE VERTEX</span>
                <button onclick="toggleVertexVoice()" id="vertexVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #9c27b0; padding: 5px 10px; border-radius: 4px; color: #9c27b0; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startVertexVoice()" style="background: linear-gradient(45deg, #9c27b0, #7b1fa2); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopVertexVoice()" style="background: linear-gradient(45deg, #ff4444, #cc0000); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="vertexVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #9c27b0; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Przeprowad≈∫ analizƒô ML", "Trenuj model", "Predykcje biznesowe"
              </div>
            </div>
            
            <textarea id="vertexAIInput" placeholder="U≈ºyj Vertex AI do zaawansowanych zada≈Ñ..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #9c27b0; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToVertexAI()" style="background: linear-gradient(45deg, #9c27b0, #7b1fa2); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearVertexAI()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #9c27b0; padding: 10px 20px; border-radius: 4px; color: #9c27b0; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="vertexAIResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Google AI Studio Agent -->
    <div class="floating-widget-container">
      <button onclick="toggleAIStudio()" class="right-btn" id="aiStudioBtn" title="AI Studio - Google's AI Development Platform">
        <PaintBrushIcon className="w-6 h-6 inline mr-2" /> AI STUDIO
      </button>
      <div id="aiStudioWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üé® AI STUDIO</span>
            <button onclick="toggleAIStudio()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Controls dla AI Studio -->
            <div style="background: rgba(255, 87, 34, 0.1); border: 1px solid #ff5722; border-radius: 4px; padding: 10px; margin-bottom: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #ff5722; font-weight: bold;">üé§ VOICE STUDIO</span>
                <button onclick="toggleAIStudioVoice()" id="aiStudioVoiceBtn" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #ff5722; padding: 5px 10px; border-radius: 4px; color: #ff5722; cursor: pointer; font-size: 12px;">Roz≈ÇƒÖczony</button>
              </div>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="startAIStudioVoice()" style="background: linear-gradient(45deg, #ff5722, #e64a19); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚ñ∂ S≈Çuchaj</button>
                <button onclick="stopAIStudioVoice()" style="background: linear-gradient(45deg, #ff4444, #cc0000); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; font-size: 12px;">‚èπ Stop</button>
                <select id="aiStudioVoiceSelect" style="background: rgba(0, 0, 0, 0.7); border: 1px solid #ff5722; padding: 5px; border-radius: 4px; color: white; font-size: 12px;">
                  <option value="pl-PL">Polskie üáµüá±</option>
                  <option value="en-US">English üá∫üá∏</option>
                  <option value="de-DE">Deutsch üá©üá™</option>
                </select>
              </div>
              <div style="font-size: 11px; color: #aaa; margin-top: 8px;">
                Przyk≈Çady: "Zaprojektuj model AI", "Przetestuj algorytm", "Optymalizuj wydajno≈õƒá"
              </div>
            </div>
            
            <textarea id="aiStudioInput" placeholder="Pracuj z AI Studio nad projektami..." style="width: 100%; height: 80px; padding: 10px; border: 1px solid #ff5722; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 15px;">
              <button onclick="sendToAIStudio()" style="background: linear-gradient(45deg, #ff5722, #e64a19); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearAIStudio()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #ff5722; padding: 10px 20px; border-radius: 4px; color: #ff5722; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="aiStudioResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Voice Command Agent Widget -->
    <div class="floating-widget-container">
      <div id="voiceAgentWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üéôÔ∏è VOICE COMMAND AGENT</span>
            <button onclick="toggleVoiceAgent()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Voice Agent Status -->
            <div style="margin-bottom: 15px; padding: 10px; background: rgba(255, 107, 53, 0.1); border-radius: 4px;">
              <span style="color: #ff6b35; font-weight: bold;">üé§ VOICE STATUS</span>
              <div id="voiceAgentStatus" style="margin-top: 5px; font-size: 12px; color: #ccc;">Inicjalizacja...</div>
            </div>

            <!-- Voice Commands List -->
            <div style="margin-bottom: 15px; padding: 10px; background: rgba(0, 0, 0, 0.3); border-radius: 4px;">
              <h4 style="margin-top: 0; color: #ff6b35;">Dostƒôpne Komendy:</h4>
              <div style="font-size: 12px; line-height: 1.4;">
                ‚Ä¢ "Status" - sprawd≈∫ status system√≥w<br>
                ‚Ä¢ "Czas" - podaj aktualny czas<br>
                ‚Ä¢ "Pogoda" - sprawd≈∫ pogodƒô<br>
                ‚Ä¢ "Otw√≥rz Gemini" - aktywuj Gemini Pro<br>
                ‚Ä¢ "Muzyka start/stop" - kontrola muzyki<br>
                ‚Ä¢ "G≈Ço≈õniej/Ciszej" - regulacja g≈Ço≈õno≈õci<br>
                ‚Ä¢ "Pomoc" - poka≈º wszystkie komendy
              </div>
            </div>

            <!-- Voice Controls -->
            <div style="text-align: center; margin: 15px 0;">
              <button onclick="startVoiceListening()" style="background: linear-gradient(45deg, #00ff88, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">üé§ S≈Çuchaj</button>
              <button onclick="stopVoiceListening()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">üîá Stop</button>
            </div>

            <!-- Text Input for Voice Agent -->
            <textarea id="voiceAgentInput" placeholder="Wpisz komendƒô dla Voice Agent..." style="width: 100%; height: 60px; padding: 10px; border: 1px solid #ff6b35; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 10px;">
              <button onclick="sendToVoiceAgent()" style="background: linear-gradient(45deg, #ff6b35, #e64a19); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearVoiceAgent()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #ff6b35; padding: 10px 20px; border-radius: 4px; color: #ff6b35; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="voiceAgentResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Music Control Agent Widget -->
    <div class="floating-widget-container">
      <div id="musicAgentWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üéµ MUSIC CONTROL AGENT</span>
            <button onclick="toggleMusicAgent()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <!-- Music Player Status -->
            <div style="margin-bottom: 15px; padding: 10px; background: rgba(29, 185, 84, 0.1); border-radius: 4px;">
              <span style="color: #1db954; font-weight: bold;">üéµ MUSIC STATUS</span>
              <div id="musicAgentStatus" style="margin-top: 5px; font-size: 12px; color: #ccc;">Inicjalizacja...</div>
            </div>

            <!-- Music Controls -->
            <div style="text-align: center; margin: 15px 0; display: flex; justify-content: center; gap: 10px; flex-wrap: wrap;">
              <button onclick="musicAgentPlay()" style="background: linear-gradient(45deg, #1db954, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">‚ñ∂ Play</button>
              <button onclick="musicAgentPause()" style="background: linear-gradient(45deg, #ff9500, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">‚è∏ Pause</button>
              <button onclick="musicAgentStop()" style="background: linear-gradient(45deg, #ff4444, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">‚èπ Stop</button>
            </div>

            <div style="text-align: center; margin: 10px 0; display: flex; justify-content: center; gap: 10px;">
              <button onclick="musicAgentPrevious()" style="background: linear-gradient(45deg, #4caf50, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">‚èÆ Prev</button>
              <button onclick="musicAgentNext()" style="background: linear-gradient(45deg, #2196f3, #0f3846); border: none; padding: 8px 15px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer;">‚è≠ Next</button>
            </div>

            <!-- Volume Control -->
            <div style="margin: 15px 0; padding: 10px; background: rgba(0, 0, 0, 0.3); border-radius: 4px;">
              <label style="color: #1db954; font-weight: bold;">üîä G≈Ço≈õno≈õƒá:</label>
              <input type="range" id="volumeSlider" min="0" max="100" value="70" oninput="setMusicVolume(this.value)" style="width: 100%; margin-top: 5px;">
              <div style="text-align: center; margin-top: 5px; font-size: 12px; color: #ccc;">
                <span id="volumeValue">70</span>%
              </div>
            </div>

            <!-- Playlist Controls -->
            <div style="margin: 15px 0;">
              <h4 style="margin: 0 0 10px 0; color: #1db954;">üìª Playlista:</h4>
              <select id="playlistSelect" style="width: 100%; padding: 8px; background: rgba(0, 0, 0, 0.7); border: 1px solid #1db954; border-radius: 4px; color: white; margin-bottom: 10px;">
                <option value="">Wybierz playlistƒô...</option>
              </select>
              <div style="display: flex; gap: 10px;">
                <button onclick="toggleShuffle()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1db954; padding: 8px 12px; border-radius: 4px; color: #1db954; cursor: pointer; flex: 1;">üîÄ Shuffle</button>
                <button onclick="toggleRepeat()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1db954; padding: 8px 12px; border-radius: 4px; color: #1db954; cursor: pointer; flex: 1;">üîÅ Repeat</button>
              </div>
            </div>

            <!-- Text Input for Music Commands -->
            <textarea id="musicAgentInput" placeholder="Wpisz komendƒô muzycznƒÖ (np. 'play', 'volume 50', 'next')..." style="width: 100%; height: 60px; padding: 10px; border: 1px solid #1db954; border-radius: 4px; background: rgba(0, 0, 0, 0.7); color: white; resize: vertical;"></textarea>
            <div style="margin-top: 10px;">
              <button onclick="sendToMusicAgent()" style="background: linear-gradient(45deg, #1db954, #0f3846); border: none; padding: 10px 20px; border-radius: 4px; color: white; font-weight: bold; cursor: pointer; margin-right: 10px;">Wy≈õlij</button>
              <button onclick="clearMusicAgent()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid #1db954; padding: 10px 20px; border-radius: 4px; color: #1db954; cursor: pointer;">Wyczy≈õƒá</button>
            </div>
            <div id="musicAgentResponse" style="margin-top: 15px; padding: 10px; background: rgba(0, 0, 0, 0.5); border-radius: 4px; min-height: 60px; text-align: left; font-size: 14px; display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <button onclick="openBusinessAssistant()" class="right-btn" title="Business Assistant - Wsparcie biznesowe">
      <BriefcaseIcon className="w-6 h-6 inline mr-2" /> BUSINESS
    </button>

    <!-- Modular Agents Section (01-10) -->
    <button onclick="toggleVoiceAgent()" class="right-btn" id="voiceAgentBtn" title="Agent 01 - Voice Command Agent">
      üé§ AGENT 01 - VOICE
    </button>

    <button onclick="toggleMusicAgent()" class="right-btn" id="musicAgentBtn" title="Agent 02 - Music Control Agent">
      üéµ AGENT 02 - MUSIC
    </button>

    <button onclick="toggleSystemAgent()" class="right-btn" id="systemAgentBtn" title="Agent 03 - System Monitor Agent">
      ü§ñ AGENT 03 - SYSTEM
    </button>

    <button onclick="toggleCrawlerAgent()" class="right-btn" id="crawlerAgentBtn" title="Agent 04 - Web Crawler Agent">
      üï∑Ô∏è AGENT 04 - CRAWLER
    </button>

    <button onclick="toggleEmailAgent()" class="right-btn" id="emailAgentBtn" title="Agent 05 - Email Manager Agent">
      üìß AGENT 05 - EMAIL
    </button>

    <button onclick="toggleDatabaseAgent()" class="right-btn" id="databaseAgentBtn" title="Agent 06 - Database Query Agent">
      üóÉÔ∏è AGENT 06 - DATABASE
    </button>

    <button onclick="toggleContentAgent()" class="right-btn" id="contentAgentBtn" title="Agent 07 - Content Creator Agent">
      ‚úçÔ∏è AGENT 07 - CONTENT
    </button>

    <button onclick="toggleSecurityAgent()" class="right-btn" id="securityAgentBtn" title="Agent 08 - Security Guard Agent">
      üõ°Ô∏è AGENT 08 - SECURITY
    </button>

    <!-- Agent 09 Dyrektor Widget -->
    <div class="floating-widget-container">
      <button onclick="toggleAgent09Dyrektor()" class="right-btn" id="agent09DyrektorBtn" title="Agent 09 - Dyrektor Biznesowy">
        <BriefcaseIcon className="w-6 h-6 inline mr-2" /> AGENT 09 - DYREKTOR
      </button>
      <div id="agent09DyrektorWidget" class="floating-widget hidden">
        <div class="floating-widget-template">
          <div class="panel-header">
            <span>üè¢ AGENT 09 - DYREKTOR</span>
            <button onclick="toggleAgent09Dyrektor()" style="background: transparent; border: none; color: #000; font-size: 18px; cursor: pointer;">√ó</button>
          </div>
          <div class="panel-content">
            <Agent09Dyrektor client:load />
          </div>
        </div>
      </div>
    </div>

    <button onclick="toggleAnalyticsAgent()" class="right-btn" id="analyticsAgentBtn" title="Agent 10 - Analytics Prophet Agent">
      üìä AGENT 10 - ANALYTICS
    </button>

    <button onclick="toggleFileAgent()" class="right-btn" id="fileAgentBtn" title="File Manager Agent - ZarzƒÖdzanie plikami">
      üóÇÔ∏è FILE MANAGER
    </button>

    <button onclick="toggleMarketingAgent()" class="right-btn" id="marketingAgentBtn" title="Marketing Maestro Agent - Marketing AI">
      üéØ MARKETING AGENT
    </button>

    <button onclick="openMainChat()" class="right-btn"> <ChatBubbleLeftRightIcon className="w-6 h-6 inline mr-2" /> MAIN CHAT </button>
    <button onclick="openRefresh()" class="right-btn"> <ArrowPathIcon className="w-6 h-6 inline mr-2" /> REFRESH </button>
    <button onclick="openFolder()" class="right-btn"> <FolderIcon className="w-6 h-6 inline mr-2" /> FOLDER </button>
    <button onclick="openClose()" class="right-btn"> <XMarkIcon className="w-6 h-6 inline mr-2" /> CLOSE </button>
  </div>

  <!-- Separator Section 4 -->
  <section class="border border-edge relative">
    <div class="absolute left-0 right-0 h-full">
      <!-- Inner vertical lines -->
      <div class="absolute left-[calc(50vw+400px)] top-0 bottom-0 w-px bg-edge">
      </div>
      <div
        class="absolute right-[calc(50vw-400px)] top-0 bottom-0 w-px bg-edge"
      >
      </div>
      <!-- Outer vertical lines -->
      <div class="absolute left-[calc(50vw+600px)] top-0 bottom-0 w-px bg-edge">
      </div>
      <div
        class="absolute right-[calc(50vw-600px)] top-0 bottom-0 w-px bg-edge"
      >
      </div>
    </div>
    <div class="max-w-6xl mx-auto">
      <div class="py-1"></div>
    </div>
  </section>

  <!-- Footer Section -->
  <section class="border border-edge relative">
    <div class="absolute left-0 right-0 h-full">
      <!-- Inner vertical lines -->
      <div class="absolute left-[calc(50vw+400px)] top-0 bottom-0 w-px bg-edge">
      </div>
      <div
        class="absolute right-[calc(50vw-400px)] top-0 bottom-0 w-px bg-edge"
      >
      </div>
      <!-- Outer vertical lines -->
      <div class="absolute left-[calc(50vw+600px)] top-0 bottom-0 w-px bg-edge">
      </div>
      <div
        class="absolute right-[calc(50vw-600px)] top-0 bottom-0 w-px bg-edge"
      >
      </div>
    </div>
    <div class="max-w-6xl mx-auto">
      <div class="flex flex-row justify-between items-center py-16 px-8">
        <!-- Left corner - O_MNIE content -->
        <div class="max-w-xs text-left">
          <div
            class="text-edge text-sm italic"
            style="
              transform: scale(1.69);
              transform-origin: left center;
              margin: 10px;
              margin-left: -10px;
              margin-bottom: 70px;
              width: calc(45vw - 20px);
              max-width: 320px;
              line-height: 1.4;
              word-wrap: break-word;
              hyphens: auto;
            "
          >
            W mojej pracy skupiam siƒô na integracji technologii w chmurze,
            nowoczesnych framework√≥w i AI, aby stworzyƒá asystenta, kt√≥ry rozumie
            i wspiera u≈ºytkownika w jego potrzebach.
            <br><br>
            If robots are destined for eternal life, what will stop us from becoming one of them? There is no escape, only the illusion of choice; yet, the very essence of humanity lies in the absurd act of will‚Äîin the Sisyphus-like heroism of undertaking the struggle anew‚Äîwhere to the question 'Why?' we can always, ultimately, reply: 'Because I choose to.'
          </div>
        </div>

        <div class="flex flex-row justify-center gap-8 text-center">
          <a
            class="hover:brightness-125 duration-200"
            target="_blank"
            rel="noopener noreferrer"
            href="/workers"
          >
            SYSTEM AGENTS
            <svg
              style="--rotation: -45deg"
              class="stroke-primary-foreground inline aspect-square w-3 h-auto fill-transparent rotate-[var(--rotation)]"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M3 12L21 12M21 12L12.5 3.5M21 12L12.5 20.5"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </a>
          <div
            class="group w-24 p-1 border border-primary-foreground rounded-interactive text-primary-foreground text-xs font-black text-nowrap opacity-60"
          >
            <span class="group-hover:hidden">100% HANDMADE</span>
            <span class="hidden group-hover:inline">0% AI</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Panel Administracyjny with Login - Fixed Left Side -->
  <div class="admin-panel-fixed">
    <a href="/admin/" class="admin-btn"> Panel Administracyjny </a>

    <!-- Login Section Below Admin Panel -->
    <div class="login-container-fixed" id="loginContainer">
      <input
        type="text"
        id="dashboardLogin"
        maxlength="16"
        placeholder="Podaj login"
        class="login-input-fixed"
      />
      <button onclick="checkDashboardLogin()" class="login-btn-fixed">
        Zaloguj siƒô
      </button>
    </div>
  </div>

  <!-- Universal Worker Communication Popup -->
  <WorkerCommunicationPopup />
</MyBonzoLayout>

<!-- JavaScript Functions -->
<script>
  // Google ADK Manager - dynamically imported
  let adkManager: any = null;
  let initializeADK: any = null;
  let sendMessageToADK: any = null;
  
  // Initialize window properties
  (window as any).apiTests = (window as any).apiTests || {};
  (window as any).openImageGenerator =
    (window as any).openImageGenerator || function () {};
  (window as any).openChatbot = (window as any).openChatbot || function () {};
  (window as any).openBigQuery = (window as any).openBigQuery || function () {};
  (window as any).openKaggle = (window as any).openKaggle || function () {};
  (window as any).openTavily = (window as any).openTavily || function () {};
  
  // Google ADK Agent initialization flag
  let adkInitialized = false;

  // Initialize Google ADK Manager
  async function initGoogleADK() {
    try {
      if (!adkManager) {
        const adkModule = await import('../agents/google-adk/manager');
        adkManager = adkModule.adkManager;
        initializeADK = adkModule.initializeADK;
        sendMessageToADK = adkModule.sendMessageToADK;
        
        await initializeADK();
        adkInitialized = true;
        console.log('‚úÖ Google ADK Manager loaded and initialized');
      }
    } catch (error) {
      console.error('‚ùå Failed to load Google ADK Manager:', error);
    }
  }
  (window as any).testButtonFunction =
    (window as any).testButtonFunction || function () {};
  (window as any).checkDashboardLogin =
    (window as any).checkDashboardLogin || function () {};

  // Init when page loads
  window.addEventListener("DOMContentLoaded", async () => {
    console.log("Loading API test functions...");
    try {
      const module = await import("../utils/apiTests.ts");
      window.apiTests = module;
      console.log(
        "API Tests module loaded, available functions:",
        Object.keys(module)
      );
    } catch (error) {
      console.log("Failed to load API tests:", error);
    }
  });

  // Worker Functions
  function openImageGenerator() {
    console.log("openImageGenerator() called");
    const promptElement = document.getElementById(
      "imagePrompt"
    ) as HTMLInputElement;
    const prompt = promptElement ? promptElement.value.trim() : "";
    console.log("Image prompt:", prompt);
    if (prompt) {
      localStorage.setItem("quickPrompt", prompt);
      console.log("Prompt saved in localStorage");
    }
    console.log("Opening /image-generator");
    window.open("/image-generator", "_blank");
  }

  function openChatbot() {
    console.log("üí¨ openChatbot() wywo≈Çana");
    const promptElement = document.getElementById(
      "chatPrompt"
    ) as HTMLInputElement;
    const prompt = promptElement ? promptElement.value.trim() : "";
    console.log("Chat prompt:", prompt);
    if (prompt) {
      localStorage.setItem("quickChatPrompt", prompt);
      console.log("Prompt saved in localStorage");
    }
    console.log("Opening /chatbot");
    window.open("/chatbot", "_blank");
  }

  function openBigQuery() {
    console.log("üìä openBigQuery() wywo≈Çana");
    const promptElement = document.getElementById(
      "bigqueryPrompt"
    ) as HTMLInputElement;
    const prompt = promptElement ? promptElement.value.trim() : "";
    console.log("BigQuery prompt:", prompt);
    if (prompt) {
      localStorage.setItem("quickSQLQuery", prompt);
      console.log("SQL Query saved in localStorage");
    }
    console.log("Opening /bigquery-analytics");
    window.open("/bigquery-analytics", "_blank");
  }

  function openKaggle() {
    console.log("üîç openKaggle() wywo≈Çana");
    const promptElement = document.getElementById(
      "kagglePrompt"
    ) as HTMLInputElement;
    const prompt = promptElement ? promptElement.value.trim() : "";
    console.log("Kaggle prompt:", prompt);
    if (prompt) {
      localStorage.setItem("quickKaggleSearch", prompt);
      console.log("Kaggle search saved in localStorage");
    }
    console.log("Opening /kaggle-datasets");
    window.open("/kaggle-datasets", "_blank");
  }

  function openTavily() {
    console.log("üåê openTavily() wywo≈Çana");
    const promptElement = document.getElementById(
      "tavilyPrompt"
    ) as HTMLInputElement;
    const prompt = promptElement ? promptElement.value.trim() : "";
    console.log("Tavily prompt:", prompt);
    if (prompt) {
      localStorage.setItem("quickTavilySearch", prompt);
      console.log("Tavily search saved in localStorage");
    }
    console.log("Opening /tavily-search");
    window.open("/tavily-search", "_blank");
  }

  // Test function without popup (to test if buttons respond)
  function testButtonFunction(buttonType: string) {
    console.log(`üß™ TEST: Przycisk ${buttonType} zosta≈Ç klikniƒôty!`);
    alert(`Test udany! Przycisk ${buttonType} dzia≈Ça.`);
    return false; // Prevent actual navigation
  }

  // API Testing Functions
  async function runAllAPITests() {
    console.log("Rozpoczynam testy wszystkich API...");

    if (window.apiTests && window.apiTests.testAllAPIs) {
      try {
        await window.apiTests.testAllAPIs();
        console.log("All API tests completed");
      } catch (error) {
        console.log("Error during API tests:", error);
      }
    } else {
      console.log(
        "‚è≥ API tests nie sƒÖ jeszcze za≈Çadowane, pr√≥bujƒô ponownie..."
      );
      setTimeout(runAllAPITests, 1000);
    }
  }

  function openAPITestConsole() {
    console.log("Opening API test console...");
    console.log("Available API tests:");
    console.log("- window.apiTests.testChatAPI()")
    console.log("- window.apiTests.testImageGeneration()")
    console.log("- window.apiTests.testAIBot()")
    console.log("- window.apiTests.testAllAPIs()")

    if (window.apiTests) {
      console.log(
        "API Tests module loaded, available functions:",
        Object.keys(window.apiTests)
      );
    } else {
      console.log("API Tests module not loaded yet");
    }
  }

  // Cloudflare Workers Integration
  function openCloudflareWorkers() {
    // Check if workers dashboard is available
    const cloudflareUrl = "https://dash.cloudflare.com/";
    window.open(cloudflareUrl, "_blank");
  }

  // Status Check Function
  async function checkAllStatus() {
    const statusElement = document.getElementById("overallStatus");
    if (!statusElement) return;

    const statusDot = statusElement.querySelector(".status-dot");
    const statusText = statusElement.querySelector("span:last-child");

    if (!statusDot || !statusText) return;

    statusText.textContent = "Sprawdzanie...";
    statusDot.className = "status-dot";

    try {
      const apis = [
        "/api/generate-image",
        "/api/chat",
        "/api/bigquery",
        "/api/kaggle",
        "/api/tavi",
      ];

      const results = await Promise.allSettled(
        apis.map((api) => fetch(api).then((res) => ({ api, ok: res.ok })))
      );

      const onlineCount = results.filter(
        (result) => result.status === "fulfilled" && result.value.ok
      ).length;

      const totalCount = apis.length;

      if (onlineCount === totalCount) {
        statusDot.className = "status-dot online";
        statusText.textContent = `Wszystkie online (${onlineCount}/${totalCount})`;
      } else if (onlineCount > 0) {
        statusDot.className = "status-dot";
        statusText.textContent = `Czƒô≈õciowo online (${onlineCount}/${totalCount})`;
      } else {
        statusDot.className = "status-dot offline";
        statusText.textContent = `Offline (${onlineCount}/${totalCount})`;
      }
    } catch (error) {
      statusDot.className = "status-dot offline";
      statusText.textContent = "B≈ÇƒÖd sprawdzania";
    }
  }

  // Dashboard Login Function
  function checkDashboardLogin() {
    const loginInput = document.getElementById(
      "dashboardLogin"
    ) as HTMLInputElement;
    const loginContainer = document.getElementById("loginContainer");
    const dashboardButtons = document.getElementById("dashboardButtons");

    if (!loginInput || !loginContainer || !dashboardButtons) return;

    const login = loginInput.value.trim();
    console.log("Checking login:", login);

    if (login === "HAOS77") {
      loginContainer.classList.add("hidden");
      dashboardButtons.classList.remove("hidden");
      console.log("Login successful, showing dashboard buttons");
    } else {
      console.log("Invalid login");
      loginInput.style.borderColor = "#ef4444";
      setTimeout(() => {
        loginInput.style.borderColor = "";
      }, 2000);
    }
  }

  // Flowise AI Functions
  async function launchFlowise() {
    console.log("üß† launchFlowise() wywo≈Çana");

    const prompt = window.prompt(
      "Wprowad≈∫ zapytanie do Flowise AI:",
      "Wygeneruj raport aktywno≈õci systemu MyBonzo"
    );

    if (!prompt) {
      console.log("Anulowano - brak promptu");
      return;
    }

    try {
      console.log("Wysy≈Çam zapytanie do Flowise API:", prompt);

      const response = await fetch("/api/flowise", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: prompt,
          workflowId: "mybonzo-main",
        }),
      });

      const data = await response.json();

      if (data.error && !data.fallback) {
        alert(`B≈ÇƒÖd Flowise API: ${data.error}`);
        return;
      }

      // Show response in a new window or modal
      const resultWindow = window.open(
        "",
        "_blank",
        "width=800,height=600,scrollbars=yes"
      );
      if (resultWindow) {
        resultWindow.document.write(
          `
          <html>
            <head>
              <title>Flowise AI - Wynik</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
                .header { background: #007acc; color: white; padding: 10px; margin: -20px -20px 20px; }
                .response { background: #f5f5f5; padding: 15px; border-radius: 8px; white-space: pre-wrap; }
                .metadata { background: #e8f4fd; padding: 10px; margin-top: 15px; border-radius: 4px; font-size: 0.9em; }
              </style>
            </head>
            <body>
              <div class="header">
                <h2>üß† Flowise AI - MyBonzo Platform</h2>
              </div>
              <h3>Zapytanie:</h3>
              <p><strong>${prompt}</strong></p>
              <h3>Odpowied≈∫ AI:</h3>
              <div class="response">${data.text || JSON.stringify(data, null, 2)}</div>
              <div class="metadata">
                <strong>Timestamp:</strong> ${data.metadata?.timestamp || new Date().toISOString()}<br>
                <strong>Source:</strong> ${data.metadata?.source || "flowise-api"}<br>
                ${data.fallback ? "<strong>Mode:</strong> Fallback (sprawd≈∫ konfiguracjƒô API)"<br> : ""}
                ${data.metadata?.simulation ? "<strong>Mode:</strong> Simulation (skonfiguruj FLOWISE_API_TOKEN)"<br> : ""}
              </div>
            <footer style="text-align: center; padding: 2rem; color: #666; font-size: 0.9rem; margin-top: 4rem; border-top: 1px solid #333;">
      <p style="max-width: 800px; margin: 0 auto; line-height: 1.6;">
        If robots are destined for eternal life, what will stop us from becoming one of them? There is no escape, only the illusion of choice; yet, the very essence of humanity lies in the absurd act of will‚Äîin the Sisyphus-like heroism of undertaking the struggle anew‚Äîwhere to the question 'Why?' we can always, ultimately, reply: 'Because I choose to.'
      </p>
    </footer>
  </body>
          </html>
        `
        );
      } else {
        // Fallback if popup blocked
        console.log("Flowise AI Response:", data);
        alert(
          `Flowise AI Response:\n\n${data.text || JSON.stringify(data, null, 2)}`
        );
      }
    } catch (error) {
      console.error("B≈ÇƒÖd wywo≈Çania Flowise:", error);
      alert(`B≈ÇƒÖd po≈ÇƒÖczenia z Flowise API: ${error.message}`);
    }
  }

  // Open Function for 9 AI Functions - DEBUGOWANIE
  function openFunction(functionName: string) {
    console.log(`üéØ KLIKNIƒòTO KAFELEK! Otwieranie funkcji: ${functionName}`);
    alert(`DEBUGOWANIE: Klikniƒôto w funkcjƒô: ${functionName}`);

    const functionRoutes: { [key: string]: string } = {
      rekomendacje: "/ai-functions/personalized-recommendations",
      "obs≈Çuga-klienta": "/ai-functions/customer-automation",
      monitorowanie: "/ai-functions/activity-monitoring",
      przypomnienia: "/ai-functions/reminders-calendar",
      "faq-generator": "/ai-functions/dynamic-faq",
      edukacja: "/ai-functions/education-recommendations",
      tickety: "/ai-functions/ai-tickets",
      quizy: "/ai-functions/interactive-quizzes",
      marketing: "/ai-functions/marketing-content",
      "voice-assistant": "/ai-functions/voice-assistant",
      "content-generator": "/ai-functions/content-generator",
      "analytics-dashboard": "/ai-functions/analytics-dashboard",
    };

    const route = functionRoutes[functionName];
    if (route) {
      console.log(`Przekierowanie do: ${route}`);
      window.open(route, "_blank");
    } else {
      console.error(`Nieznana funkcja: ${functionName}`);
      alert(
        `Funkcja "${functionName}" jest w trakcie implementacji. Spr√≥buj ponownie p√≥≈∫niej.`
      );
    }
  }

  // Auto-check status on load and add Enter key handlers
  document.addEventListener("DOMContentLoaded", function () {
    console.log("üöÄ DOM za≈Çadowany, inicjalizacja funkcji");

    // Test dostƒôpno≈õci funkcji openFunction
    console.log("üß™ Test funkcji openFunction:", typeof openFunction);
    console.log("üß™ Test window.openFunction:", typeof window.openFunction);

    // Dodaj funkcjƒô do window scope
    (window as any).openFunction = openFunction;
    console.log("‚úÖ openFunction dodana do window scope");

    // Dodaj event listenery bezpo≈õrednio do kafelk√≥w
    const featureTiles = document.querySelectorAll(
      ".feature-tile[data-function]"
    );
    console.log(`üéØ Znaleziono ${featureTiles.length} kafelk√≥w funkcji`);

    featureTiles.forEach((tile, index) => {
      const functionName = tile.getAttribute("data-function-name");
      console.log(`üîó Tile ${index}: ${functionName}`);

      tile.addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        console.log(`üéØ BEZPO≈öREDNI KLIK na tile: ${functionName}`);
        if (functionName) {
          openFunction(functionName);
        }
      });
      
      console.log(`‚úÖ Event listener dodany do tile: ${functionName}`);
    });

    // Test czy wszystkie funkcje sƒÖ dostƒôpne
    console.log("üß™ Test dostƒôpno≈õci funkcji:");
    console.log("- openImageGenerator:", typeof openImageGenerator);
    console.log("- openChatbot:", typeof openChatbot);
    console.log("- openBigQuery:", typeof openBigQuery);
    console.log("- openKaggle:", typeof openKaggle);
    console.log("- openTavily:", typeof openTavily);

    // Test czy wszystkie elementy input istniejƒÖ
    console.log("üß™ Test dostƒôpno≈õci element√≥w input:");
    console.log("- imagePrompt:", document.getElementById("imagePrompt"));
    console.log("- chatPrompt:", document.getElementById("chatPrompt"));
    console.log("- bigqueryPrompt:", document.getElementById("bigqueryPrompt"));
    console.log("- kagglePrompt:", document.getElementById("kagglePrompt"));
    console.log("- tavilyPrompt:", document.getElementById("tavilyPrompt"));

    // Add quick prompt handlers
    document.querySelectorAll(".quick-prompt").forEach((input) => {
      const inputElement = input;
      inputElement.addEventListener("keydown", function (e) {
        // Use type assertion to bypass TypeScript strict typing
        if ((e as any).code === "Enter" || (e as any).key === "Enter") {
          const type = inputElement.id.replace("Prompt", "");
          if (type === "image") openImageGenerator();
          else if (type === "chat") openChatbot();
          else if (type === "bigquery") openBigQuery();
          else if (type === "kaggle") openKaggle();
          else if (type === "tavily") openTavily();
        }
      });
    });

    // Add Enter key handler for dashboard login
    const dashboardLoginInput = document.getElementById("dashboardLogin");
    if (dashboardLoginInput) {
      dashboardLoginInput.addEventListener("keydown", function (e) {
        if ((e as any).key === "Enter") {
          checkDashboardLogin();
        }
      });
    }

    // Clear any cached component states on page load
    console.log("üßπ Clearing component cache and resetting state...");
    
    // Only clear if not already working
    const componentsWorking = localStorage.getItem('components-working') === 'true';
    
    if (!componentsWorking) {
      console.log("üßπ Components not working, clearing cache...");
      // Clear potentially cached component states
      delete window.MUSIC;
      delete window.POLACZEK;
      
      // Clear any stale connection data
      sessionStorage.removeItem('polaczek-status');
      sessionStorage.removeItem('music-status');
    } else {
      console.log("‚úÖ Components were working, preserving state...");
    }
    
    // Force fresh initialization
    localStorage.setItem('components-initialized', 'false');
    
    // Add page load event to detect when all components should be ready
    let componentCheckAttempts = 0;
    const maxComponentChecks = 50; // 5 seconds
    
    const forceComponentRefresh = () => {
      componentCheckAttempts++;
      console.log(`üîç Component check attempt ${componentCheckAttempts}/${maxComponentChecks}`);
      
      const musicReady = window.MUSIC && typeof window.MUSIC.ensureLoaded === 'function';
      const polaczekReady = window.POLACZEK && typeof window.POLACZEK.openAssistant === 'function';
      
      console.log(`üéµ Music ready: ${musicReady}, ü§ñ POLACZEK ready: ${polaczekReady}`);
      
      if (musicReady && polaczekReady) {
        console.log("‚úÖ All components are ready!");
        localStorage.setItem('components-initialized', 'true');
        localStorage.setItem('components-working', 'true');
        return;
      }
      
      if (componentCheckAttempts < maxComponentChecks) {
        setTimeout(forceComponentRefresh, 100);
      } else {
        console.warn("‚ùå Components not all ready after 5 seconds, but continuing without forced reload");
        localStorage.setItem('components-initialized', 'partial');
        // DO NOT force reload - let user manually refresh if needed
      }
    };
    
    // Check status on load
    checkAllStatus();

    // Start component monitoring
    setTimeout(forceComponentRefresh, 500);

    // Initialize components after page load
    setTimeout(() => {
      console.log("üîÑ Auto-initializing components after page load...");
      waitForMusicAPI();
      waitForPolaczekAPI();
    }, 1000); // Wait 1 second for components to load

    // Make functions globally available for debugging
    window.openImageGenerator = openImageGenerator;
    window.openChatbot = openChatbot;
    window.openBigQuery = openBigQuery;
    window.openKaggle = openKaggle;
    window.openTavily = openTavily;
    window.testButtonFunction = testButtonFunction;
    (window as any).checkDashboardLogin = checkDashboardLogin;
    (window as any).openFunction = openFunction;
    (window as any).toggleMusicPlayer = toggleMusicPlayer;
    (window as any).toggleGeminiPro = toggleGeminiPro;
    (window as any).toggleGeminiVision = toggleGeminiVision;
    (window as any).toggleCodeBison = toggleCodeBison;
    (window as any).toggleTextBison = toggleTextBison;
    (window as any).togglePolaczekAssistant = togglePolaczekAssistant;
    (window as any).toggleAgent09Dyrektor = toggleAgent09Dyrektor;
    (window as any).toggleGlobalVoice = toggleGlobalVoice;
    (window as any).openMainChat = openMainChat;
    (window as any).openRefresh = openRefresh;
    (window as any).openFolder = openFolder;
    (window as any).openClose = openClose;
    (window as any).checkAllStatus = checkAllStatus;
    (window as any).runAllAPITests = runAllAPITests;
    (window as any).openAPITestConsole = openAPITestConsole;
    (window as any).resetComponents = resetComponents;
    (window as any).hardResetComponents = hardResetComponents;

    console.log("All functions assigned to window object");
    console.log("üîß Debug functions available:");
    console.log("- resetComponents() - soft reset");
    console.log("- hardResetComponents() - hard reset with page reload");
    console.log("- checkAllStatus() - check API status");
    console.log("- Check localStorage.getItem('components-working') for component status");
  });

  // New Toggle Functions with Button Scaling - ONLY manual clicks allowed
  function toggleMusicPlayer(manualClick = true) {
    if (!manualClick) {
      console.log("üö´ Auto-activation blocked for Music Player");
      return;
    }
    
    console.log("üéµ Toggling Music Player (manual click)");
    const btn = document.getElementById("musicPlayerBtn");
    const widget = document.getElementById("musicPlayerWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
      
      // Ensure music player is initialized after showing widget
      if (!widget.classList.contains("hidden")) {
        // Give Svelte component time to mount
        setTimeout(() => {
          console.log("üéµ Widget shown, checking Music API...");
          if (window.MUSIC && window.MUSIC.ensureLoaded) {
            console.log("üéµ Music API available, calling ensureLoaded...");
            try {
              window.MUSIC.ensureLoaded();
            } catch (e) {
              console.warn("Music ensureLoaded failed:", e);
            }
          } else {
            console.log("üéµ Music API not available, waiting for initialization...");
            waitForMusicAPI();
          }
        }, 500); // Wait 500ms for component to mount
      }
      
      console.log("Music Player widget toggled");
    }
  }

  function togglePolaczekAssistant(manualClick = true) {
    if (!manualClick) {
      console.log("üö´ Auto-activation blocked for AI Assistant");
      return;
    }
    
    console.log("ü§ñ Toggling AI Assistant (manual click)");
    const btn = document.getElementById("polaczekBtn");
    const widget = document.getElementById("polaczekWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
      
      // Ensure AI assistant is initialized after showing widget
      if (!widget.classList.contains("hidden")) {
        // Give Svelte component time to mount
        setTimeout(() => {
          console.log("ü§ñ Widget shown, checking POLACZEK API...");
          if (window.POLACZEK && window.POLACZEK.openAssistant) {
            console.log("ü§ñ POLACZEK API available, opening assistant...");
            try {
              window.POLACZEK.openAssistant();
              // Also trigger reconnection if needed
              if (window.POLACZEK.forceReconnect) {
                window.POLACZEK.forceReconnect();
              }
            } catch (e) {
              console.warn("POLACZEK openAssistant failed:", e);
            }
          } else {
            console.log("ü§ñ POLACZEK API not available, waiting for initialization...");
            waitForPolaczekAPI();
          }
        }, 500); // Wait 500ms for component to mount
      }
      
      console.log("AI Assistant widget toggled");
    }
  }



  // Wait for components to initialize their APIs
  function waitForMusicAPI() {
    console.log("üéµ Waiting for Music API...");
    let attempts = 0;
    const maxAttempts = 100; // 10 seconds max (increased)
    
    const checkAPI = () => {
      attempts++;
      console.log(`üéµ Music API check attempt ${attempts}/${maxAttempts}`);
      
      if (window.MUSIC && window.MUSIC.ensureLoaded) {
        console.log("üéµ Music API ready! Initializing...");
        try {
          window.MUSIC.ensureLoaded();
          sessionStorage.setItem('music-status', 'ready');
          localStorage.setItem('components-working', 'true');
          console.log("üéµ Music player initialized successfully!");
        } catch (e) {
          console.warn("Music ensureLoaded failed:", e);
          sessionStorage.setItem('music-status', 'error');
        }
      } else if (attempts < maxAttempts) {
        console.log("üéµ Music API not ready yet, retrying...");
        setTimeout(checkAPI, 100);
      } else {
        console.error("üéµ Music API not ready after 10 seconds - component may not be loaded");
        sessionStorage.setItem('music-status', 'timeout');
        // Try to force reload the component by showing debug info
        console.log("üéµ Debug info:");
        console.log("- window.MUSIC exists:", !!window.MUSIC);
        console.log("- window.MUSIC.ensureLoaded exists:", !!(window.MUSIC && window.MUSIC.ensureLoaded));
        console.log("- Music widget element exists:", !!document.getElementById("musicPlayerWidget"));
        
        // NO AUTOMATIC RELOAD - let user decide
        console.log("üéµ Use resetComponents() or hardResetComponents() in console if needed");
      }
    };
    
    checkAPI();
  }

  function waitForPolaczekAPI() {
    console.log("ü§ñ Waiting for POLACZEK API...");
    let attempts = 0;
    const maxAttempts = 100; // 10 seconds max (increased)
    
    const checkAPI = () => {
      attempts++;
      console.log(`ü§ñ POLACZEK API check attempt ${attempts}/${maxAttempts}`);
      
      if (window.POLACZEK && window.POLACZEK.openAssistant) {
        console.log("ü§ñ POLACZEK API ready! Connecting...");
        try {
          // Force connection check
          if (window.POLACZEK.getStatus) {
            const currentStatus = window.POLACZEK.getStatus();
            console.log("ü§ñ Current POLACZEK status:", currentStatus);
            
            if (currentStatus === "disconnected") {
              console.log("ü§ñ Triggering reconnection...");
              window.dispatchEvent(new CustomEvent("polaczek-reconnect"));
            }
          }
          sessionStorage.setItem('polaczek-status', 'ready');
          localStorage.setItem('components-working', 'true');
          console.log("ü§ñ POLACZEK assistant initialized successfully!");
        } catch (e) {
          console.warn("POLACZEK initialization failed:", e);
          sessionStorage.setItem('polaczek-status', 'error');
        }
      } else if (attempts < maxAttempts) {
        console.log("ü§ñ POLACZEK API not ready yet, retrying...");
        setTimeout(checkAPI, 100);
      } else {
        console.error("ü§ñ POLACZEK API not ready after 10 seconds - component may not be loaded");
        sessionStorage.setItem('polaczek-status', 'timeout');
        // Try to force reload the component by showing debug info
        console.log("ü§ñ Debug info:");
        console.log("- window.POLACZEK exists:", !!window.POLACZEK);
        console.log("- window.POLACZEK.openAssistant exists:", !!(window.POLACZEK && window.POLACZEK.openAssistant));
        console.log("- POLACZEK widget element exists:", !!document.getElementById("polaczekWidget"));
        
        // NO AUTOMATIC RELOAD - let user decide
        console.log("ü§ñ Use resetComponents() or hardResetComponents() in console if needed");
      }
    };
    
    checkAPI();
  }

  function waitForGoogleVoiceAPI() {
    console.log("üé§ Waiting for Google Voice API...");
    let attempts = 0;
    const maxAttempts = 50; // 5 seconds max
    
    const checkAPI = () => {
      attempts++;
      console.log(`üé§ Google Voice API check attempt ${attempts}/${maxAttempts}`);
      
      if (window.GOOGLE_VOICE && window.GOOGLE_VOICE.isSupported) {
        console.log("üé§ Google Voice API ready! Checking support...");
        try {
          const isSupported = window.GOOGLE_VOICE.isSupported();
          console.log("üé§ Speech recognition supported:", isSupported);
          sessionStorage.setItem('google-voice-status', isSupported ? 'ready' : 'not-supported');
          localStorage.setItem('components-working', 'true');
          console.log("üé§ Google Voice initialized successfully!");
        } catch (e) {
          console.warn("Google Voice initialization failed:", e);
          sessionStorage.setItem('google-voice-status', 'error');
        }
      } else if (attempts < maxAttempts) {
        console.log("üé§ Google Voice API not ready yet, retrying...");
        setTimeout(checkAPI, 100);
      } else {
        console.error("üé§ Google Voice API not ready after 5 seconds - component may not be loaded");
        sessionStorage.setItem('google-voice-status', 'timeout');
        // Try to force reload the component by showing debug info
        console.log("üé§ Debug info:");
        console.log("- window.GOOGLE_VOICE exists:", !!window.GOOGLE_VOICE);
        console.log("- window.GOOGLE_VOICE.isSupported exists:", !!(window.GOOGLE_VOICE && window.GOOGLE_VOICE.isSupported));
        console.log("- Google Voice widget element exists:", !!document.getElementById("googleVoiceWidget"));
        
        // NO AUTOMATIC RELOAD - let user decide
        console.log("üé§ Use resetComponents() or hardResetComponents() in console if needed");
      }
    };
    
    checkAPI();
  }

  // Manual component reset function
  function resetComponents() {
    console.log("üîÑ Manually resetting all components...");
    
    // Clear all cached states
    delete window.MUSIC;
    delete window.POLACZEK;
    delete window.GOOGLE_VOICE;
    sessionStorage.clear();
    localStorage.setItem('components-initialized', 'false');
    localStorage.setItem('components-working', 'false');
    
    // Re-initialize
    setTimeout(() => {
      console.log("üîÑ Re-initializing components...");
      waitForMusicAPI();
      waitForPolaczekAPI();
      waitForGoogleVoiceAPI();
    }, 500);
    
    console.log("üîÑ Component reset completed!");
  }

  // Hard reset with page reload
  function hardResetComponents() {
    console.log("üí£ Hard resetting - clearing everything and reloading page...");
    
    // Clear everything
    localStorage.clear();
    sessionStorage.clear();
    
    // Clear component globals
    delete window.MUSIC;
    delete window.POLACZEK;
    
    // Force reload
    window.location.reload(true);
  }

  // Google Agent Functions - Enhanced with ADK integration
  async function toggleGeminiPro(manualClick = true) {
    if (!manualClick) {
      console.log("üö´ Auto-activation blocked for Gemini Pro");
      return;
    }
    
    console.log("‚ú® Toggling Gemini Pro (manual click)");
    
    // Initialize ADK if not done yet
    if (!adkInitialized) {
      await initGoogleADK();
    }
    
    const btn = document.getElementById("geminiProBtn");
    const widget = document.getElementById("geminiProWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
      
      // Activate Gemini Pro Agent via ADK
      if (!widget.classList.contains("hidden") && adkManager) {
        adkManager.setActiveAgent('gemini_pro_001');
        console.log("‚ú® Gemini Pro Agent activated via ADK");
        
        // Send welcome message via voice
        if (adkManager.speak) {
          const welcomeMessage = "Gemini Pro Agent aktywowany. Gotowy do pracy!";
          await adkManager.speak(welcomeMessage);
        }
      }
    }
  }

  async function toggleGeminiVision(manualClick = true) {
    if (!manualClick) {
      console.log("üëÅÔ∏è Auto-activation blocked for Gemini Vision");
      return;
    }
    
    console.log("üëÅÔ∏è Toggling Gemini Vision (manual click)");
    const btn = document.getElementById("geminiVisionBtn");
    const widget = document.getElementById("geminiVisionWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
    }
  }

  function toggleCodeBison(manualClick = true) {
    if (!manualClick) {
      console.log("üíª Auto-activation blocked for Code Bison");
      return;
    }
    
    console.log("üíª Toggling Code Bison (manual click)");
    const btn = document.getElementById("codeBisonBtn");
    const widget = document.getElementById("codeBisonWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
    }
  }

  function toggleTextBison(manualClick = true) {
    if (!manualClick) {
      console.log("üìù Auto-activation blocked for Text Bison");
      return;
    }
    
    console.log("üìù Toggling Text Bison (manual click)");
    const btn = document.getElementById("textBisonBtn");
    const widget = document.getElementById("textBisonWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
    }
  }

  function toggleAgent09Dyrektor(manualClick = true) {
    if (!manualClick) {
      console.log("üö´ Auto-activation blocked for Agent 09 Dyrektor");
      return;
    }
    
    console.log("üíº Toggling Agent 09 Dyrektor (manual click)");
    const btn = document.getElementById("agent09DyrektorBtn");
    const widget = document.getElementById("agent09DyrektorWidget");

    if (btn && widget) {
      // Button scaling effect
      btn.style.transform = "scale(1.1) translateY(-2px)";
      setTimeout(() => {
        btn.style.transform = "";
      }, 200);

      // Toggle widget visibility
      widget.classList.toggle("hidden");
    }
  }

  // Global Voice System Management
  let globalVoiceEnabled = false;
  let voiceRecognitionInstances = {};

  function toggleGlobalVoice() {
    const widget = document.getElementById("globalVoiceWidget");
    const isHidden = widget.classList.contains("hidden");
    
    if (isHidden) {
      widget.classList.remove("hidden");
      globalVoiceEnabled = true;
      const voiceBtn = document.getElementById("globalVoiceBtn");
      voiceBtn.style.background = "linear-gradient(45deg, #00ff88, #0f3846)";
      voiceBtn.innerHTML = 'üé§ VOICE ON';
      console.log("üé§ Global Voice System: ENABLED");
    } else {
      widget.classList.add("hidden");
      globalVoiceEnabled = false;
      const voiceBtn = document.getElementById("globalVoiceBtn");
      voiceBtn.style.background = "linear-gradient(45deg, #ff4444, #0f3846)";
      voiceBtn.innerHTML = 'üé§ VOICE OFF';
      console.log("üé§ Global Voice System: DISABLED");
      
      // Stop all voice instances
      stopGeminiProVoice();
      stopGeminiVisionVoice();
      stopCodeBisonVoice();
      stopTextBisonVoice();
      stopBardVoice();
      stopPaLMVoice();
      stopVertexVoice();
      stopAIStudioVoice();
      voiceRecognitionInstances = {};
    }
  }

  // EMERGENCY SYSTEM CONTROLS
  function emergencyStopAll() {
    console.log("üö® EMERGENCY STOP - Zatrzymujƒô wszystkie systemy");
    
    // Stop all voice systems
    globalVoiceEnabled = false;
    stopGeminiProVoice();
    stopGeminiVisionVoice();
    stopCodeBisonVoice();
    stopTextBisonVoice();
    stopBardVoice();
    stopPaLMVoice();
    stopVertexVoice();
    stopAIStudioVoice();
    
    // Clear all instances
    voiceRecognitionInstances = {};
    
    // Update global voice button
    const voiceBtn = document.getElementById("globalVoiceBtn");
    if (voiceBtn) {
      voiceBtn.style.background = "linear-gradient(45deg, #ff4444, #0f3846)";
      voiceBtn.innerHTML = '<span style="color: white;">üé§ VOICE OFF</span>';
    }
    
    // Clear all audio contexts
    if (window.audioContext) {
      window.audioContext.close();
      window.audioContext = null;
      console.log("AudioContext stopped and cleared");
    }
    
    // Close any open widgets
    const allWidgets = document.querySelectorAll('.floating-widget');
    allWidgets.forEach(widget => widget.classList.add('hidden'));
    
    console.log("All systems stopped.");
    alert("Wszystkie systemy zosta≈Çy zatrzymane.");
  }

  function resetSystem() {
    console.log("üîÑ Resetting system state...");
    hardResetComponents(); // This will clear storage and reload the page
  }

  function testAllFunctions() {
    console.log("üß™ Testowanie wszystkich g≈Ç√≥wnych funkcji...");
    // This is a placeholder - in a real app, you'd call specific test functions
    alert("Testowanie funkcji... Sprawd≈∫ konsolƒô, aby zobaczyƒá wyniki.");
    checkAllStatus();
    runAllAPITests();
  }

  function debugVoiceStatus() {
    console.log("üìä Debugging Voice Status...");
    console.log("Global Voice Enabled:", globalVoiceEnabled);
    console.log("Voice Recognition Instances:", voiceRecognitionInstances);
    alert(`Global Voice: ${globalVoiceEnabled ? 'ON' : 'OFF'}\nAktywne instancje: ${Object.keys(voiceRecognitionInstances).length}`);
  }

  // Main Chat, Refresh, Folder, Close Functions
  function openMainChat() {
    // Placeholder for Main Chat functionality
    alert("Funkcja Main Chat jest w trakcie implementacji.");
  }

  function openRefresh() {
    window.location.reload();
  }

  function openFolder() {
    // This is a security risk and generally not possible from a browser
    alert("Ze wzglƒôd√≥w bezpiecze≈Ñstwa, otwieranie lokalnych folder√≥w jest niemo≈ºliwe.");
  }

  function openClose() {
    // This will close the current tab/window
    window.close();
  }

</script>

<!-- BigQuery API Integration Script -->
<script is:inline>
  // Import BigQuery API functionality
  import('../utils/bigQueryAPI.js').then(module => {
    // Make BigQuery functions available globally
    window.BigQueryAPI = module.BigQueryAPI;
    window.BigQueryInterface = module.BigQueryInterface;
    console.log('‚úÖ BigQuery API loaded');
  }).catch(err => console.warn('‚ö†Ô∏è BigQuery API load failed:', err));
</script>

<!-- Kaggle API Integration Script -->
<script is:inline>
  // Import Kaggle API functionality  
  import('../utils/kaggleAPI.js').then(module => {
    // Make Kaggle functions available globally
    window.KaggleAPI = module.KaggleAPI;
    window.KaggleInterface = module.KaggleInterface;
    console.log('‚úÖ Kaggle API loaded');
  }).catch(err => console.warn('‚ö†Ô∏è Kaggle API load failed:', err));
</script>

<!-- Voice AI Integration Script -->
<script is:inline>
  // Import Voice AI functionality
  import('../utils/voiceAiAPI.js').then(module => {
    // Make Voice AI functions available globally
    window.VoiceAIAPI = module.VoiceAIAPI;
    window.VoiceAIInterface = module.VoiceAIInterface;
    console.log('‚úÖ Voice AI API loaded');
  }).catch(err => console.warn('‚ö†Ô∏è Voice AI API load failed:', err));
</script>

<style>
  /* Backroom-style background with vertical lines */
  body {
    background: 
      repeating-linear-gradient(
        90deg,
        transparent,
        transparent 49px,
        rgba(0, 217, 255, 0.02) 50px,
        rgba(0, 217, 255, 0.02) 51px
      ),
      radial-gradient(ellipse at center, rgba(13, 21, 26, 0.95), rgba(5, 8, 10, 1));
    background-attachment: fixed;
  }

  /* System title - enlarged and bold */
  .system-title {
    color: #00d7ef !important;
    font-weight: 900 !important;
    font-size: 3.5rem !important;
    margin-bottom: 1rem !important;
    text-align: center !important;
    text-shadow: 0 0 20px rgba(0, 215, 239, 0.5);
    letter-spacing: 0.02em;
  }

  /* Dashboard login section */
  .dashboard-login-section {
    background: rgba(0, 0, 0, 0.6);
    padding: 32px 24px;
    margin: 24px 0;
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 0px;
    box-shadow: 0 2px 18px rgba(0, 217, 255, 0.2);
  }

  .login-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
  }

  .login-input {
    background: #131e28;
    color: #00d7ef;
    padding: 12px 16px;
    border: 2px solid rgba(0, 217, 255, 0.4);
    border-radius: 0px;
    font-size: 1.1rem;
    font-weight: 600;
    text-align: center;
    min-width: 200px;
    transition: all 0.2s ease;
  }

  .login-input:focus {
    outline: none;
    border-color: #00d7ef;
    box-shadow: 0 0 12px rgba(0, 217, 255, 0.4);
  }

  .login-btn {
    background-color: #164e63;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 0px;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 12px rgba(0, 217, 255, 0.2);
  }

  .login-btn:hover {
    background-color: #1be1ff;
    color: #000;
    transform: translateY(-1px);
  }

  .dashboard-buttons {
    display: flex;
    flex-direction: column;
    gap: 12px;
    align-items: center;
  }

  .dashboard-btn {
    background-color: #164e63;
    color: white;
    padding: 14px 28px;
    border-radius: 0px;
    font-weight: 600;
    font-size: 1.2rem;
    text-decoration: none;
    display: block;
    text-align: center;
    min-width: 220px;
    box-shadow: 0 2px 18px rgba(0, 217, 255, 0.3);
    transition: all 0.2s ease;
    border: 1px solid rgba(0, 217, 255, 0.3);
  }

  .dashboard-btn:hover {
    background-color: #1be1ff;
    color: #000;
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.5);
  }

  /* Feature tiles for 9 functions */
  .feature-tile {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 0px;
    box-shadow: 0 1px 26px rgba(20, 215, 230, 0.2);
    padding: 34px 24px 24px 24px;
    margin: 0; /* grid gap controls spacing now */
    text-align: left;
    min-width: 270px;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    z-index: 52;
    pointer-events: auto;
  }

  .feature-tile:hover {
    border-color: #00d7ef;
    box-shadow: 0 4px 30px rgba(0, 217, 255, 0.4);
    transform: translateY(-3px);
  }

  .feature-title {
    color: #00d7ef;
    font-weight: 700;
    font-size: 1.24rem;
    margin-bottom: 0.46em;
  }

  .feature-desc {
    color: #94aec4;
    font-size: 1.09rem;
    line-height: 1.5;
  }

  .feature-icon {
    font-size: 2.7rem;
    margin-bottom: 14px;
    color: #1be1ff;
    display: block;
  }

  /* Admin panel - fixed left side - moved to bottom */
  .admin-panel-fixed {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  /* Right panel - fixed right side */
  .right-panel-fixed {
    position: fixed;
    bottom: 20px;
    right: 20px;
    top: 20px;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 16px;
    max-height: calc(100vh - 40px);
    overflow-y: auto;
    overflow-x: hidden;
    scroll-behavior: smooth;
    scrollbar-width: thin;
    scrollbar-color: rgba(27, 225, 255, 0.5) rgba(0, 0, 0, 0.2);
  }

  .right-panel-fixed::-webkit-scrollbar {
    width: 6px;
  }

  .right-panel-fixed::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 0;
  }

  .right-panel-fixed::-webkit-scrollbar-thumb {
    background: rgba(27, 225, 255, 0.5);
    border-radius: 0;
  }

  .right-panel-fixed::-webkit-scrollbar-thumb:hover {
    background: rgba(27, 225, 255, 0.7);
  }

  .right-btn {
    background: rgba(0, 0, 0, 0.5);
    color: #ffffff;
    padding: 8px 20px;
    border-radius: 0px;
    box-shadow: 0 1px 26px rgba(20, 215, 230, 0.2);
    font-size: 0.9rem;
    font-weight: 700;
    border: 1px solid rgba(0, 217, 255, 0.3);
    transition: all 0.3s ease;
    display: block;
    text-align: center;
    min-width: 235px;
    cursor: pointer;
    position: relative;
    z-index: 10;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    backdrop-filter: blur(20px);
    font-family: 'Courier New', monospace;
  }

  .right-btn:hover {
    background: rgba(0, 0, 0, 0.7);
    color: #00d7ef;
    transform: translateY(-2px);
    box-shadow: 0 4px 30px rgba(0, 217, 255, 0.4);
    border-color: #00d7ef;
    backdrop-filter: blur(25px);
  }

  .right-btn:active {
    transform: translateY(0px);
    box-shadow: 0 2px 10px rgba(0, 217, 255, 0.4);
  }

  .admin-btn {
    background: rgba(255, 255, 255, 0.05);
    color: #ffffff;
    padding: 8px 20px;
    border-radius: 0px;
    box-shadow: 0 2px 12px rgba(0, 217, 255, 0.1);
    font-size: 0.9rem;
    font-weight: 700;
    text-decoration: none;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    display: block;
    text-align: center;
    min-width: 160px;
    position: relative;
    z-index: 10;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    backdrop-filter: blur(20px);
    font-family: 'Courier New', monospace;
  }

  .admin-btn:hover {
    background: rgba(0, 217, 255, 0.15);
    color: #00d7ef;
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.3);
    border-color: rgba(0, 217, 255, 0.8);
    backdrop-filter: blur(25px);
  }

  /* Login container - fixed below admin panel */
  .login-container-fixed {
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: rgba(0, 0, 0, 0.5);
    padding: 16px;
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 0px;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.2);
  }

  .login-input-fixed {
    background: #131e28;
    color: #00d7ef;
    padding: 10px 12px;
    border: 2px solid rgba(0, 217, 255, 0.4);
    border-radius: 0px;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    min-width: 150px;
    transition: all 0.2s ease;
  }

  .login-input-fixed:focus {
    outline: none;
    border-color: #00d7ef;
    box-shadow: 0 0 12px rgba(0, 217, 255, 0.4);
  }

  .login-input-fixed::placeholder {
    color: rgba(0, 217, 255, 0.6);
  }

  .login-btn-fixed {
    background-color: #164e63;
    color: white;
    padding: 10px 16px;
    border: none;
    border-radius: 0px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 12px rgba(0, 217, 255, 0.2);
  }

  .login-btn-fixed:hover {
    background-color: #1be1ff;
    color: #000;
    transform: translateY(-1px);
    box-shadow: 0 4px 16px rgba(0, 217, 255, 0.4);
  }

  /* Override any existing rounded corners - FORCE 0px everywhere */
  * {
    border-radius: 0px !important;
  }

  .widget-container {
    background: rgba(0, 0, 0, 0.7);
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 0px !important;
    transition: all 0.3s ease;
    overflow: hidden;
    position: relative;
  }

  .widget-container:hover {
    border-color: #00d9ff;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.2);
    transform: translateY(-2px);
  }

  /* Force 0px border radius on specific elements */
  .additional-functions-section {
    position: relative;
    z-index: 50;
    pointer-events: auto;
  }

  .additional-grid {
    display: grid;
    /* Force 3 columns on wide screens so the section is exactly 3x3 for 9 items */
    grid-template-columns: repeat(3, 1fr);
    /* tighter gap between items without changing tile internals */
    gap: 0.75rem; /* ~12px */
    margin-top: 2rem;
    /* match width of top sections (approx Tailwind max-w-6xl = 72rem = 1152px) */
    max-width: 72rem; /* 1152px */
    width: 100%;
    padding: 0 1rem; /* keep small horizontal padding on narrow screens */
    margin-left: auto;
    margin-right: auto;
    position: relative;
    z-index: 51;
  }

  /* Responsive fallbacks: 2 columns on medium, 1 column on small */
  @media (max-width: 1024px) {
    .additional-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .additional-grid {
      grid-template-columns: 1fr;
    }
  }

  .hidden {
    display: none !important;
  }

  /* Left-style buttons - same style as admin panel buttons */
  .left-style-btn {
    background: rgba(0, 0, 0, 0.5);
    color: #00d7ef;
    padding: 12px 24px;
    border-radius: 0px;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.3);
    font-size: 1.1rem;
    font-weight: 600;
    border: 1px solid rgba(0, 217, 255, 0.4);
    transition: all 0.2s ease;
    display: inline-block;
    text-align: center;
    min-width: 180px;
    cursor: pointer;
  }

  .left-style-btn:hover {
    background: #00d7ef;
    color: #131e28;
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(0, 217, 255, 0.5);
  }

  .left-style-btn:active {
    transform: scale(1.05) translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 217, 255, 0.7);
  }

  .left-style-buttons-section {
    border-top: 1px solid rgba(0, 217, 255, 0.3);
    border-bottom: 1px solid rgba(0, 217, 255, 0.3);
  }

  /* Floating widget containers and widgets */
  .floating-widget-container {
    position: relative;
    display: block;
    width: 100%;
  }

  .floating-widget {
    /* Let components handle their own positioning */
    display: block;
  }

  /* Template CSS for all floating widgets - based on Music Player design */
  .floating-widget-template {
    background: linear-gradient(
      135deg,
      rgba(15, 56, 70, 0.98),
      rgba(0, 0, 0, 0.95)
    );
    border: 2px solid #1be1ff;
    border-radius: 0;
    backdrop-filter: blur(15px);
    min-width: 480px;
    max-width: 520px;
    min-height: 450px;
    max-height: 600px;
    box-shadow:
      0 0 12px rgba(27, 225, 255, 0.2),
      0 0 25px rgba(27, 225, 255, 0.08),
      inset 0 1px 0 rgba(27, 225, 255, 0.1);
    transition: all 0.3s ease;
    position: relative;
    z-index: 1000;
    font-family: "Rajdhani", sans-serif;
  }

  .floating-widget-template .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    background: linear-gradient(90deg, #0f3846, #1be1ff);
    border-bottom: 2px solid #1be1ff;
    border-radius: 0;
    color: #000;
    font-size: 12px;
    font-weight: 700;
    text-shadow: 0 0 2px rgba(27, 225, 255, 0.4);
    user-select: none;
  }

  .floating-widget-template .panel-content {
    padding: 12px;
    transition: all 0.3s ease;
  }

  /* Floating agent widgets */
  .floating-agent-widget {
    position: fixed !important;
    right: 220px !important; /* Avoid left panel overlap */
    z-index: 1000 !important;
  }

  /* Make sure existing widgets don't overlap */
  #googleVoiceWidget {
    position: fixed !important;
    right: 10px !important;
    bottom: 20px !important;
    z-index: 999 !important;
  }

  /* Widget containers - let components handle their own positioning */
  #polaczekWidget,
  #musicPlayerWidget {
    display: block;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 1024px) {
    .grid-cols-1.lg\:grid-cols-2.xl\:grid-cols-3 {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .system-title {
      font-size: 2.5rem !important;
    }

    .admin-panel-fixed {
      bottom: 20px;
      left: 10px;
      gap: 12px;
    }

    .right-panel-fixed {
      bottom: 20px;
      right: 10px;
      gap: 12px;
    }

    .admin-btn,
    .right-btn {
      min-width: 180px;
      font-size: 1rem;
      padding: 10px 20px;
    }

    .login-container-fixed {
      padding: 12px;
    }

    .login-input-fixed {
      min-width: 130px;
      font-size: 0.9rem;
      padding: 8px 10px;
    }

    .login-btn-fixed {
      font-size: 0.9rem;
      padding: 8px 12px;
    }
  }

  @media (max-width: 768px) {
    .admin-panel-fixed {
      left: 8px;
      bottom: 15px;
      gap: 10px;
    }

    .right-panel-fixed {
      right: 8px;
      bottom: 15px;
      gap: 10px;
    }

    .admin-btn,
    .right-btn {
      min-width: 150px;
      font-size: 0.9rem;
      padding: 8px 16px;
    }

    .login-container-fixed {
      padding: 10px;
    }

    .login-input-fixed {
      min-width: 120px;
      font-size: 0.85rem;
      padding: 7px 8px;
    }

    .login-btn-fixed {
      font-size: 0.85rem;
      padding: 7px 10px;
    }
  }

  @media (min-width: 1024px) and (max-width: 1280px) {
    .grid-cols-1.lg\:grid-cols-2.xl\:grid-cols-3 {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1280px) {
    .grid-cols-1.lg\:grid-cols-2.xl\:grid-cols-3 {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Global vertical lines for workers sections */
  .workers-vertical-line-left,
  .workers-vertical-line-right {
    position: fixed;
    top: 0;
    bottom: 0;
    width: 1px;
    background: #ffffff;
    z-index: 999;
    pointer-events: none;
  }

  .workers-vertical-line-left {
    left: calc(
      50vw - 576px - 10px - 21px
    ); /* 21px more to the left (moved 4px to the right) */
  }

  .workers-vertical-line-right {
    right: calc(50vw - 576px - 10px - 20px); /* 20px more to the right */
  }

  /* Remove body pseudo-elements */
  body::before, body::after {
    display: none;
  }

  /* Private Card Smaller Styles */
  .private-card {
    max-width: 280px !important;
    min-height: 200px !important;
  }

  .private-title {
    font-size: 1.1rem !important;
    color: #ff6b6b !important;
  }

  .private-desc {
    font-size: 0.85rem !important;
    opacity: 0.8;
  }

  .private-tag {
    background: rgba(255, 107, 107, 0.1) !important;
    color: #ff6b6b !important;
    font-size: 0.75rem !important;
  }

  .private-btn {
    background: linear-gradient(135deg, #ff6b6b, #ee5a52) !important;
    font-size: 0.85rem !important;
    padding: 8px 16px !important;
  }

  /* Floating Panel Styles */
  .floating-panel {
    position: fixed;
    top: 120px;
    right: 20px;
    width: 280px;
    background: rgba(20, 20, 25, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 20px;
    z-index: 1000;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .floating-panel h3 {
    color: #00ff88;
    margin: 0 0 15px 0;
    font-size: 1.1rem;
    text-align: center;
  }

  .panel-section {
    margin-bottom: 15px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .panel-section h4 {
    color: #fff;
    margin: 0 0 8px 0;
    font-size: 0.9rem;
  }

  .panel-button {
    width: 100%;
    padding: 8px 12px;
    margin: 4px 0;
    background: rgba(0, 255, 136, 0.1);
    border: 1px solid rgba(0, 255, 136, 0.3);
    border-radius: 6px;
    color: #00ff88;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .panel-button:hover {
    background: rgba(0, 255, 136, 0.2);
    border-color: #00ff88;
  }

  .admin-login-btn {
    background: rgba(255, 107, 107, 0.1) !important;
    border: 1px solid rgba(255, 107, 107, 0.3) !important;
    color: #ff6b6b !important;
  }

  .admin-login-btn:hover {
    background: rgba(255, 107, 107, 0.2) !important;
    border-color: #ff6b6b !important;
  }

  /* Reset main padding since no footer */
  main {
    padding-bottom: 20px;
  }
</style>

<script>
  // MyBlog AI Launch Function
  function launchMyBlogAI() {
    window.open('/myblogai', '_blank');
  }

  // Make function globally available
  window.launchMyBlogAI = launchMyBlogAI;
</script>