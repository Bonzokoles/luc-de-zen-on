---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
---

<MyBonzoLayout title="Kaggle Datasets Enhanced | AI Workers">
  <main class="min-h-svh">
    <!-- Header Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between max-h-72 min-h-64">
          <div class="mt-auto">
            <span
              style="writing-mode: vertical-lr;"
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              KAGGLE
            </span>
          </div>
          <span class="mt-auto">
            <span
              style=""
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              ENHANCED
            </span>
          </span>
        </div>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex flex-row p-2">
          <a class="hover:brightness-125" href="/">
            <h1 class="text-4xl sm:text-5xl">KAGGLE DATASETS</h1>
            <h2 class="text-2xl sm:text-3xl">Enhanced Report Generator</h2>
          </a>

          <div class="hidden ml-auto gap-4 md:gap-0 md:flex md:flex-col">
            <a class="ml-auto hover:brightness-125 duration-200" href="/">
              â† PowrĂłt do strony gĹ‚Ăłwnej
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Interface -->
    <section
      class="ai-workers-section flex items-center justify-center py-16"
      style="background: rgba(0, 0, 0, 0.5);"
      id="kaggle-enhanced"
    >
      <div class="section-container max-w-7xl mx-auto">
        <h2 class="section-title">KAGGLE DATASETS ENHANCED</h2>
        <p class="section-description">
          Zaawansowany generator raportĂłw z analizÄ… danych Kaggle
        </p>

        <!-- Search Interface -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8">
          
          <!-- Left Panel - Search Form -->
          <div class="lg:col-span-1">
            <div class="search-container border border-edge rounded-lg" style="background: rgba(0, 0, 0, 0.5);">
              <div class="search-header border-b border-edge p-4">
                <div class="flex items-center gap-3">
                  <div class="w-3 h-3 bg-orange-400 rounded-full animate-pulse"></div>
                  <span class="text-primary-foreground font-semibold">Kaggle Explorer</span>
                </div>
              </div>

              <div class="search-form p-4 space-y-4">
                <div>
                  <label class="block text-sm font-medium mb-2 text-primary-foreground">
                    Wyszukaj:
                  </label>
                  <input
                    id="searchQuery"
                    type="text"
                    placeholder="machine learning, covid-19..."
                    class="w-full p-3 border border-edge rounded text-primary-foreground placeholder-gray-400"
                    style="background: rgba(0, 0, 0, 0.5);"
                  />
                </div>

                <div>
                  <label class="block text-sm font-medium mb-2 text-primary-foreground">
                    Typ:
                  </label>
                  <select id="searchType" class="w-full p-3 bg-black/40 border border-edge rounded text-primary-foreground">
                    <option value="datasets">Zbiory danych</option>
                    <option value="competitions">Konkursy</option>
                    <option value="kernels">Notebooks</option>
                  </select>
                </div>

                <button
                  id="searchBtn"
                  onclick="performEnhancedSearch()"
                  class="w-full bg-orange-500 hover:bg-orange-600 text-white py-3 px-6 rounded font-semibold transition-colors"
                >
                  đź”Ť Wyszukaj
                </button>

                <!-- Quick Searches -->
                <div class="border-t border-edge pt-4">
                  <h4 class="text-sm font-medium mb-3 text-primary-foreground">Popularne:</h4>
                  <div class="grid grid-cols-2 gap-2">
                    <button class="quick-search-btn" onclick="quickSearch('machine learning')">đź¤– ML</button>
                    <button class="quick-search-btn" onclick="quickSearch('covid-19')">đź¦  COVID</button>
                    <button class="quick-search-btn" onclick="quickSearch('finance')">đź“ Finanse</button>
                    <button class="quick-search-btn" onclick="quickSearch('climate')">đźŚˇď¸Ź Klimat</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Center Panel - Results with Enhanced Cards -->
          <div class="lg:col-span-2">
            <!-- Loading Section -->
            <div id="loadingSection" class="loading-section hidden">
              <div class="bg-black/40 border border-edge rounded-lg p-6 text-center">
                <div class="flex items-center justify-center gap-3 mb-4">
                  <div class="w-4 h-4 bg-orange-400 rounded-full animate-bounce"></div>
                  <div class="w-4 h-4 bg-orange-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                  <div class="w-4 h-4 bg-orange-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                </div>
                <span class="text-primary-foreground">Wyszukiwanie i analiza danych...</span>
              </div>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" class="results-section hidden">
              <div class="bg-black/20 border border-edge rounded-lg">
                <div class="results-header bg-black/40 border-b border-edge p-4">
                  <div class="flex justify-between items-center">
                    <div>
                      <h3 class="text-lg font-semibold text-primary-foreground">Wyniki wyszukiwania</h3>
                      <p id="resultsInfo" class="text-gray-400 text-sm"></p>
                    </div>
                    <button
                      onclick="selectAllResults()"
                      class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
                    >
                      Zaznacz wszystkie
                    </button>
                  </div>
                </div>

                <!-- Enhanced Results Grid -->
                <div id="resultsGrid" class="results-grid p-4">
                  <!-- Results will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Selected Items Panel -->
        <div id="selectedPanel" class="selected-panel hidden mt-6">
          <div class="bg-black/30 border border-edge rounded-lg">
            <div class="border-b border-edge p-4">
              <h3 class="text-lg font-semibold text-primary-foreground">Wybrane elementy do analizy</h3>
              <p class="text-gray-400 text-sm">Wybierz elementy, ktĂłre chcesz przeanalizowaÄ‡</p>
            </div>
            
            <div class="p-4">
              <div id="selectedItems" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4">
                <!-- Selected items will appear here -->
              </div>

              <!-- Analysis Options -->
              <div class="border-t border-edge pt-4">
                <h4 class="text-md font-semibold mb-3 text-primary-foreground">Opcje analizy:</h4>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="includeStats" checked class="rounded">
                    <span class="text-sm text-primary-foreground">Statystyki</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="includeTrends" checked class="rounded">
                    <span class="text-sm text-primary-foreground">Trendy</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="includeComparison" class="rounded">
                    <span class="text-sm text-primary-foreground">PorĂłwnanie</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="includeRecommendations" checked class="rounded">
                    <span class="text-sm text-primary-foreground">Rekomendacje</span>
                  </label>
                </div>

                <!-- Report Format -->
                <div class="mb-4">
                  <label class="block text-sm font-medium mb-2 text-primary-foreground">Format raportu:</label>
                  <select id="reportFormat" class="w-full md:w-auto p-2 bg-black/40 border border-edge rounded text-primary-foreground">
                    <option value="pdf">PDF Report</option>
                    <option value="excel">Excel Spreadsheet</option>
                    <option value="json">JSON Data</option>
                    <option value="html">HTML Report</option>
                  </select>
                </div>

                <!-- Generate Report Button -->
                <button
                  id="generateReportBtn"
                  onclick="generateReport()"
                  class="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded font-semibold transition-colors disabled:opacity-50"
                  disabled
                >
                  đź“Š Generuj raport
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Report Generation Status -->
        <div id="reportStatus" class="report-status hidden mt-6">
          <div class="bg-black/30 border border-edge rounded-lg p-6">
            <div class="text-center">
              <div id="reportProgress" class="mb-4">
                <div class="flex items-center justify-center gap-3 mb-2">
                  <div class="w-4 h-4 bg-green-400 rounded-full animate-pulse"></div>
                  <span class="text-primary-foreground font-semibold">Generowanie raportu...</span>
                </div>
                <div class="w-full bg-gray-700 rounded-full h-2">
                  <div id="progressBar" class="bg-green-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
              </div>
              
              <div id="reportTimer" class="text-orange-400 font-mono text-lg mb-2">
                Twoje zapytanie bÄ™dzie gotowe za: <span id="countdown">20:00</span>
              </div>
              
              <div id="reportDetails" class="text-gray-400 text-sm">
                Analizowanie wybranych zbiorĂłw danych...
              </div>
            </div>
          </div>
        </div>

        <!-- Download Section -->
        <div id="downloadSection" class="download-section hidden mt-6">
          <div class="bg-black/30 border border-edge rounded-lg p-6">
            <div class="text-center">
              <div class="mb-4">
                <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span class="text-2xl">âś“</span>
                </div>
                <h3 class="text-xl font-semibold text-primary-foreground mb-2">Raport gotowy!</h3>
                <p class="text-gray-400">TwĂłj raport zostaĹ‚ wygenerowany i jest gotowy do pobrania</p>
              </div>
              
              <div class="flex flex-col sm:flex-row gap-3 justify-center">
                <button
                  id="downloadBtn"
                  onclick="downloadReport()"
                  class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded font-semibold transition-colors"
                >
                  đź“Ą Pobierz raport
                </button>
                <button
                  onclick="previewReport()"
                  class="bg-purple-600 hover:bg-purple-700 text-white py-2 px-6 rounded font-semibold transition-colors"
                >
                  đź‘ď¸Ź PodglÄ…d
                </button>
                <button
                  onclick="shareReport()"
                  class="bg-gray-600 hover:bg-gray-700 text-white py-2 px-6 rounded font-semibold transition-colors"
                >
                  đź”— UdostÄ™pnij
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Port In/Out Section -->
        <div class="port-section mt-8 border-t border-edge pt-8">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            
            <!-- Port IN -->
            <div class="port-in">
              <div class="bg-black/30 border border-edge rounded-lg p-4">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-3 h-3 bg-blue-400 rounded-full animate-pulse"></div>
                  <h3 class="text-lg font-semibold text-primary-foreground">PORT IN</h3>
                </div>
                
                <div class="space-y-3">
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Zapytania dzisiaj:</span>
                    <span class="text-blue-400 font-mono" id="queriesIn">47</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Dane wejĹ›ciowe:</span>
                    <span class="text-blue-400 font-mono" id="dataIn">2.3 GB</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Aktywne sesje:</span>
                    <span class="text-blue-400 font-mono" id="activeSessions">12</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Status API:</span>
                    <span class="text-green-400 font-mono">ONLINE</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Port OUT -->
            <div class="port-out">
              <div class="bg-black/30 border border-edge rounded-lg p-4">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-3 h-3 bg-orange-400 rounded-full animate-pulse"></div>
                  <h3 class="text-lg font-semibold text-primary-foreground">PORT OUT</h3>
                </div>
                
                <div class="space-y-3">
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Raporty wygenerowane:</span>
                    <span class="text-orange-400 font-mono" id="reportsOut">23</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Dane wyjĹ›ciowe:</span>
                    <span class="text-orange-400 font-mono" id="dataOut">156 MB</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Pobrane pliki:</span>
                    <span class="text-orange-400 font-mono" id="downloads">89</span>
                  </div>
                  <div class="flex justify-between items-center p-2 bg-black/40 rounded">
                    <span class="text-sm text-gray-300">Ĺšredni czas:</span>
                    <span class="text-orange-400 font-mono">18:32</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<style>
  /* Base styles */
  .section-container {
    padding: 2rem;
    text-align: center;
  }

  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }

  .section-description {
    font-size: 1.25rem;
    color: #d1d5db;
    margin-bottom: 2rem;
  }

  .quick-search-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    transition: all 0.2s;
    cursor: pointer;
    text-align: center;
  }

  .quick-search-btn:hover {
    background-color: #374151;
    border-color: #f97316;
    color: #f97316;
  }

  .ai-workers-section {
    background: linear-gradient(
      135deg,
      rgba(15, 23, 42, 0.75) 0%,
      rgba(30, 41, 59, 0.75) 100%
    );
    min-height: 100vh;
  }

  /* Enhanced Dataset Cards */
  .dataset-card-enhanced {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    border-radius: 0.5rem;
    padding: 1rem;
    transition: all 0.2s;
    cursor: pointer;
    position: relative;
  }

  .dataset-card-enhanced:hover {
    border-color: #f97316;
    background-color: rgba(249, 115, 22, 0.1);
    transform: translateY(-2px);
  }

  .dataset-card-enhanced.selected {
    border-color: #10b981;
    background-color: rgba(16, 185, 129, 0.1);
  }

  .dataset-title-enhanced {
    color: #f97316;
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    line-height: 1.2;
  }

  .dataset-description-enhanced {
    color: #d1d5db;
    font-size: 0.75rem;
    margin-bottom: 0.75rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .dataset-meta-enhanced {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    margin-bottom: 0.75rem;
  }

  .meta-tag-enhanced {
    background-color: rgba(0, 0, 0, 0.4);
    color: #9ca3af;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.625rem;
  }

  .dataset-stats-enhanced {
    display: flex;
    justify-content: space-between;
    font-size: 0.625rem;
    color: #6b7280;
  }

  .select-checkbox {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Selected Item Chips */
  .selected-item-chip {
    background-color: rgba(16, 185, 129, 0.2);
    border: 1px solid #10b981;
    border-radius: 0.5rem;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 0.75rem;
  }

  .selected-item-chip .remove-btn {
    background: none;
    border: none;
    color: #ef4444;
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0;
    margin-left: 0.5rem;
  }

  .selected-item-chip .remove-btn:hover {
    color: #dc2626;
  }

  /* Progress Bar Animation */
  @keyframes progress {
    0% { width: 0%; }
    100% { width: 100%; }
  }

  .progress-animate {
    animation: progress 20s linear forwards;
  }

  /* Port Status Indicators */
  .port-section .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .section-title {
      font-size: 2rem;
    }
    
    .dataset-card-enhanced {
      padding: 0.75rem;
    }
    
    .dataset-title-enhanced {
      font-size: 0.875rem;
    }
  }
</style>

<script>
  let selectedItems = [];
  let currentResults = [];
  let reportTimer = null;
  let countdownTimer = null;

  function quickSearch(query) {
    document.getElementById("searchQuery").value = query;
    performEnhancedSearch();
  }

  async function performEnhancedSearch() {
    const query = document.getElementById("searchQuery").value.trim();
    if (!query) {
      alert("ProszÄ™ wprowadziÄ‡ zapytanie");
      return;
    }

    const searchBtn = document.getElementById("searchBtn");
    const loadingSection = document.getElementById("loadingSection");
    const resultsSection = document.getElementById("resultsSection");

    // Start search
    searchBtn.disabled = true;
    searchBtn.textContent = "Wyszukiwanie...";
    loadingSection.classList.remove("hidden");
    resultsSection.classList.add("hidden");

    try {
      const searchType = document.getElementById("searchType").value;

      const response = await fetch("/api/kaggle-enhanced", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query,
          type: searchType,
          action: 'search'
        }),
      });

      const data = await response.json();

      if (data.success || data.status === 'success') {
        currentResults = data.results || [];
        displayEnhancedResults(currentResults, data.totalResults || currentResults.length);
      } else {
        throw new Error(data.error || "BĹ‚Ä…d wyszukiwania");
      }
    } catch (error) {
      console.error("Search error:", error);
      displayError(error.message);
    } finally {
      // Reset UI
      searchBtn.disabled = false;
      searchBtn.textContent = "đź”Ť Wyszukaj";
      loadingSection.classList.add("hidden");
    }
  }

  function displayEnhancedResults(results, totalResults) {
    const resultsSection = document.getElementById("resultsSection");
    const resultsGrid = document.getElementById("resultsGrid");
    const resultsInfo = document.getElementById("resultsInfo");

    resultsInfo.textContent = `Znaleziono ${totalResults} wynikĂłw`;

    if (results.length === 0) {
      resultsGrid.innerHTML = '<div class="text-gray-400 text-center py-8">Brak wynikĂłw dla tego zapytania</div>';
    } else {
      const grid = document.createElement("div");
      grid.className = "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3";

      results.forEach((item, index) => {
        const card = document.createElement("div");
        card.className = "dataset-card-enhanced";
        card.dataset.index = index;

        const isSelected = selectedItems.some(selected => selected.id === item.id);
        if (isSelected) {
          card.classList.add("selected");
        }

        card.innerHTML = `
          <input type="checkbox" class="select-checkbox" ${isSelected ? 'checked' : ''} 
                 onchange="toggleItemSelection(${index}, this.checked)">
          
          <div class="dataset-title-enhanced">${item.title}</div>
          <div class="dataset-description-enhanced">${item.description}</div>
          
          <div class="dataset-meta-enhanced">
            <span class="meta-tag-enhanced">đź“Š ${item.size || item.downloadCount || 'N/A'}</span>
            <span class="meta-tag-enhanced">đź“ ${item.fileTypes || item.language || 'N/A'}</span>
            <span class="meta-tag-enhanced">đź“… ${item.lastUpdated || 'N/A'}</span>
          </div>
          
          <div class="dataset-stats-enhanced">
            <span>đź‘Ť ${item.voteCount || item.votes || 0}</span>
            <span>â¬‡ď¸Ź ${item.downloadCount || item.downloads || 0}</span>
            <span>đź“ť ${item.tasks || item.submissions || 0}</span>
          </div>
        `;

        card.onclick = (e) => {
          if (e.target.type !== 'checkbox') {
            const checkbox = card.querySelector('.select-checkbox');
            checkbox.checked = !checkbox.checked;
            toggleItemSelection(index, checkbox.checked);
          }
        };

        grid.appendChild(card);
      });

      resultsGrid.innerHTML = '';
      resultsGrid.appendChild(grid);
    }

    resultsSection.classList.remove("hidden");
    updateSelectedPanel();
  }

  function toggleItemSelection(index, isSelected) {
    const item = currentResults[index];
    const card = document.querySelector(`[data-index="${index}"]`);

    if (isSelected) {
      if (!selectedItems.some(selected => selected.id === item.id)) {
        selectedItems.push(item);
        card.classList.add("selected");
      }
    } else {
      selectedItems = selectedItems.filter(selected => selected.id !== item.id);
      card.classList.remove("selected");
    }

    updateSelectedPanel();
  }

  function selectAllResults() {
    const checkboxes = document.querySelectorAll('.select-checkbox');
    const allSelected = Array.from(checkboxes).every(cb => cb.checked);
    
    checkboxes.forEach((checkbox, index) => {
      checkbox.checked = !allSelected;
      toggleItemSelection(index, checkbox.checked);
    });
  }

  function updateSelectedPanel() {
    const selectedPanel = document.getElementById("selectedPanel");
    const selectedItemsContainer = document.getElementById("selectedItems");
    const generateBtn = document.getElementById("generateReportBtn");

    if (selectedItems.length === 0) {
      selectedPanel.classList.add("hidden");
      generateBtn.disabled = true;
      return;
    }

    selectedPanel.classList.remove("hidden");
    generateBtn.disabled = false;

    selectedItemsContainer.innerHTML = '';
    selectedItems.forEach((item, index) => {
      const chip = document.createElement("div");
      chip.className = "selected-item-chip";
      chip.innerHTML = `
        <div>
          <div class="font-medium text-green-300">${item.title}</div>
          <div class="text-xs text-gray-400">${item.author || 'N/A'}</div>
        </div>
        <button class="remove-btn" onclick="removeSelectedItem(${index})">Ă—</button>
      `;
      selectedItemsContainer.appendChild(chip);
    });
  }

  function removeSelectedItem(index) {
    const item = selectedItems[index];
    selectedItems.splice(index, 1);
    
    // Update checkbox in results
    const card = document.querySelector(`[data-index]`);
    if (card && card.dataset.index) {
      const checkbox = card.querySelector('.select-checkbox');
      if (checkbox) checkbox.checked = false;
      card.classList.remove("selected");
    }
    
    updateSelectedPanel();
  }

  async function generateReport() {
    if (selectedItems.length === 0) {
      alert("Wybierz przynajmniej jeden element do analizy");
      return;
    }

    const reportStatus = document.getElementById("reportStatus");
    const downloadSection = document.getElementById("downloadSection");
    
    // Hide download section and show status
    downloadSection.classList.add("hidden");
    reportStatus.classList.remove("hidden");

    try {
      // Get report options
      const reportOptions = {
        includeStats: document.getElementById("includeStats").checked,
        includeTrends: document.getElementById("includeTrends").checked,
        includeComparison: document.getElementById("includeComparison").checked,
        includeRecommendations: document.getElementById("includeRecommendations").checked,
        format: document.getElementById("reportFormat").value
      };

      // Start report generation
      const response = await fetch("/api/kaggle-enhanced", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: 'generate_report',
          selectedItems,
          reportOptions,
          query: 'report_generation'
        }),
      });

      const data = await response.json();

      if (data.status === 'success') {
        // Start progress tracking
        const estimatedTime = data.estimatedCompletion || 20000; // 20 seconds default
        startReportProgress(data.reportId, estimatedTime);
      } else {
        throw new Error(data.error || "BĹ‚Ä…d generowania raportu");
      }

    } catch (error) {
      console.error("Report generation error:", error);
      alert("BĹ‚Ä…d podczas generowania raportu: " + error.message);
      reportStatus.classList.add("hidden");
    }
  }

  function startReportProgress(reportId, estimatedTime) {
    // Start progress animation
    const progressBar = document.getElementById("progressBar");
    progressBar.style.width = "0%";
    progressBar.classList.add("progress-animate");

    // Start countdown
    startCountdown(Math.floor(estimatedTime / 1000)); // Convert to seconds

    // Update status messages
    const reportDetails = document.getElementById("reportDetails");
    const messages = [
      "Analizowanie wybranych zbiorĂłw danych...",
      "Pobieranie metadanych z Kaggle...",
      "Generowanie statystyk i trendĂłw...",
      "Tworzenie wizualizacji...",
      "Kompilowanie raportu...",
      "Finalizowanie dokumentu..."
    ];

    let messageIndex = 0;
    const messageInterval = setInterval(() => {
      if (messageIndex < messages.length) {
        reportDetails.textContent = messages[messageIndex];
        messageIndex++;
      }
    }, Math.floor(estimatedTime / messages.length));

    // Check report status periodically
    const statusInterval = setInterval(async () => {
      try {
        const statusResponse = await fetch("/api/kaggle-enhanced", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            action: 'get_status',
            query: reportId
          }),
        });

        const statusData = await statusResponse.json();

        if (statusData.jobStatus === 'completed') {
          clearInterval(messageInterval);
          clearInterval(countdownTimer);
          clearInterval(statusInterval);
          
          const reportStatus = document.getElementById("reportStatus");
          const downloadSection = document.getElementById("downloadSection");
          
          reportStatus.classList.add("hidden");
          downloadSection.classList.remove("hidden");
          
          // Store report ID for download
          window.currentReportId = reportId;
          
          // Update port stats
          updatePortStats();
        } else if (statusData.jobStatus === 'failed') {
          clearInterval(messageInterval);
          clearInterval(countdownTimer);
          clearInterval(statusInterval);
          alert("Generowanie raportu nie powiodĹ‚o siÄ™");
          document.getElementById("reportStatus").classList.add("hidden");
        }

      } catch (error) {
        console.error("Status check error:", error);
      }
    }, 2000); // Check every 2 seconds
  }

  function startCountdown(seconds) {
    const countdownElement = document.getElementById("countdown");
    
    countdownTimer = setInterval(() => {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      countdownElement.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
      
      if (seconds <= 0) {
        clearInterval(countdownTimer);
      }
      seconds--;
    }, 1000);
  }

  function downloadReport() {
    const format = document.getElementById("reportFormat").value;
    const filename = `kaggle_report_${new Date().toISOString().split('T')[0]}.${format}`;
    
    // Simulate file download
    const link = document.createElement('a');
    link.href = '#';
    link.download = filename;
    link.click();
    
    alert(`Pobieranie raportu: ${filename}`);
    
    // Update download stats
    const downloads = document.getElementById("downloads");
    downloads.textContent = parseInt(downloads.textContent) + 1;
  }

  function previewReport() {
    window.open('#', '_blank');
    alert("Otwieranie podglÄ…du raportu...");
  }

  function shareReport() {
    const shareUrl = `${window.location.origin}/reports/shared/${Date.now()}`;
    navigator.clipboard.writeText(shareUrl);
    alert("Link do raportu zostaĹ‚ skopiowany do schowka!");
  }

  function updatePortStats() {
    // Update Port OUT stats
    const reportsOut = document.getElementById("reportsOut");
    const dataOut = document.getElementById("dataOut");
    
    reportsOut.textContent = parseInt(reportsOut.textContent) + 1;
    
    const currentDataOut = parseFloat(dataOut.textContent);
    dataOut.textContent = (currentDataOut + Math.random() * 10 + 5).toFixed(1) + " MB";
  }

  function displayError(error) {
    const resultsSection = document.getElementById("resultsSection");
    const resultsGrid = document.getElementById("resultsGrid");
    const resultsInfo = document.getElementById("resultsInfo");

    resultsInfo.textContent = "BĹ‚Ä…d wyszukiwania";
    resultsGrid.innerHTML = `<div class="bg-red-600/20 border border-red-400/30 rounded p-4">
      <div class="text-red-400 font-semibold mb-2">BĹ‚Ä…d wyszukiwania:</div>
      <div class="text-primary-foreground">${error}</div>
    </div>`;

    resultsSection.classList.remove("hidden");
  }

  // Initialize port stats animation
  document.addEventListener("DOMContentLoaded", () => {
    // Animate port stats periodically
    setInterval(() => {
      const queriesIn = document.getElementById("queriesIn");
      const activeSessions = document.getElementById("activeSessions");
      
      if (Math.random() > 0.7) {
        queriesIn.textContent = parseInt(queriesIn.textContent) + 1;
      }
      
      if (Math.random() > 0.8) {
        const current = parseInt(activeSessions.textContent);
        activeSessions.textContent = Math.max(1, current + (Math.random() > 0.5 ? 1 : -1));
      }
    }, 5000);
  });
</script>

