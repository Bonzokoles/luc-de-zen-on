---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
---

<MyBonzoLayout title="Workers Status & Store | AI Workers">
  <main class="min-h-svh">
    <!-- Header Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between max-h-72 min-h-64">
          <div class="mt-auto">
            <span
              style="writing-mode: vertical-lr;"
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              WORKERS
            </span>
          </div>
          <span class="mt-auto">
            <span
              style=""
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              STATUS
            </span>
          </span>
        </div>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex flex-row p-2">
          <a class="hover:brightness-125" href="/">
            <h1 class="text-4xl sm:text-5xl">WORKERS STATUS & STORE</h1>
            <h2 class="text-2xl sm:text-3xl">AI Workers Management</h2>
          </a>

          <div class="hidden ml-auto gap-4 md:gap-0 md:flex md:flex-col">
            <a class="ml-auto hover:brightness-125 duration-200" href="/">
              ‚Üê Powr√≥t do strony g≈Ç√≥wnej
              <svg
                style="--rotation: -45deg"
                class="stroke-primary-foreground inline aspect-square w-3 h-auto fill-transparent rotate-[var(--rotation)]"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3 12L21 12M21 12L12.5 3.5M21 12L12.5 20.5"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Workers Status Section -->
    <section
      class="ai-workers-section flex items-center justify-center py-16"
      id="workers-status"
    >
      <div class="section-container max-w-6xl mx-auto">
        <h2 class="section-title">AI WORKERS STATUS & STORE</h2>
        <p class="section-description">
          ZarzƒÖdzanie statusem worker√≥w AI oraz zakup token√≥w do poszczeg√≥lnych
          us≈Çug
        </p>

        <!-- Global Stats -->
        <div class="global-stats-grid mb-8">
          <div class="stat-card">
            <div class="stat-icon">üöÄ</div>
            <div class="stat-value" id="totalWorkers">5</div>
            <div class="stat-label">Aktywnych Workers</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚úÖ</div>
            <div class="stat-value" id="onlineWorkers">4</div>
            <div class="stat-label">Online</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚ö°</div>
            <div class="stat-value" id="avgResponse">2.1s</div>
            <div class="stat-label">Avg Response</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üìä</div>
            <div class="stat-value" id="totalRequests">1,247</div>
            <div class="stat-label">Requests (24h)</div>
          </div>
        </div>

        <!-- Workers Status Management -->
        <div
          class="workers-management"
          style="background: rgba(15, 23, 42, 0.75); border: 1px solid rgba(0, 217, 255, 0.3); border-radius: 12px; margin-top: 2rem;"
        >
          <!-- Management Header -->
          <div
            class="management-header"
            style="background: rgba(15, 23, 42, 0.9); border-bottom: 1px solid rgba(0, 217, 255, 0.3); padding: 1rem; display: flex; align-items: center; justify-content: space-between;"
          >
            <div class="flex items-center gap-3">
              <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse">
              </div>
              <span class="text-primary-foreground font-semibold"
                >AI Workers Management System</span
              >
            </div>
            <div class="flex gap-2">
              <button
                onclick="refreshAllWorkersStatus()"
                class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm"
              >
                Od≈õwie≈º wszystkie
              </button>
              <button
                onclick="exportWorkersReport()"
                class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
              >
                Export raportu
              </button>
              <button
                onclick="openBulkTokenPurchase()"
                class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm"
              >
                Bulk Purchase
              </button>
            </div>
          </div>

          <!-- Detailed Workers List -->
          <div class="workers-detailed-list p-6" id="workersContainer">
            <!-- Workers will be dynamically loaded here -->
            <div
              id="loadingIndicator"
              style="text-align: center; padding: 2rem; color: #00d9ff;"
            >
              <div class="loading-spinner"></div>
              <p>≈Åadowanie statusu worker√≥w...</p>
            </div>
          </div>
        </div>

        <!-- Token Store Section -->
        <div class="token-store-section mt-8">
          <h3 class="text-2xl font-semibold mb-6 text-primary-foreground">
            üõí Token Store - Bulk Packages
          </h3>
          <div class="store-packages-grid">
            <div class="store-package">
              <div class="package-header">
                <h4>Starter Pack</h4>
                <div class="package-price">99 PLN</div>
              </div>
              <div class="package-content">
                <ul>
                  <li>50 token√≥w Image Gen</li>
                  <li>100 token√≥w Chatbot</li>
                  <li>20 zapyta≈Ñ BigQuery</li>
                  <li>50 wyszukiwa≈Ñ Tavily</li>
                  <li>30 wyszukiwa≈Ñ Kaggle</li>
                </ul>
                <div class="package-savings">Oszczƒôdzasz 15 PLN</div>
              </div>
              <button
                class="package-buy-btn"
                onclick="purchasePackage('starter', 99)">Kup teraz</button
              >
            </div>

            <div class="store-package popular">
              <div class="package-badge">POPULARNE</div>
              <div class="package-header">
                <h4>Professional Pack</h4>
                <div class="package-price">249 PLN</div>
              </div>
              <div class="package-content">
                <ul>
                  <li>150 token√≥w Image Gen</li>
                  <li>300 token√≥w Chatbot</li>
                  <li>60 zapyta≈Ñ BigQuery</li>
                  <li>200 wyszukiwa≈Ñ Tavily</li>
                  <li>100 wyszukiwa≈Ñ Kaggle</li>
                </ul>
                <div class="package-savings">Oszczƒôdzasz 45 PLN</div>
              </div>
              <button
                class="package-buy-btn"
                onclick="purchasePackage('professional', 249)">Kup teraz</button
              >
            </div>

            <div class="store-package">
              <div class="package-header">
                <h4>Enterprise Pack</h4>
                <div class="package-price">499 PLN</div>
              </div>
              <div class="package-content">
                <ul>
                  <li>400 token√≥w Image Gen</li>
                  <li>800 token√≥w Chatbot</li>
                  <li>150 zapyta≈Ñ BigQuery</li>
                  <li>500 wyszukiwa≈Ñ Tavily</li>
                  <li>300 wyszukiwa≈Ñ Kaggle</li>
                </ul>
                <div class="package-savings">Oszczƒôdzasz 120 PLN</div>
              </div>
              <button
                class="package-buy-btn"
                onclick="purchasePackage('enterprise', 499)">Kup teraz</button
              >
            </div>
          </div>
        </div>

        <!-- Usage Analytics -->
        <div
          class="usage-analytics mt-8"
          style="background: rgba(15, 23, 42, 0.75); border: 1px solid rgba(0, 217, 255, 0.3); border-radius: 12px; padding: 1.5rem;"
        >
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">
            üìà Analityka u≈ºycia (ostatnie 7 dni)
          </h3>
          <div class="analytics-grid">
            <div class="analytics-chart">
              <h4>U≈ºycie token√≥w</h4>
              <div class="chart-placeholder">
                <div class="chart-bar" style="height: 60%">Pon</div>
                <div class="chart-bar" style="height: 80%">Wt</div>
                <div class="chart-bar" style="height: 45%">≈ör</div>
                <div class="chart-bar" style="height: 90%">Czw</div>
                <div class="chart-bar" style="height: 70%">Pt</div>
                <div class="chart-bar" style="height: 30%">Sob</div>
                <div class="chart-bar" style="height: 25%">Nie</div>
              </div>
            </div>
            <div class="analytics-summary">
              <h4>Podsumowanie</h4>
              <div class="summary-stats">
                <div class="summary-item">
                  <span>Najczƒô≈õciej u≈ºywany:</span>
                  <span class="highlight">AI Chatbot</span>
                </div>
                <div class="summary-item">
                  <span>≈öredni koszt/dzie≈Ñ:</span>
                  <span class="highlight">18.50 PLN</span>
                </div>
                <div class="summary-item">
                  <span>Ca≈Çkowite API calls:</span>
                  <span class="highlight">1,847</span>
                </div>
                <div class="summary-item">
                  <span>Success rate:</span>
                  <span class="highlight success">98.2%</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- AI Help Assistant Integration -->
</MyBonzoLayout>

<style>
  /* Loading spinner */
  .loading-spinner {
    border: 3px solid rgba(0, 217, 255, 0.3);
    border-top: 3px solid #00d9ff;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Base styles matching main page */
  .section-container {
    padding: 2rem;
    text-align: center;
  }

  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }

  .section-description {
    font-size: 1.25rem;
    color: #d1d5db;
    margin-bottom: 2rem;
  }

  .ai-workers-section {
    background: linear-gradient(
      135deg,
      rgba(15, 23, 42, 0.75) 0%,
      rgba(30, 41, 59, 0.75) 100%
    );
    min-height: 100vh;
  }

  /* Global Stats Grid */
  .global-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: rgba(15, 23, 42, 0.75);
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    border-color: rgba(0, 217, 255, 0.6);
    background: rgba(0, 217, 255, 0.1);
  }

  .stat-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .stat-value {
    font-size: 2.5rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    color: #9ca3af;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Workers Detailed Cards */
  .worker-detailed-card {
    background: rgba(15, 23, 42, 0.75);
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    transition: all 0.3s ease;
  }

  .worker-detailed-card:hover {
    border-color: rgba(0, 217, 255, 0.5);
    background: rgba(0, 217, 255, 0.05);
  }

  .worker-main-info {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .worker-icon {
    font-size: 2.5rem;
    flex-shrink: 0;
  }

  .worker-details {
    flex: 1;
  }

  .worker-name {
    color: #00bcd4;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .worker-description {
    color: #d1d5db;
    margin-bottom: 0.75rem;
  }

  .worker-endpoints {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .endpoint-tag {
    background: rgba(15, 23, 42, 0.7);
    color: #9ca3af;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-family: monospace;
  }

  .worker-status-indicator {
    text-align: right;
    flex-shrink: 0;
  }

  .uptime {
    color: #9ca3af;
    font-size: 0.8rem;
    margin-top: 0.25rem;
  }

  .worker-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
    background: rgba(15, 23, 42, 0.5);
    border-radius: 8px;
  }

  .metric {
    text-align: center;
  }

  .metric label {
    display: block;
    color: #9ca3af;
    font-size: 0.8rem;
    margin-bottom: 0.25rem;
  }

  .metric span {
    color: #d1d5db;
    font-weight: 500;
  }

  .tokens-count {
    color: #00bcd4 !important;
  }

  .tokens-count.warning {
    color: #fbbf24 !important;
  }

  .worker-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
  }

  .btn-primary,
  .btn-secondary,
  .btn-tertiary {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
  }

  .btn-primary {
    background: linear-gradient(135deg, #00bcd4 0%, #0099cc 100%);
    color: #000;
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #0099cc 0%, #007799 100%);
    transform: translateY(-1px);
  }

  .btn-primary.premium {
    background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
  }

  .btn-secondary {
    background: rgba(15, 23, 42, 0.7);
    color: #d1d5db;
    border: 1px solid rgba(0, 217, 255, 0.3);
  }

  .btn-secondary:hover {
    border-color: #00bcd4;
    background: rgba(0, 217, 255, 0.1);
  }

  .btn-tertiary {
    background: transparent;
    color: #9ca3af;
    border: 1px solid #374151;
  }

  .btn-tertiary:hover {
    color: #d1d5db;
    border-color: #6b7280;
  }

  /* Store Packages */
  .store-packages-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .store-package {
    background: rgba(15, 23, 42, 0.75);
    border: 1px solid rgba(0, 217, 255, 0.3);
    border-radius: 12px;
    padding: 1.5rem;
    position: relative;
    transition: all 0.3s ease;
  }

  .store-package.popular {
    border-color: #22c55e;
    background: rgba(34, 197, 94, 0.1);
  }

  .package-badge {
    position: absolute;
    top: -8px;
    right: 1rem;
    background: linear-gradient(45deg, #22c55e, #16a34a);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: bold;
  }

  .package-header {
    text-align: center;
    margin-bottom: 1rem;
  }

  .package-header h4 {
    color: #00bcd4;
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .package-price {
    font-size: 2.5rem;
    font-weight: bold;
    color: #d1d5db;
  }

  .package-content ul {
    list-style: none;
    padding: 0;
    margin: 0 0 1rem 0;
  }

  .package-content li {
    padding: 0.5rem 0;
    color: #d1d5db;
    border-bottom: 1px solid rgba(0, 217, 255, 0.1);
  }

  .package-savings {
    color: #22c55e;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1rem;
  }

  .package-buy-btn {
    width: 100%;
    background: linear-gradient(135deg, #00bcd4 0%, #0099cc 100%);
    color: #000;
    border: none;
    padding: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .package-buy-btn:hover {
    background: linear-gradient(135deg, #0099cc 0%, #007799 100%);
    transform: translateY(-2px);
  }

  /* Analytics */
  .analytics-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }

  .chart-placeholder {
    display: flex;
    align-items: end;
    gap: 0.5rem;
    height: 200px;
    padding: 1rem;
    background: rgba(15, 23, 42, 0.7);
    border-radius: 8px;
    margin-top: 1rem;
  }

  .chart-bar {
    background: linear-gradient(135deg, #00bcd4 0%, #0099cc 100%);
    width: 100%;
    border-radius: 4px 4px 0 0;
    display: flex;
    align-items: end;
    justify-content: center;
    padding-bottom: 0.5rem;
    color: #000;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .summary-stats {
    background: rgba(15, 23, 42, 0.7);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
  }

  .summary-item {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    border-bottom: 1px solid rgba(0, 217, 255, 0.1);
  }

  .summary-item:last-child {
    border-bottom: none;
  }

  .highlight {
    color: #00bcd4;
    font-weight: 600;
  }

  .highlight.success {
    color: #22c55e;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .worker-main-info {
      flex-direction: column;
      text-align: center;
    }

    .worker-metrics {
      grid-template-columns: repeat(2, 1fr);
    }

    .worker-actions {
      flex-direction: column;
    }

    .analytics-grid {
      grid-template-columns: 1fr;
    }

    .store-packages-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  let workersData = [];

  // Funkcje do obs≈Çugi rzeczywistych API
  async function refreshAllWorkersStatus() {
    console.log("Refreshing all workers status...");

    try {
      // Pobierz dane z API
      const response = await fetch("/api/workers-status");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      workersData = await response.json();
      console.log("Workers data loaded:", workersData);

      // Aktualizuj UI
      updateWorkersUI();
      updateGlobalStats();
    } catch (error) {
      console.error("Failed to refresh workers status:", error);
      showErrorMessage("Nie uda≈Ço siƒô od≈õwie≈ºyƒá statusu worker√≥w");
    }
  }

  function updateWorkersUI() {
    const container = document.getElementById("workersContainer");
    const loadingIndicator = document.getElementById("loadingIndicator");

    if (!container) return;

    // Ukryj loading indicator
    if (loadingIndicator) {
      loadingIndicator.style.display = "none";
    }

    // Wyczy≈õƒá kontener
    container.innerHTML = "";

    // Renderuj worker cards z prawdziwymi danymi
    workersData.forEach((worker, index) => {
      const workerCard = document.createElement("div");
      workerCard.className = "worker-detailed-card";

      // Okre≈õl ikonƒô na podstawie nazwy workera
      let icon = "‚öôÔ∏è";
      const name = worker.name.toLowerCase();
      if (name.includes("image") || name.includes("flux")) icon = "üé®";
      else if (
        name.includes("ai") ||
        name.includes("bot") ||
        name.includes("chatbot")
      )
        icon = "ü§ñ";
      else if (name.includes("bigquery") || name.includes("analytics"))
        icon = "üìä";
      else if (name.includes("kaggle")) icon = "üèÜ";
      else if (name.includes("tavily") || name.includes("search")) icon = "üîç";
      else if (name.includes("pdf")) icon = "üìÑ";
      else if (name.includes("news")) icon = "üì∞";
      else if (name.includes("google")) icon = "üîç";

      workerCard.innerHTML = `
        <div class="worker-main-info">
          <div class="worker-icon">${icon}</div>
          <div class="worker-details">
            <h3 class="worker-name">${worker.name}</h3>
            <p class="worker-description">${worker.description || "AI Worker"}</p>
            <div class="worker-endpoints">
              <span class="endpoint-tag">${worker.endpoint}</span>
            </div>
          </div>
          <div class="worker-status-indicator">
            <div class="status-badge ${worker.status}">${worker.status.toUpperCase()}</div>
            <div class="uptime">${worker.uptime}</div>
          </div>
        </div>

        <div class="worker-metrics">
          <div class="metric">
            <label>CPU:</label>
            <span>${worker.cpu}%</span>
          </div>
          <div class="metric">
            <label>RAM:</label>
            <span>${worker.ram}%</span>
          </div>
          <div class="metric">
            <label>Requests (24h):</label>
            <span>${worker.requests}</span>
          </div>
          <div class="metric">
            <label>Avg. Response:</label>
            <span>${worker.responseMs}ms</span>
          </div>
        </div>

        <div class="worker-actions">
          <button onclick="buyWorkerTokens('${worker.name}')" class="btn-primary">
            Kup tokeny
          </button>
          <button onclick="configureWorker('${worker.name}')" class="btn-secondary">
            Konfiguruj
          </button>
          <button onclick="viewWorkerLogs('${worker.name}')" class="btn-tertiary">
            Logi
          </button>
        </div>
      `;

      container.appendChild(workerCard);
    });
  }

  function updateGlobalStats() {
    const totalWorkers = workersData.length;
    const onlineWorkers = workersData.filter(
      (w) => w.status === "online"
    ).length;
    const avgResponse = Math.round(
      workersData.reduce((acc, w) => acc + (w.responseMs || 0), 0) /
        totalWorkers
    );
    const totalRequests = workersData.reduce((acc, w) => acc + w.requests, 0);

    // Aktualizuj statystyki
    const totalWorkersEl = document.getElementById("totalWorkers");
    const onlineWorkersEl = document.getElementById("onlineWorkers");
    const avgResponseEl = document.getElementById("avgResponse");
    const totalRequestsEl = document.getElementById("totalRequests");

    if (totalWorkersEl) totalWorkersEl.textContent = totalWorkers.toString();
    if (onlineWorkersEl) onlineWorkersEl.textContent = onlineWorkers.toString();
    if (avgResponseEl) avgResponseEl.textContent = `${avgResponse}ms`;
    if (totalRequestsEl) totalRequestsEl.textContent = totalRequests.toString();
  }

  async function testWorkerEndpoint(endpoint) {
    try {
      console.log(`Testing endpoint: ${endpoint}`);
      const response = await fetch(endpoint, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const status = response.ok ? "online" : "offline";
      console.log(`Endpoint ${endpoint}: ${status}`);
      return { status, responseTime: Date.now() };
    } catch (error) {
      console.error(`Error testing ${endpoint}:`, error);
      return { status: "offline", responseTime: null };
    }
  }

  function exportWorkersReport() {
    console.log("Eksport raportu - workersData:", workersData);
    console.log("D≈Çugo≈õƒá workersData:", workersData.length);

    if (workersData.length === 0) {
      alert("Brak danych do eksportu. Od≈õwie≈º najpierw status worker√≥w.");
      return;
    }

    // Przygotuj kompleksowy raport
    const report = {
      timestamp: new Date().toISOString(),
      totalWorkers: workersData.length,
      onlineWorkers: workersData.filter((w) => w.status === "online").length,
      avgResponseTime: Math.round(
        workersData.reduce((acc, w) => acc + (w.responseMs || 0), 0) /
          workersData.length
      ),
      totalRequests24h: workersData.reduce((acc, w) => acc + w.requests, 0),
      workers: workersData.map((worker) => ({
        name: worker.name,
        endpoint: worker.endpoint,
        status: worker.status,
        cpu: worker.cpu,
        ram: worker.ram,
        requests: worker.requests,
        responseMs: worker.responseMs,
        uptime: worker.uptime,
        version: worker.version,
        region: worker.region,
        lastCheck: worker.lastCheck,
      })),
      summary: {
        healthyWorkers: workersData.filter((w) => w.status === "online").length,
        problematicWorkers: workersData.filter((w) => w.status !== "online")
          .length,
        highCpuWorkers: workersData.filter((w) => w.cpu > 80).length,
        highRamWorkers: workersData.filter((w) => w.ram > 80).length,
      },
    };

    // Wy≈õlij raport na email przez API
    console.log("Wysy≈Çanie raportu przez API...", {
      reportSize: JSON.stringify(report).length,
      email: "admin@zen-platform.com",
    });

    fetch("/api/send-report", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        report: report,
        email: "admin@zen-platform.com",
        type: "workers-status",
      }),
    })
      .then((response) => {
        console.log("Response status:", response.status);
        console.log("Response ok:", response.ok);

        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      })
      .then((data) => {
        console.log("Sukces:", data);
        alert("‚úÖ Raport zosta≈Ç wys≈Çany na email!");
      })
      .catch((err) => {
        console.error("B≈ÇƒÖd podczas wysy≈Çania raportu:", err);
        alert("‚ùå B≈ÇƒÖd podczas wysy≈Çania raportu: " + err.message);
      });

    // Lokalny download jako backup
    const blob = new Blob([JSON.stringify(report, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `workers-report-${new Date().toISOString().split("T")[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);

    console.log("Workers report exported:", report);
  }

  function openBulkTokenPurchase() {
    // Przekierowanie do systemu p≈Çatno≈õci z predefiniowanymi pakietami
    const paymentData = {
      mode: "bulk-purchase",
      packages: [
        { id: "starter", name: "Starter Pack", price: 99, currency: "PLN" },
        {
          id: "professional",
          name: "Professional Pack",
          price: 249,
          currency: "PLN",
        },
        {
          id: "enterprise",
          name: "Enterprise Pack",
          price: 499,
          currency: "PLN",
        },
      ],
      userId: "user_" + Date.now(),
      redirectUrl: window.location.origin + "/payment-success",
      cancelUrl: window.location.origin + "/workers-status",
    };

    // Otw√≥rz Stripe Checkout lub PayU
    openPaymentGateway("bulk", paymentData);
  }

  async function buyWorkerTokens(workerType) {
    const worker = workersData.find((w) =>
      w.name.toLowerCase().includes(workerType.toLowerCase())
    );

    if (!worker) {
      alert(`Worker "${workerType}" nie zosta≈Ç znaleziony.`);
      return;
    }

    // Przygotuj dane p≈Çatno≈õci dla konkretnego workera
    const tokenPrices = {
      image: { price: 0.2, unit: "token", min: 10 },
      chatbot: { price: 0.15, unit: "token", min: 20 },
      bigquery: { price: 0.85, unit: "zapytanie", min: 5 },
      tavily: { price: 0.12, unit: "wyszukanie", min: 10 },
      kaggle: { price: 0.25, unit: "wyszukanie", min: 10 },
    };

    const workerKey = workerType.toLowerCase();
    const pricing = tokenPrices[workerKey] || tokenPrices["chatbot"];

    const paymentData = {
      mode: "worker-tokens",
      worker: {
        name: worker.name,
        type: workerType,
        endpoint: worker.endpoint,
        pricing: pricing,
      },
      userId: "user_" + Date.now(),
      redirectUrl:
        window.location.origin +
        "/payment-success?worker=" +
        encodeURIComponent(workerType),
      cancelUrl: window.location.origin + "/workers-status",
    };

    // Otw√≥rz formularz zakupu token√≥w
    openPaymentGateway("tokens", paymentData);
  }

  function openPaymentGateway(type, paymentData) {
    // Integracja z Stripe lub PayU
    if (window.location.hostname === "localhost") {
      // Development - symulacja p≈Çatno≈õci
      console.log("Payment simulation:", type, paymentData);

      if (type === "bulk") {
        const packageChoice = prompt(
          `Wybierz pakiet:\n1. Starter Pack (99 PLN)\n2. Professional Pack (249 PLN)\n3. Enterprise Pack (499 PLN)\n\nWpisz numer:`
        );

        if (packageChoice) {
          simulatePayment(paymentData.packages[parseInt(packageChoice) - 1]);
        }
      } else if (type === "package") {
        const confirmed = confirm(
          `Czy chcesz kupiƒá ${paymentData.package.name} za ${paymentData.package.price} PLN?\n\nPakiet zawiera:\n${Object.entries(
            paymentData.package.tokens
          )
            .map(([key, value]) => `‚Ä¢ ${value} token√≥w ${key}`)
            .join("\n")}`
        );

        if (confirmed) {
          simulatePayment({
            package: paymentData.package.name,
            price: paymentData.package.price + " PLN",
            tokens: paymentData.package.tokens,
          });
        }
      } else if (type === "tokens") {
        const amount = prompt(
          `Ile token√≥w chcesz kupiƒá dla ${paymentData.worker.name}?\n(min: ${paymentData.worker.pricing.min}, cena: ${paymentData.worker.pricing.price} PLN/${paymentData.worker.pricing.unit})`
        );

        if (amount && parseInt(amount) >= paymentData.worker.pricing.min) {
          const total = parseInt(amount) * paymentData.worker.pricing.price;
          simulatePayment({
            worker: paymentData.worker.name,
            amount: parseInt(amount),
            total: total.toFixed(2) + " PLN",
          });
        }
      }
    } else {
      // Production - prawdziwa p≈Çatno≈õƒá
      // Generuj session do Stripe/PayU
      fetch("/api/payment/create-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(paymentData),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.paymentUrl) {
            window.open(data.paymentUrl, "_blank");
          } else {
            alert("B≈ÇƒÖd podczas tworzenia p≈Çatno≈õci");
          }
        })
        .catch((error) => {
          console.error("Payment error:", error);
          alert("B≈ÇƒÖd po≈ÇƒÖczenia z systemem p≈Çatno≈õci");
        });
    }
  }

  function simulatePayment(orderData) {
    setTimeout(() => {
      alert(
        `‚úÖ P≈Çatno≈õƒá zako≈Ñczona pomy≈õlnie!\n\nZam√≥wienie: ${JSON.stringify(orderData, null, 2)}\n\nTokeny zosta≈Çy dodane do Twojego konta.`
      );

      // Od≈õwie≈º status po "p≈Çatno≈õci"
      refreshAllWorkersStatus();
    }, 1500);
  }

  function purchasePackage(packageType, price) {
    const packageDetails = {
      starter: {
        name: "Starter Pack",
        tokens: {
          "image-gen": 50,
          chatbot: 100,
          bigquery: 20,
          tavily: 50,
          kaggle: 30,
        },
      },
      professional: {
        name: "Professional Pack",
        tokens: {
          "image-gen": 150,
          chatbot: 300,
          bigquery: 60,
          tavily: 200,
          kaggle: 100,
        },
      },
      enterprise: {
        name: "Enterprise Pack",
        tokens: {
          "image-gen": 400,
          chatbot: 800,
          bigquery: 150,
          tavily: 500,
          kaggle: 300,
        },
      },
    };

    const selectedPackage = packageDetails[packageType];

    if (!selectedPackage) {
      alert("Nieznany pakiet token√≥w");
      return;
    }

    const paymentData = {
      mode: "package-purchase",
      package: {
        type: packageType,
        name: selectedPackage.name,
        price: price,
        currency: "PLN",
        tokens: selectedPackage.tokens,
      },
      userId: "user_" + Date.now(),
      redirectUrl:
        window.location.origin + "/payment-success?package=" + packageType,
      cancelUrl: window.location.origin + "/workers-status",
    };

    console.log("Package purchase initiated:", paymentData);

    // Otw√≥rz p≈Çatno≈õƒá
    openPaymentGateway("package", paymentData);
  }

  async function configureWorker(workerType) {
    const worker = workersData.find((w) =>
      w.name.toLowerCase().includes(workerType.toLowerCase())
    );
    if (worker) {
      // Otw√≥rz stronƒô konfiguracji
      window.open(`/admin?worker=${encodeURIComponent(worker.name)}`, "_blank");
    } else {
      alert(`Worker "${workerType}" nie zosta≈Ç znaleziony.`);
    }
  }

  async function viewWorkerLogs(workerType) {
    const worker = workersData.find((w) =>
      w.name.toLowerCase().includes(workerType.toLowerCase())
    );
    if (worker) {
      try {
        // Testuj endpoint workera
        const testResult = await testWorkerEndpoint(worker.endpoint);
        alert(
          `Logi dla ${worker.name}:\n\nEndpoint: ${worker.endpoint}\nStatus: ${testResult.status}\nLast Response: ${testResult.responseTime}ms\nCPU: ${worker.cpu}%\nRAM: ${worker.ram}%\nRequests (24h): ${worker.requests}\nUptime: ${worker.uptime}`
        );
      } catch (error) {
        alert(
          `B≈ÇƒÖd podczas pobierania log√≥w dla ${worker.name}: ${error.message}`
        );
      }
    } else {
      alert(`Worker "${workerType}" nie zosta≈Ç znaleziony.`);
    }
  }

  function showErrorMessage(message) {
    const errorDiv = document.createElement("div");
    errorDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #ef4444;
      color: white;
      padding: 1rem;
      border-radius: 8px;
      z-index: 9999;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    `;
    errorDiv.textContent = message;
    document.body.appendChild(errorDiv);

    setTimeout(() => {
      document.body.removeChild(errorDiv);
    }, 5000);
  }

  // Inicjalizacja po za≈Çadowaniu strony
  document.addEventListener("DOMContentLoaded", async () => {
    console.log("Workers Status page loaded");

    // Automatycznie od≈õwie≈º status przy ≈Çadowaniu
    await refreshAllWorkersStatus();

    // Ustaw automatyczne od≈õwie≈ºanie co 30 sekund
    setInterval(refreshAllWorkersStatus, 30000);
  });
</script>
