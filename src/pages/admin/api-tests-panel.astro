---
/**
 * API Tests Admin Panel
 * Zaawansowany system testowania wszystkich Workers API endpoints
 * Przeniesiono z funkcji na stronie g≈Ç√≥wnej do dedykowanego panelu admin
 */
import MyBonzoLayout from '@/layouts/MyBonzoLayout.astro';
import { Code } from 'astro:components';
---

<MyBonzoLayout
  title="API Tests Panel - MyBonzo Admin"
  description="Zaawansowany system testowania wszystkich Workers API endpoints - Panel Administracyjny"
  keywords="api, tests, endpoints, workers, admin, testing, debug"
>
  <main class="min-h-screen bg-black text-white">
    <!-- Header Section -->
    <section class="relative z-20 border-b border-[#263238] pt-20">
      <div class="max-w-6xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
          <div>
            <div class="flex items-center gap-3 mb-2">
              <a
                href="/admin/dashboard"
                class="text-[#00d7ef] hover:text-[#1be1ff] transition-colors duration-200"
                title="Powr√≥t do Dashboard Admin"
              >
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                  <path
                    d="M19 7l-7 7-7-7"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    transform="rotate(90 12 12)"></path>
                </svg>
              </a>
              <h1 class="text-4xl md:text-5xl font-bold text-[#1be1ff] uppercase tracking-wider font-['Rajdhani']">
                üß™ API TESTS PANEL
              </h1>
            </div>
            <p class="text-[#e1f5fe] text-lg">
              Testuj wszystkie Workers API endpoints i sprawd≈∫ po≈ÇƒÖczenia - Panel Administracyjny
            </p>
          </div>
          <div class="text-right text-sm text-[#b0bec5] font-mono">
            <div class="mb-1">STATUS: <span class="text-[#00ff88]">ADMIN PANEL</span></div>
            <div>TESTS: <span class="text-[#00d7ef]" id="testsStatus">READY</span></div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="flex flex-wrap gap-4 mb-8">
          <button
            onclick="runAllAPITests()"
            class="px-4 py-2 bg-[#00d7ef] hover:bg-[#1be1ff] text-black font-bold rounded transition-all duration-200"
          >
            üß™ Uruchom Wszystkie Testy
          </button>
          <button
            onclick="runQuickHealthCheck()"
            class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded transition-all duration-200"
          >
            ‚ö° Quick Health Check
          </button>
          <button
            onclick="clearResults()"
            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded transition-all duration-200"
          >
            üóëÔ∏è Wyczy≈õƒá Wyniki
          </button>
          <a
            href="/admin/workers-status-panel"
            class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded transition-all duration-200"
          >
            üîß Workers Status Panel
          </a>
        </div>
      </div>
    </section>

    <!-- API Tests Dashboard Section -->
    <section
      class="api-tests-section py-16"
      style="background: rgba(0, 0, 0, 0.5);"
      id="api-tests"
    >
      <div class="section-container max-w-7xl mx-auto px-4">
        
        <!-- Test Configuration -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          
          <!-- Test Control Panel -->
          <div class="bg-black/60 border border-[#00d7ef]/30 rounded-lg p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">üéÆ Panel Kontrolny</h3>
            
            <div class="space-y-4">
              <!-- Test Mode Selection -->
              <div>
                <label class="block text-sm font-bold text-gray-300 mb-2">Tryb Testowania:</label>
                <select id="testMode" class="w-full bg-black border border-[#00d7ef]/50 rounded px-3 py-2 text-white">
                  <option value="all">Wszystkie API</option>
                  <option value="critical">Tylko krytyczne</option>
                  <option value="health">Health Check</option>
                  <option value="custom">Wybrane endpointy</option>
                </select>
              </div>
              
              <!-- Timeout Settings -->
              <div>
                <label class="block text-sm font-bold text-gray-300 mb-2">Timeout (ms):</label>
                <input 
                  type="number" 
                  id="testTimeout" 
                  value="5000" 
                  min="1000" 
                  max="30000"
                  class="w-full bg-black border border-[#00d7ef]/50 rounded px-3 py-2 text-white"
                >
              </div>
              
              <!-- Concurrent Tests -->
              <div>
                <label class="block text-sm font-bold text-gray-300 mb-2">R√≥wnoczesne testy:</label>
                <input 
                  type="number" 
                  id="concurrentTests" 
                  value="3" 
                  min="1" 
                  max="10"
                  class="w-full bg-black border border-[#00d7ef]/50 rounded px-3 py-2 text-white"
                >
              </div>

              <!-- Auto-retry -->
              <div class="flex items-center space-x-2">
                <input type="checkbox" id="autoRetry" class="rounded">
                <label for="autoRetry" class="text-sm text-gray-300">Auto-retry przy b≈Çƒôdach</label>
              </div>
            </div>
          </div>

          <!-- Test Statistics -->
          <div class="bg-black/60 border border-[#00d7ef]/30 rounded-lg p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">üìä Statystyki</h3>
            
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-300">Wykonane testy:</span>
                <span class="text-[#00ff88] font-bold" id="testsExecuted">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">Sukces:</span>
                <span class="text-[#00ff88] font-bold" id="testsSuccess">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">B≈Çƒôdy:</span>
                <span class="text-red-400 font-bold" id="testsErrors">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">≈öredni czas:</span>
                <span class="text-[#00d7ef] font-bold" id="avgResponseTime">-</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-300">Success Rate:</span>
                <span class="text-[#00ff88] font-bold" id="successRate">-%</span>
              </div>
            </div>

            <!-- Progress Bar -->
            <div class="mt-4">
              <div class="text-xs text-gray-400 mb-1">Postƒôp test√≥w:</div>
              <div class="w-full bg-gray-700 rounded-full h-2">
                <div class="bg-[#00d7ef] h-2 rounded-full transition-all duration-300" style="width: 0%" id="progressBar"></div>
              </div>
            </div>
          </div>

          <!-- Test Status -->
          <div class="bg-black/60 border border-[#00d7ef]/30 rounded-lg p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">‚ö° Status Test√≥w</h3>
            
            <div id="testStatusList" class="space-y-2">
              <div class="text-gray-400 text-sm">Brak aktywnych test√≥w...</div>
            </div>

            <!-- Last Test Info -->
            <div class="mt-4 pt-4 border-t border-gray-700">
              <div class="text-xs text-gray-400 mb-2">Ostatni test:</div>
              <div class="text-sm" id="lastTestInfo">-</div>
            </div>
          </div>
        </div>

        <!-- API Endpoints List -->
        <div class="bg-black/60 border border-[#00d7ef]/30 rounded-lg p-6 mb-8">
          <h3 class="text-xl font-bold text-[#00d7ef] mb-6">üîó Dostƒôpne API Endpoints</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="endpointsList">
            <!-- Endpoints will be dynamically loaded here -->
          </div>
        </div>

        <!-- Test Results Console -->
        <div class="bg-black/80 border border-[#00d7ef]/30 rounded-lg">
          <div class="flex items-center justify-between p-4 border-b border-[#00d7ef]/20">
            <h3 class="text-xl font-bold text-[#00d7ef]">üñ•Ô∏è Konsola Wynik√≥w</h3>
            <div class="flex gap-2">
              <button 
                onclick="toggleAutoScroll()"
                class="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded text-sm"
                id="autoScrollBtn"
              >
                Auto-scroll: ON
              </button>
              <button 
                onclick="exportResults()"
                class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
              >
                Export
              </button>
            </div>
          </div>
          
          <div 
            id="testConsole" 
            class="p-4 h-96 overflow-y-auto font-mono text-sm bg-black"
            style="color: #00ff00; background: linear-gradient(135deg, #001a1a 0%, #000000 100%);"
          >
            <div class="text-[#00d7ef]">[API Tests Panel] Konsola gotowa do test√≥w...</div>
            <div class="text-gray-500">[INFO] Wybierz tryb testowania i naci≈õnij 'Uruchom Wszystkie Testy'</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer Navigation -->
    <section class="border-t border-[#263238] mt-16">
      <div class="max-w-6xl mx-auto px-8 py-8">
        <div class="flex flex-row justify-between items-center">
          <div class="text-left">
            <div class="text-gray-400 text-sm italic max-w-md">
              System testowania API Tests zapewnia pe≈ÇnƒÖ kontrolƒô nad
              testowaniem wszystkich Workers API endpoints w panelu administracyjnym.
            </div>
          </div>
          <div class="flex gap-4">
            <a
              href="/admin/workers-status-panel"
              class="hover:brightness-125 duration-200 text-[#00d7ef]"
            >
              Workers Status Panel ‚Üí
            </a>
            <a
              href="/admin/dashboard"
              class="hover:brightness-125 duration-200 text-[#00d7ef]"
            >
              Admin Dashboard ‚Üí
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<script>
  // API Tests Panel State
  let testStats = {
    executed: 0,
    success: 0,
    errors: 0,
    totalTime: 0,
    autoScroll: true
  };

  // Available API endpoints for testing
  const apiEndpoints = [
    { name: 'Workers Status', endpoint: '/api/workers-status', method: 'GET', critical: true },
    { name: 'Admin Workers Status', endpoint: '/api/admin/workers-status', method: 'GET', critical: true, auth: true },
    { name: 'Chat API', endpoint: '/api/chat', method: 'POST', critical: true, payload: { message: 'test' } },
    { name: 'Generate Image', endpoint: '/api/generate-image', method: 'POST', critical: false, payload: { prompt: 'test image' } },
    { name: 'BigQuery API', endpoint: '/api/bigquery', method: 'POST', critical: false, payload: { query: 'test' } },
    { name: 'Kaggle API', endpoint: '/api/kaggle', method: 'GET', critical: false },
    { name: 'Tavily API', endpoint: '/api/tavily', method: 'POST', critical: false, payload: { query: 'test' } },
    { name: 'AI Workers', endpoint: '/api/ai-workers', method: 'GET', critical: true },
    { name: 'Voice Handler', endpoint: '/api/voice-handler', method: 'POST', critical: false, payload: { text: 'test' } },
    { name: 'System Validate', endpoint: '/api/system/validate', method: 'GET', critical: true }
  ];

  // Initialize the panel
  document.addEventListener('DOMContentLoaded', () => {
    console.log("üß™ API Tests Admin Panel initialized");
    
    logToConsole("[INIT] API Tests Panel uruchomiony", "info");
    logToConsole(`[INIT] Znaleziono ${apiEndpoints.length} endpoints do testowania`, "info");
    
    renderEndpointsList();
    updateStatistics();
  });

  // Render endpoints list
  function renderEndpointsList() {
    const container = document.getElementById('endpointsList');
    if (!container) return;

    container.innerHTML = apiEndpoints.map(endpoint => `
      <div class="bg-black/40 border border-gray-600 rounded p-3">
        <div class="flex items-center justify-between mb-2">
          <span class="font-bold text-white">${endpoint.name}</span>
          <span class="text-xs px-2 py-1 rounded ${endpoint.critical ? 'bg-red-600' : 'bg-gray-600'} text-white">
            ${endpoint.critical ? 'CRITICAL' : 'OPTIONAL'}
          </span>
        </div>
        <div class="text-sm text-gray-300 mb-2">
          <span class="text-[#00d7ef]">${endpoint.method}</span> ${endpoint.endpoint}
        </div>
        <button 
          onclick="testSingleEndpoint('${endpoint.endpoint}')"
          class="w-full px-2 py-1 bg-[#00d7ef] hover:bg-[#1be1ff] text-black text-sm rounded transition-all"
        >
          Test
        </button>
      </div>
    `).join('');
  }

  // Main test function
  async function runAllAPITests() {
    const mode = document.getElementById('testMode')?.value || 'all';
    const timeout = parseInt(document.getElementById('testTimeout')?.value) || 5000;
    
    logToConsole(`[START] Rozpoczƒôcie test√≥w w trybie: ${mode}`, "info");
    updateTestStatus("RUNNING");
    
    // Reset stats
    testStats = { executed: 0, success: 0, errors: 0, totalTime: 0, autoScroll: testStats.autoScroll };
    
    // Filter endpoints based on mode
    let endpointsToTest = apiEndpoints;
    if (mode === 'critical') {
      endpointsToTest = apiEndpoints.filter(ep => ep.critical);
    } else if (mode === 'health') {
      endpointsToTest = apiEndpoints.filter(ep => ep.endpoint.includes('status') || ep.endpoint.includes('validate'));
    }
    
    logToConsole(`[INFO] Testowanie ${endpointsToTest.length} endpoints`, "info");
    
    // Run tests
    for (let i = 0; i < endpointsToTest.length; i++) {
      const endpoint = endpointsToTest[i];
      const progress = ((i + 1) / endpointsToTest.length) * 100;
      
      updateProgressBar(progress);
      await testSingleEndpointInternal(endpoint, timeout);
      
      // Small delay between tests
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    updateTestStatus("COMPLETED");
    updateProgressBar(100);
    
    const successRate = testStats.executed > 0 ? ((testStats.success / testStats.executed) * 100).toFixed(1) : 0;
    logToConsole(`[COMPLETE] Testy zako≈Ñczone. Success rate: ${successRate}%`, "success");
  }

  // Test single endpoint (internal)
  async function testSingleEndpointInternal(endpointConfig, timeout = 5000) {
    const startTime = Date.now();
    testStats.executed++;
    
    try {
      logToConsole(`[TEST] ${endpointConfig.name} -> ${endpointConfig.endpoint}`, "testing");
      
      const options = {
        method: endpointConfig.method,
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(timeout)
      };
      
      // Add auth header if needed
      if (endpointConfig.auth) {
        options.headers['Authorization'] = 'Bearer HAOS77';
      }
      
      // Add payload for POST requests
      if (endpointConfig.payload && endpointConfig.method === 'POST') {
        options.body = JSON.stringify(endpointConfig.payload);
      }
      
      const response = await fetch(endpointConfig.endpoint, options);
      const responseTime = Date.now() - startTime;
      testStats.totalTime += responseTime;
      
      if (response.ok) {
        testStats.success++;
        logToConsole(`[SUCCESS] ${endpointConfig.name}: ${response.status} (${responseTime}ms)`, "success");
      } else {
        testStats.errors++;
        logToConsole(`[WARNING] ${endpointConfig.name}: ${response.status} (${responseTime}ms)`, "warning");
      }
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      testStats.errors++;
      testStats.totalTime += responseTime;
      logToConsole(`[ERROR] ${endpointConfig.name}: ${error.message}`, "error");
    }
    
    updateStatistics();
  }

  // Test single endpoint (external call)
  async function testSingleEndpoint(endpoint) {
    const endpointConfig = apiEndpoints.find(ep => ep.endpoint === endpoint);
    if (!endpointConfig) return;
    
    logToConsole(`[SINGLE] Testowanie pojedynczego endpoint: ${endpoint}`, "info");
    await testSingleEndpointInternal(endpointConfig);
  }

  // Quick health check
  async function runQuickHealthCheck() {
    logToConsole("[HEALTH] Rozpoczƒôcie szybkiego health check", "info");
    updateTestStatus("HEALTH_CHECK");
    
    const healthEndpoints = [
      '/api/workers-status',
      '/api/system/validate',
      '/api/ai-workers'
    ];
    
    for (const endpoint of healthEndpoints) {
      const config = apiEndpoints.find(ep => ep.endpoint === endpoint);
      if (config) {
        await testSingleEndpointInternal(config, 3000);
      }
    }
    
    updateTestStatus("READY");
    logToConsole("[HEALTH] Health check zako≈Ñczony", "success");
  }

  // Update statistics display
  function updateStatistics() {
    const elements = {
      testsExecuted: testStats.executed,
      testsSuccess: testStats.success,
      testsErrors: testStats.errors,
      avgResponseTime: testStats.executed > 0 ? `${Math.round(testStats.totalTime / testStats.executed)}ms` : '-',
      successRate: testStats.executed > 0 ? `${((testStats.success / testStats.executed) * 100).toFixed(1)}%` : '-%'
    };

    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    });
  }

  // Update progress bar
  function updateProgressBar(percentage) {
    const progressBar = document.getElementById('progressBar');
    if (progressBar) {
      progressBar.style.width = `${percentage}%`;
    }
  }

  // Update test status
  function updateTestStatus(status) {
    const statusElement = document.getElementById('testsStatus');
    if (statusElement) {
      statusElement.textContent = status;
      statusElement.className = status === 'RUNNING' ? 'text-yellow-400' : 
                               status === 'COMPLETED' ? 'text-green-400' : 'text-[#00d7ef]';
    }
  }

  // Log to console
  function logToConsole(message, type = "info") {
    const console = document.getElementById('testConsole');
    if (!console) return;
    
    const timestamp = new Date().toLocaleTimeString();
    const colors = {
      info: '#00d7ef',
      success: '#00ff88',
      warning: '#ffaa00', 
      error: '#ff4444',
      testing: '#aa88ff'
    };
    
    const color = colors[type] || colors.info;
    const logLine = `<div style="color: ${color};">[${timestamp}] ${message}</div>`;
    
    console.innerHTML += logLine;
    
    if (testStats.autoScroll) {
      console.scrollTop = console.scrollHeight;
    }
  }

  // Clear results
  function clearResults() {
    const console = document.getElementById('testConsole');
    if (console) {
      console.innerHTML = '<div class="text-[#00d7ef]">[CLEAR] Konsola wyczyszczona</div>';
    }
    
    testStats = { executed: 0, success: 0, errors: 0, totalTime: 0, autoScroll: testStats.autoScroll };
    updateStatistics();
    updateProgressBar(0);
    updateTestStatus("READY");
    
    logToConsole("[CLEAR] Wyniki test√≥w wyczyszczone", "info");
  }

  // Toggle auto-scroll
  function toggleAutoScroll() {
    testStats.autoScroll = !testStats.autoScroll;
    const btn = document.getElementById('autoScrollBtn');
    if (btn) {
      btn.textContent = `Auto-scroll: ${testStats.autoScroll ? 'ON' : 'OFF'}`;
      btn.className = testStats.autoScroll 
        ? 'px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm'
        : 'px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded text-sm';
    }
  }

  // Export results
  function exportResults() {
    const results = {
      timestamp: new Date().toISOString(),
      panel: 'API Tests Admin Panel',
      statistics: testStats,
      endpoints_tested: testStats.executed,
      success_rate: testStats.executed > 0 ? ((testStats.success / testStats.executed) * 100).toFixed(1) + '%' : '0%'
    };
    
    logToConsole("[EXPORT] Generowanie raportu eksportu...", "info");
    console.log("üìä API Tests Results Export:", results);
    
    setTimeout(() => {
      logToConsole("[EXPORT] Raport wygenerowany pomy≈õlnie!", "success");
    }, 1000);
  }

  // Global function access
  window.runAllAPITests = runAllAPITests;
  window.runQuickHealthCheck = runQuickHealthCheck;
  window.testSingleEndpoint = testSingleEndpoint;
  window.clearResults = clearResults;
  window.toggleAutoScroll = toggleAutoScroll;
  window.exportResults = exportResults;
</script>

<style>
  .section-title {
    font-family: 'Rajdhani', sans-serif;
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  #testConsole {
    scrollbar-width: thin;
    scrollbar-color: #00d7ef #000;
  }

  #testConsole::-webkit-scrollbar {
    width: 8px;
  }

  #testConsole::-webkit-scrollbar-track {
    background: #000;
  }

  #testConsole::-webkit-scrollbar-thumb {
    background-color: #00d7ef;
    border-radius: 4px;
  }
  
  input, select {
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(0, 215, 239, 0.5);
  }
  
  input:focus, select:focus {
    outline: none;
    border-color: #00d7ef;
    box-shadow: 0 0 5px rgba(0, 215, 239, 0.5);
  }
</style>