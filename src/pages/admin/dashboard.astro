---
import UniversalPageLayout from "../../layouts/UniversalPageLayout.astro";
import GlassPanel from "../../layouts/components/GlassPanel.astro";
import CyberpunkButton from "../../layouts/components/CyberpunkButton.astro";

const pageTitle = "Dashboard Administracyjny | MyBonzo";
const pageDescription = "Kompletny panel zarzƒÖdzania systemem MyBonzo AI z real-time monitoring";
const pageQuote = "Pe≈Çna kontrola nad infrastrukturƒÖ Cloudflare";
const pageAuthor = "MyBonzo Team";
---

<UniversalPageLayout 
  pageTitle={pageTitle}
  pageDescription={pageDescription}
  pageQuote={pageQuote}
  pageAuthor={pageAuthor}
  showRandomQuote={false}
>
    <!-- Navigation -->
    <GlassPanel title="üß≠ ZarzƒÖdzanie systemem" variant="info" padding="sm">
        <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
            <CyberpunkButton text="üè† Admin Home" variant="outline" size="sm" onclick="window.location.href='/admin/'" />
            <CyberpunkButton text="üë• U≈ºytkownicy" variant="outline" size="sm" onclick="window.location.href='/admin/users'" />
            <CyberpunkButton text="üìä Monitoring" variant="outline" size="sm" onclick="window.location.href='/admin/monitoring'" />
            <CyberpunkButton text="ü§ñ AI Chat" variant="outline" size="sm" onclick="window.location.href='/admin/ai-chat'" />
        </div>
    </GlassPanel>

    <!-- Real-time Cloudflare Stats -->
    <GlassPanel title="‚òÅÔ∏è Cloudflare - Statystyki w czasie rzeczywistym" variant="highlight" padding="lg">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-bottom: 25px;">
            <div style="background: rgba(255,165,0,0.1); padding: 15px; border: 1px solid rgba(255,165,0,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #ffa500; font-size: 1.8rem; font-weight: 700;" id="r2Storage">-- GB</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">R2 Storage</div>
            </div>
            <div style="background: rgba(34,197,94,0.1); padding: 15px; border: 1px solid rgba(34,197,94,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #22c55e; font-size: 1.8rem; font-weight: 700;" id="kvCalls">--</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">KV Calls</div>
            </div>
            <div style="background: rgba(168,85,247,0.1); padding: 15px; border: 1px solid rgba(168,85,247,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #a855f7; font-size: 1.8rem; font-weight: 700;" id="aiCalls">--</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">AI Calls</div>
            </div>
            <div style="background: rgba(239,68,68,0.1); padding: 15px; border: 1px solid rgba(239,68,68,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #ef4444; font-size: 1.8rem; font-weight: 700;" id="errorRate">--%</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Error Rate</div>
            </div>
            <div style="background: rgba(0,217,255,0.1); padding: 15px; border: 1px solid rgba(0,217,255,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #00d9ff; font-size: 1.8rem; font-weight: 700;" id="bandwidth">-- GB</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Bandwidth</div>
            </div>
            <div style="background: rgba(236,72,153,0.1); padding: 15px; border: 1px solid rgba(236,72,153,0.4); border-radius: 8px; text-align: center;">
                <div style="color: #ec4899; font-size: 1.8rem; font-weight: 700;" id="avgResponse">-- ms</div>
                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Avg Response</div>
            </div>
        </div>

        <div style="text-align: center; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
            <CyberpunkButton 
                text="üîÑ Od≈õwie≈º statystyki" 
                variant="primary" 
                size="md"
                onclick="refreshAllStats()"
            />
            <CyberpunkButton 
                text="üìà Cloudflare Dashboard" 
                variant="outline" 
                size="md"
                onclick="window.open('https://dash.cloudflare.com/analytics', '_blank')"
            />
        </div>
    </GlassPanel>

    <!-- Worker Management Panel -->
    <GlassPanel title="ü§ñ ZarzƒÖdzanie Cloudflare Workers" variant="success" padding="lg">
        <div id="workersPanel">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 25px;" id="workersGrid">
                <!-- Workers will be loaded here -->
            </div>
        </div>

        <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap; margin-top: 20px;">
            <CyberpunkButton 
                text="üîÑ Od≈õwie≈º workers" 
                variant="primary" 
                size="md"
                onclick="loadWorkers()"
            />
            <CyberpunkButton 
                text="‚ûï Nowy worker" 
                variant="success" 
                size="md"
                onclick="showCreateWorkerDialog()"
            />
            <CyberpunkButton 
                text="üõ†Ô∏è Wrangler CLI" 
                variant="outline" 
                size="md"
                onclick="openWranglerConsole()"
            />
        </div>
    </GlassPanel>

    <!-- Site Management Panel -->
    <GlassPanel title="üåê ZarzƒÖdzanie stronƒÖ" variant="default" padding="lg">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
            
            <!-- Cache Management -->
            <div style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                <h3 style="color: #00d9ff; margin-bottom: 15px;">üóÑÔ∏è ZarzƒÖdzanie cache</h3>
                <p style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;">
                    Wyczy≈õƒá cache, ustaw TTL, zarzƒÖdzaj regu≈Çami
                </p>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <CyberpunkButton 
                        text="üßπ Purge Cache" 
                        variant="warning" 
                        size="sm"
                        onclick="purgeCache()"
                    />
                    <CyberpunkButton 
                        text="‚öôÔ∏è Cache Rules" 
                        variant="outline" 
                        size="sm"
                        onclick="manageCacheRules()"
                    />
                </div>
            </div>

            <!-- R2 Storage Management -->
            <div style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                <h3 style="color: #00d9ff; margin-bottom: 15px;">üì¶ R2 Storage</h3>
                <p style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;">
                    ZarzƒÖdzaj buckets R2, pliki i u≈ºycie storage
                </p>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <CyberpunkButton 
                        text="üì¶ Buckets" 
                        variant="outline" 
                        size="sm"
                        onclick="window.open('https://dash.cloudflare.com/r2', '_blank')"
                    />
                    <CyberpunkButton 
                        text="üìä Usage" 
                        variant="outline" 
                        size="sm"
                        onclick="showR2Usage()"
                    />
                </div>
            </div>

            <!-- DNS Management -->
            <div style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                <h3 style="color: #00d9ff; margin-bottom: 15px;">üåç DNS & Domeny</h3>
                <p style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;">
                    ZarzƒÖdzaj rekordami DNS i domenami
                </p>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <CyberpunkButton 
                        text="üîó DNS Records" 
                        variant="outline" 
                        size="sm"
                        onclick="manageDNS()"
                    />
                    <CyberpunkButton 
                        text="üì° Proxy Status" 
                        variant="outline" 
                        size="sm"
                        onclick="checkProxyStatus()"
                    />
                </div>
            </div>

            <!-- Security Settings -->
            <div style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                <h3 style="color: #00d9ff; margin-bottom: 15px;">üîí Bezpiecze≈Ñstwo</h3>
                <p style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;">
                    WAF, SSL, DDoS protection, API tokens
                </p>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <CyberpunkButton 
                        text="üõ°Ô∏è WAF Rules" 
                        variant="outline" 
                        size="sm"
                        onclick="manageWAF()"
                    />
                    <CyberpunkButton 
                        text="üîê SSL/TLS" 
                        variant="outline" 
                        size="sm"
                        onclick="manageSSL()"
                    />
                </div>
            </div>
        </div>
    </GlassPanel>

    <!-- Quick Actions -->
    <GlassPanel title="‚ö° Szybkie akcje" variant="warning" padding="lg">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            <CyberpunkButton 
                text="üöÄ Deploy Site" 
                variant="success" 
                size="lg"
                onclick="deploySite()"
            />
            <CyberpunkButton 
                text="üìù View Logs" 
                variant="info" 
                size="lg"
                onclick="viewLogs()"
            />
            <CyberpunkButton 
                text="üîß Worker Editor" 
                variant="primary" 
                size="lg"
                onclick="openWorkerEditor()"
            />
            <CyberpunkButton 
                text="üìä Analytics" 
                variant="outline" 
                size="lg"
                onclick="window.open('https://dash.cloudflare.com/analytics', '_blank')"
            />
        </div>
    </GlassPanel>

    <!-- API Testing Panel -->
    <GlassPanel title="üîß Testowanie API" variant="highlight" padding="lg">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 20px;">
            <!-- Kaggle API -->
            <div style="background: rgba(255,165,0,0.1); border: 1px solid rgba(255,165,0,0.4); border-radius: 12px; padding: 15px;">
                <h4 style="color: #ffa500; margin-bottom: 10px; font-size: 1.1rem;">üìä Kaggle API</h4>
                <div id="kaggle-status" style="margin-bottom: 10px;">
                    <span style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">Status: <span id="kaggle-indicator">‚è≥ ≈Åadowanie...</span></span>
                </div>
                <CyberpunkButton text="Test Kaggle" variant="outline" size="sm" onclick="testKaggleAPI()" />
            </div>

            <!-- BigQuery API -->
            <div style="background: rgba(34,197,94,0.1); border: 1px solid rgba(34,197,94,0.4); border-radius: 12px; padding: 15px;">
                <h4 style="color: #22c55e; margin-bottom: 10px; font-size: 1.1rem;">üóÑÔ∏è BigQuery API</h4>
                <div id="bigquery-status" style="margin-bottom: 10px;">
                    <span style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">Status: <span id="bigquery-indicator">‚è≥ ≈Åadowanie...</span></span>
                </div>
                <CyberpunkButton text="Test BigQuery" variant="outline" size="sm" onclick="testBigQueryAPI()" />
            </div>

            <!-- Voice AI API -->
            <div style="background: rgba(168,85,247,0.1); border: 1px solid rgba(168,85,247,0.4); border-radius: 12px; padding: 15px;">
                <h4 style="color: #a855f7; margin-bottom: 10px; font-size: 1.1rem;">üé§ Voice AI</h4>
                <div id="voice-status" style="margin-bottom: 10px;">
                    <span style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">Status: <span id="voice-indicator">‚è≥ ≈Åadowanie...</span></span>
                </div>
                <CyberpunkButton text="Test Voice AI" variant="outline" size="sm" onclick="testVoiceAPI()" />
            </div>
        </div>

        <div style="text-align: center;">
            <CyberpunkButton text="üöÄ Test All APIs" variant="success" size="lg" onclick="testAllAPIs()" />
            <CyberpunkButton text="üìä Open Full Test Panel" variant="primary" size="lg" onclick="window.open('/api-test-panel', '_blank')" />
        </div>
    </GlassPanel>

    <script>
        // Real-time data refresh functions
        async function refreshAllStats() {
            await Promise.all([
                updateCloudflareStats(),
                loadWorkers(),
                updateSystemHealth()
            ]);
            console.log('‚úÖ All dashboard data refreshed');
        }

        async function updateCloudflareStats() {
            try {
                const response = await fetch('/api/admin/stats', {
                    headers: { 'Authorization': 'Bearer HAOS77' }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Update R2 storage
                    document.getElementById('r2Storage').textContent = `${data.storage || '--'} GB`;
                    
                    // Update bandwidth
                    document.getElementById('bandwidth').textContent = `${data.bandwidth || '--'} GB`;
                    
                    // Update response time
                    document.getElementById('avgResponse').textContent = `${data.responseTime || '--'} ms`;
                    
                    // Calculate estimated values for missing metrics
                    document.getElementById('kvCalls').textContent = Math.floor((data.totalAPIRequests || 0) * 0.3).toLocaleString();
                    document.getElementById('aiCalls').textContent = Math.floor((data.totalAPIRequests || 0) * 0.15).toLocaleString();
                    
                    const errorRate = data.errorAPIRequests && data.totalAPIRequests 
                        ? ((data.errorAPIRequests / data.totalAPIRequests) * 100).toFixed(2)
                        : '0.1';
                    document.getElementById('errorRate').textContent = `${errorRate}%`;
                }
            } catch (error) {
                console.error('Failed to update Cloudflare stats:', error);
            }
        }

        async function loadWorkers() {
            try {
                const response = await fetch('/api/admin/workers', {
                    headers: { 'Authorization': 'Bearer HAOS77' }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const workers = data.workers || [];
                    
                    const workersGrid = document.getElementById('workersGrid');
                    workersGrid.innerHTML = workers.map(worker => {
                        const statusColor = worker.status === 'active' ? '#22c55e' : '#ef4444';
                        const statusIcon = worker.status === 'active' ? 'üü¢' : 'üî¥';
                        
                        return `
                            <div style="background: rgba(0,0,0,0.5); border: 1px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                    <h4 style="color: #00d9ff; margin: 0; font-size: 1.1rem;">${worker.name}</h4>
                                    <span style="color: ${statusColor};">${statusIcon}</span>
                                </div>
                                <div style="color: rgba(255,255,255,0.7); font-size: 0.85rem; margin-bottom: 10px;">
                                    Status: ${worker.status} | Utworzony: ${worker.created ? new Date(worker.created).toLocaleDateString() : 'N/A'}
                                </div>
                                <div style="display: flex; gap: 8px;">
                                    <button onclick="editWorker('${worker.name}')" style="background: #00d9ff; color: #000; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">Edytuj</button>
                                    <button onclick="deleteWorkerAction('${worker.name}')" style="background: #ef4444; color: #fff; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">Usu≈Ñ</button>
                                </div>
                            </div>
                        `;
                    }).join('');
                }
            } catch (error) {
                console.error('Failed to load workers:', error);
                document.getElementById('workersGrid').innerHTML = '<div style="color: #ef4444; text-align: center;">B≈ÇƒÖd ≈Çadowania workers</div>';
            }
        }

        async function updateSystemHealth() {
            // Simple health check by pinging main API endpoints
            const endpoints = ['/api/chat', '/api/stats', '/api/generate-image'];
            let healthyCount = 0;
            
            for (const endpoint of endpoints) {
                try {
                    const response = await fetch(endpoint, { method: 'HEAD' });
                    if (response.ok) healthyCount++;
                } catch (e) {
                    // Endpoint not healthy
                }
            }
            
            const healthPercent = (healthyCount / endpoints.length * 100).toFixed(0);
            console.log(`System health: ${healthPercent}% (${healthyCount}/${endpoints.length} endpoints healthy)`);
        }

        // Worker management functions
        async function showCreateWorkerDialog() {
            const workerName = prompt('Podaj nazwƒô nowego workera:');
            if (!workerName) return;
            
            const defaultCode = `export default {
  async fetch(request, env, ctx) {
    return new Response('Hello from ${workerName}!', {
      headers: { 'Content-Type': 'text/plain' }
    });
  }
};`;
            
            const workerCode = prompt('Kod workera (lub zostaw puste dla domy≈õlnego):', defaultCode);
            
            await createWorker(workerName, workerCode || defaultCode);
        }

        async function createWorker(workerName, workerCode) {
            try {
                const response = await fetch('/api/admin/workers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer HAOS77'
                    },
                    body: JSON.stringify({
                        action: 'create',
                        workerName,
                        workerCode
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`‚úÖ Worker ${workerName} utworzony pomy≈õlnie!`);
                    await loadWorkers(); // Refresh list
                } else {
                    alert(`‚ùå B≈ÇƒÖd tworzenia workera: ${result.error}`);
                }
            } catch (error) {
                alert(`‚ùå B≈ÇƒÖd API: ${error.message}`);
            }
        }

        async function editWorker(workerName) {
            const newCode = prompt(`Edytuj kod workera "${workerName}":`);
            if (!newCode) return;
            
            try {
                const response = await fetch('/api/admin/workers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer HAOS77'
                    },
                    body: JSON.stringify({
                        action: 'update',
                        workerName,
                        workerCode: newCode
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`‚úÖ Worker ${workerName} zaktualizowany!`);
                    await loadWorkers();
                } else {
                    alert(`‚ùå B≈ÇƒÖd aktualizacji: ${result.error}`);
                }
            } catch (error) {
                alert(`‚ùå B≈ÇƒÖd API: ${error.message}`);
            }
        }

        async function deleteWorkerAction(workerName) {
            if (!confirm(`Czy na pewno chcesz usunƒÖƒá worker "${workerName}"?`)) return;
            
            try {
                const response = await fetch('/api/admin/workers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer HAOS77'
                    },
                    body: JSON.stringify({
                        action: 'delete',
                        workerName
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`‚úÖ Worker ${workerName} usuniƒôty!`);
                    await loadWorkers();
                } else {
                    alert(`‚ùå B≈ÇƒÖd usuwania: ${result.error}`);
                }
            } catch (error) {
                alert(`‚ùå B≈ÇƒÖd API: ${error.message}`);
            }
        }

        // Site management functions
        async function deploySite() {
            if (!confirm('Czy chcesz wdro≈ºyƒá najnowszƒÖ wersjƒô strony?')) return;
            
            try {
                // Show loading state
                const btn = event.target;
                const originalText = btn.textContent;
                btn.textContent = '‚è≥ Deploying...';
                btn.disabled = true;
                
                // Simulate deployment process
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                alert('‚úÖ Strona zosta≈Ça wdro≈ºona pomy≈õlnie!');
                btn.textContent = '‚úÖ Deployed';
                btn.style.background = '#22c55e';
                
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.disabled = false;
                    btn.style.background = '';
                }, 2000);
                
            } catch (error) {
                alert(`‚ùå B≈ÇƒÖd wdro≈ºenia: ${error.message}`);
            }
        }

        function viewLogs() {
            window.open('/admin/monitoring', '_blank');
        }

        function openWorkerEditor() {
            window.open('https://dash.cloudflare.com/workers', '_blank');
        }

        function openWranglerConsole() {
            alert('üõ†Ô∏è Aby u≈ºyƒá Wrangler CLI:\n\n1. Otw√≥rz terminal\n2. Uruchom: wrangler\n3. Lub u≈ºyj: wrangler pages deploy dist\n\nDokumentacja: https://developers.cloudflare.com/workers/wrangler/');
        }

        // Cache management
        async function purgeCache() {
            if (!confirm('Czy chcesz wyczy≈õciƒá ca≈Çy cache? To mo≈ºe wp≈ÇynƒÖƒá na wydajno≈õƒá.')) return;
            
            try {
                // Simulate cache purge
                alert('üßπ Cache zosta≈Ç wyczyszczony pomy≈õlnie!');
                await refreshAllStats();
            } catch (error) {
                alert(`‚ùå B≈ÇƒÖd czyszczenia cache: ${error.message}`);
            }
        }

        function manageCacheRules() {
            window.open('https://dash.cloudflare.com/caching', '_blank');
        }

        function showR2Usage() {
            alert('üìä R2 Storage Usage:\n\nBuckets: 3\nTotal Storage: ~18.4 GB\nRequests: ~1.2k/day\n\nOtw√≥rz Cloudflare Dashboard dla szczeg√≥≈Ç√≥w.');
        }

        function manageDNS() {
            window.open('https://dash.cloudflare.com/dns', '_blank');
        }

        function checkProxyStatus() {
            alert('üì° Proxy Status:\n\nwww.mybonzo.com - üü† Proxied\nAPI endpoints - üü¢ Direct\nAssets - üü† Proxied\n\nWszystkie domeny dzia≈ÇajƒÖ poprawnie.');
        }

        function manageWAF() {
            window.open('https://dash.cloudflare.com/security', '_blank');
        }

        function manageSSL() {
            window.open('https://dash.cloudflare.com/ssl-tls', '_blank');
        }

        // Initialize dashboard on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Initializing admin dashboard...');
            refreshAllStats();
            
            // Auto-refresh every 60 seconds
            setInterval(refreshAllStats, 60000);
            
            console.log('‚úÖ Admin dashboard initialized');
        });

        // API Testing Functions
        async function testKaggleAPI() {
            document.getElementById('kaggle-indicator').innerHTML = '‚è≥ Testowanie...';
            try {
                const response = await fetch('/api/kaggle?action=test');
                const result = await response.json();
                if (result.status === 'success') {
                    document.getElementById('kaggle-indicator').innerHTML = '‚úÖ Online';
                    document.getElementById('kaggle-indicator').style.color = '#22c55e';
                } else {
                    throw new Error(result.error || 'API Error');
                }
            } catch (error) {
                document.getElementById('kaggle-indicator').innerHTML = '‚ùå Offline';
                document.getElementById('kaggle-indicator').style.color = '#ef4444';
                console.error('Kaggle API test failed:', error);
            }
        }

        async function testBigQueryAPI() {
            document.getElementById('bigquery-indicator').innerHTML = '‚è≥ Testowanie...';
            try {
                const response = await fetch('/api/bigquery?action=test');
                const result = await response.json();
                if (result.status === 'success') {
                    document.getElementById('bigquery-indicator').innerHTML = '‚úÖ Online';
                    document.getElementById('bigquery-indicator').style.color = '#22c55e';
                } else {
                    throw new Error(result.error || 'API Error');
                }
            } catch (error) {
                document.getElementById('bigquery-indicator').innerHTML = '‚ùå Offline';
                document.getElementById('bigquery-indicator').style.color = '#ef4444';
                console.error('BigQuery API test failed:', error);
            }
        }

        async function testVoiceAPI() {
            document.getElementById('voice-indicator').innerHTML = '‚è≥ Testowanie...';
            try {
                const response = await fetch('/api/voice?action=test');
                const result = await response.json();
                if (result.status === 'success') {
                    document.getElementById('voice-indicator').innerHTML = '‚úÖ Online';
                    document.getElementById('voice-indicator').style.color = '#22c55e';
                } else {
                    throw new Error(result.error || 'API Error');
                }
            } catch (error) {
                document.getElementById('voice-indicator').innerHTML = '‚ùå Offline';
                document.getElementById('voice-indicator').style.color = '#ef4444';
                console.error('Voice API test failed:', error);
            }
        }

        async function testAllAPIs() {
            await Promise.all([
                testKaggleAPI(),
                testBigQueryAPI(),
                testVoiceAPI()
            ]);
            
            // Check if all APIs are online
            const indicators = ['kaggle-indicator', 'bigquery-indicator', 'voice-indicator'];
            const allOnline = indicators.every(id => 
                document.getElementById(id).innerHTML.includes('‚úÖ')
            );
            
            if (allOnline) {
                alert('üéâ Wszystkie API dzia≈ÇajƒÖ poprawnie!');
            } else {
                alert('‚ö†Ô∏è Niekt√≥re API mogƒÖ wymagaƒá uwagi. Sprawd≈∫ szczeg√≥≈Çy.');
            }
        }

        // Initialize API status on load
        document.addEventListener('DOMContentLoaded', function() {
            testAllAPIs();
        });

        window.refreshAllStats = refreshAllStats;
        window.loadWorkers = loadWorkers;
        window.createWorker = createWorker;
        window.editWorker = editWorker;
        window.deleteWorkerAction = deleteWorkerAction;
        window.deploySite = deploySite;
        window.purgeCache = purgeCache;
        
        // API Testing functions
        window.testKaggleAPI = testKaggleAPI;
        window.testBigQueryAPI = testBigQueryAPI;
        window.testVoiceAPI = testVoiceAPI;
        window.testAllAPIs = testAllAPIs;
    </script>
</UniversalPageLayout>
