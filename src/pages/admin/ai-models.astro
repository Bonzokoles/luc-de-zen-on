<<<<<<< HEAD
Ôªø---
=======
---
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
import UniversalPageLayout from "../../layouts/UniversalPageLayout.astro";
import GlassPanel from "../../layouts/components/GlassPanel.astro";
import CyberpunkButton from "../../layouts/components/CyberpunkButton.astro";

<<<<<<< HEAD
const pageTitle = "Zarz√Ñ‚Ä¶dzanie Modelami AI";
const pageDescription = "Konfiguracja i monitoring modeli sztucznej inteligencji w systemie MyBonzo";
const pageQuote = "AI to narz√Ñ‚Ñ¢dzie, m√Ñ‚Ä¶droƒπ‚Ä∫√Ñ‚Ä° to jego uƒπƒΩywanie.";
=======
const pageTitle = "ZarzƒÖdzanie Modelami AI";
const pageDescription = "Konfiguracja i monitoring modeli sztucznej inteligencji w systemie MyBonzo";
const pageQuote = "AI to narzƒôdzie, mƒÖdro≈õƒá to jego u≈ºywanie.";
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
const pageAuthor = "MyBonzo AI Management";
---

<UniversalPageLayout 
  pageTitle={pageTitle}
  pageDescription={pageDescription}
  pageQuote={pageQuote}
  pageAuthor={pageAuthor}
  showRandomQuote={false}
>
    <!-- AI Models Overview -->
<<<<<<< HEAD
    <GlassPanel title="ƒë≈∫¬§‚Äì Przegl√Ñ‚Ä¶d Modeli AI" variant="highlight" padding="xl">
=======
    <GlassPanel title="ü§ñ PrzeglƒÖd Modeli AI" variant="highlight" padding="xl">
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px;">
            
            <!-- Model Status Cards -->
            <div id="llama-status" style="background: rgba(0,217,255,0.1); border: 2px solid rgba(0,217,255,0.3); border-radius: 12px; padding: 20px;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 15px;">
<<<<<<< HEAD
                    <h3 style="color: #00d9ff; margin: 0;">ƒë≈∫¬¶‚Ñ¢ Llama 3.1 8B</h3>
=======
                    <h3 style="color: #00d9ff; margin: 0;">ü¶ô Llama 3.1 8B</h3>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <span class="status-indicator" style="background: #22c55e; width: 12px; height: 12px; border-radius: 50%; display: inline-block;"></span>
                </div>
                <div style="color: rgba(255,255,255,0.8); margin-bottom: 10px;">
                    <strong>Status:</strong> <span style="color: #22c55e;">Aktywny</span><br>
                    <strong>Model ID:</strong> @cf/meta/llama-3.1-8b-instruct<br>
                    <strong>Zastosowanie:</strong> Chat, analiza tekstu<br>
                    <strong>Uptime:</strong> <span id="llama-uptime">99.7%</span>
                </div>
                <CyberpunkButton text="Konfiguruj" variant="outline" size="sm" onclick="configureModel('llama')" />
            </div>

            <div id="mistral-status" style="background: rgba(251,191,36,0.1); border: 2px solid rgba(251,191,36,0.3); border-radius: 12px; padding: 20px;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 15px;">
<<<<<<< HEAD
                    <h3 style="color: #fbbf24; margin: 0;">ƒë≈∫≈ö≈ûƒè¬∏≈π Mistral 7B</h3>
=======
                    <h3 style="color: #fbbf24; margin: 0;">üå™Ô∏è Mistral 7B</h3>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <span class="status-indicator" style="background: #22c55e; width: 12px; height: 12px; border-radius: 50%; display: inline-block;"></span>
                </div>
                <div style="color: rgba(255,255,255,0.8); margin-bottom: 10px;">
                    <strong>Status:</strong> <span style="color: #22c55e;">Aktywny</span><br>
                    <strong>Model ID:</strong> @cf/mistral/mistral-7b-instruct-v0.1<br>
                    <strong>Zastosowanie:</strong> Instrukcje, kod<br>
                    <strong>Uptime:</strong> <span id="mistral-uptime">99.2%</span>
                </div>
                <CyberpunkButton text="Konfiguruj" variant="outline" size="sm" onclick="configureModel('mistral')" />
            </div>

            <div id="qwen-status" style="background: rgba(139,92,246,0.1); border: 2px solid rgba(139,92,246,0.3); border-radius: 12px; padding: 20px;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 15px;">
<<<<<<< HEAD
                    <h3 style="color: #8b5cf6; margin: 0;">ƒë≈∫¬êƒΩ Qwen 1.5 7B</h3>
=======
                    <h3 style="color: #8b5cf6; margin: 0;">üêº Qwen 1.5 7B</h3>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <span class="status-indicator" style="background: #22c55e; width: 12px; height: 12px; border-radius: 50%; display: inline-block;"></span>
                </div>
                <div style="color: rgba(255,255,255,0.8); margin-bottom: 10px;">
                    <strong>Status:</strong> <span style="color: #22c55e;">Aktywny</span><br>
                    <strong>Model ID:</strong> @cf/qwen/qwen1.5-7b-chat-awq<br>
<<<<<<< HEAD
                    <strong>Zastosowanie:</strong> Wieloj√Ñ‚Ñ¢zyczny chat<br>
=======
                    <strong>Zastosowanie:</strong> Wielojƒôzyczny chat<br>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <strong>Uptime:</strong> <span id="qwen-uptime">98.9%</span>
                </div>
                <CyberpunkButton text="Konfiguruj" variant="outline" size="sm" onclick="configureModel('qwen')" />
            </div>

            <div id="bielik-status" style="background: rgba(16,185,129,0.1); border: 2px solid rgba(16,185,129,0.3); border-radius: 12px; padding: 20px;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 15px;">
<<<<<<< HEAD
                    <h3 style="color: #10b981; margin: 0;">ƒë≈∫‚Ä°¬µƒë≈∫‚Ä°¬± Bielik 7B</h3>
=======
                    <h3 style="color: #10b981; margin: 0;">üáµüá± Bielik 7B</h3>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <span class="status-indicator" style="background: #22c55e; width: 12px; height: 12px; border-radius: 50%; display: inline-block;"></span>
                </div>
                <div style="color: rgba(255,255,255,0.8); margin-bottom: 10px;">
                    <strong>Status:</strong> <span style="color: #22c55e;">Aktywny</span><br>
                    <strong>Model ID:</strong> @cf/huggingface/bielik-7b-instruct-v0.1<br>
                    <strong>Zastosowanie:</strong> Polski language model<br>
                    <strong>Uptime:</strong> <span id="bielik-uptime">98.1%</span>
                </div>
                <CyberpunkButton text="Konfiguruj" variant="outline" size="sm" onclick="configureModel('bielik')" />
            </div>
        </div>

        <!-- Global AI Stats -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
            <div style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;">
                <div style="color: #00d9ff; font-size: 2rem; font-weight: 700;" id="total-requests">847k</div>
                <div style="color: rgba(255,255,255,0.7);">Total Requests</div>
            </div>
            <div style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;">
                <div style="color: #00d9ff; font-size: 2rem; font-weight: 700;" id="avg-response-time">245ms</div>
                <div style="color: rgba(255,255,255,0.7);">Avg Response</div>
            </div>
            <div style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;">
                <div style="color: #00d9ff; font-size: 2rem; font-weight: 700;" id="error-rate">0.3%</div>
                <div style="color: rgba(255,255,255,0.7);">Error Rate 24h</div>
            </div>
            <div style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;">
                <div style="color: #00d9ff; font-size: 2rem; font-weight: 700;" id="active-users">156</div>
                <div style="color: rgba(255,255,255,0.7);">Active Users</div>
            </div>
        </div>
    </GlassPanel>

    <!-- Model Configuration -->
<<<<<<< HEAD
    <GlassPanel title="√¢≈°‚Ñ¢ƒè¬∏≈π Konfiguracja Modeli" variant="default" padding="lg">
=======
    <GlassPanel title="‚öôÔ∏è Konfiguracja Modeli" variant="default" padding="lg">
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
        <div id="model-config-section">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                
                <!-- Model Selection -->
                <div>
                    <h4 style="color: #00d9ff; margin-bottom: 15px;">Wybierz model do konfiguracji:</h4>
                    <select id="config-model-select" style="width: 100%; padding: 10px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: #00d9ff; margin-bottom: 20px;">
                        <option value="">-- Wybierz model --</option>
                        <option value="llama">Llama 3.1 8B</option>
                        <option value="mistral">Mistral 7B</option>
                        <option value="qwen">Qwen 1.5 7B</option>
                        <option value="bielik">Bielik 7B</option>
                    </select>

                    <div id="model-config-form" style="display: none;">
                        <div style="margin-bottom: 15px;">
                            <label style="color: rgba(255,255,255,0.8); display: block; margin-bottom: 5px;">Temperatura (0.0 - 1.0):</label>
                            <input type="range" id="temperature-slider" min="0" max="1" step="0.1" value="0.7" style="width: 100%; margin-bottom: 5px;">
                            <div style="color: #00d9ff; font-size: 0.9rem;" id="temperature-value">0.7</div>
                        </div>

                        <div style="margin-bottom: 15px;">
                            <label style="color: rgba(255,255,255,0.8); display: block; margin-bottom: 5px;">Max Tokens:</label>
                            <input type="number" id="max-tokens" value="2000" min="100" max="4000" style="width: 100%; padding: 8px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: white;">
                        </div>

                        <div style="margin-bottom: 15px;">
                            <label style="color: rgba(255,255,255,0.8); display: block; margin-bottom: 5px;">Rate Limit (req/min):</label>
                            <input type="number" id="rate-limit" value="60" min="1" max="1000" style="width: 100%; padding: 8px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: white;">
                        </div>

                        <div style="margin-bottom: 20px;">
                            <label style="color: rgba(255,255,255,0.8); display: block; margin-bottom: 5px;">
                                <input type="checkbox" id="enable-model" checked style="margin-right: 8px;"> Model aktywny
                            </label>
                        </div>

<<<<<<< HEAD
                        <CyberpunkButton text="Zapisz konfiguracj√Ñ‚Ñ¢" variant="primary" size="md" onclick="saveModelConfig()" />
=======
                        <CyberpunkButton text="Zapisz konfiguracjƒô" variant="primary" size="md" onclick="saveModelConfig()" />
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    </div>
                </div>

                <!-- Model Performance -->
                <div>
                    <h4 style="color: #00d9ff; margin-bottom: 15px;">Performance Dashboard:</h4>
                    <div id="performance-chart" style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; padding: 20px; height: 200px; display: flex; align-items: center; justify-content: center;">
                        <div style="color: rgba(255,255,255,0.6); text-align: center;">
<<<<<<< HEAD
                            <div style="font-size: 3rem; margin-bottom: 10px;">ƒë≈∫‚Äú≈†</div>
                            <div>Wybierz model aby zobaczy√Ñ‚Ä° metryki</div>
=======
                            <div style="font-size: 3rem; margin-bottom: 10px;">üìä</div>
                            <div>Wybierz model aby zobaczyƒá metryki</div>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                        </div>
                    </div>

                    <div style="margin-top: 15px; display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                        <div style="background: rgba(0,0,0,0.4); padding: 10px; border: 1px solid rgba(0,217,255,0.3); border-radius: 4px; text-align: center;">
                            <div style="color: #00d9ff; font-weight: bold;" id="selected-model-requests">-</div>
                            <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Requests/hour</div>
                        </div>
                        <div style="background: rgba(0,0,0,0.4); padding: 10px; border: 1px solid rgba(0,217,255,0.3); border-radius: 4px; text-align: center;">
                            <div style="color: #00d9ff; font-weight: bold;" id="selected-model-latency">-</div>
                            <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Avg Latency</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </GlassPanel>

    <!-- AI Model Testing -->
<<<<<<< HEAD
    <GlassPanel title="ƒë≈∫¬ß≈û Test Modeli AI" variant="success" padding="lg">
=======
    <GlassPanel title="üß™ Test Modeli AI" variant="success" padding="lg">
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
        <div style="margin-bottom: 20px;">
            <div style="display: flex; gap: 15px; margin-bottom: 15px;">
                <select id="test-model" style="flex: 1; padding: 10px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: #00d9ff;">
                    <option value="@cf/meta/llama-3.1-8b-instruct">Llama 3.1 8B</option>
                    <option value="@cf/mistral/mistral-7b-instruct-v0.1">Mistral 7B</option>
                    <option value="@cf/qwen/qwen1.5-7b-chat-awq">Qwen 1.5 7B</option>
                    <option value="@cf/huggingface/bielik-7b-instruct-v0.1">Bielik 7B</option>
                </select>
                <CyberpunkButton text="Test Model" variant="outline" size="md" onclick="testModel()" />
            </div>
            
            <textarea 
                id="test-prompt" 
<<<<<<< HEAD
                placeholder="Wprowadƒπ≈ü prompt testowy..."
                style="width: 100%; height: 100px; padding: 12px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: white; resize: vertical; margin-bottom: 15px;"
            >Jaka jest stolica Polski i ile ma mieszkaƒπ‚ÄûcƒÇ≈Çw?</textarea>
            
            <div id="test-results" style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; padding: 15px; min-height: 100px;">
                <div style="color: rgba(255,255,255,0.6); text-align: center;">
                    Wyniki testƒÇ≈Çw pojawi√Ñ‚Ä¶ si√Ñ‚Ñ¢ tutaj...
=======
                placeholder="Wprowad≈∫ prompt testowy..."
                style="width: 100%; height: 100px; padding: 12px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.5); border-radius: 4px; color: white; resize: vertical; margin-bottom: 15px;"
            >Jaka jest stolica Polski i ile ma mieszka≈Ñc√≥w?</textarea>
            
            <div id="test-results" style="background: rgba(0,0,0,0.4); border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; padding: 15px; min-height: 100px;">
                <div style="color: rgba(255,255,255,0.6); text-align: center;">
                    Wyniki test√≥w pojawiƒÖ siƒô tutaj...
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                </div>
            </div>
        </div>
    </GlassPanel>

    <script>
        // Model configurations data
        const modelConfigs = {
            llama: {
                name: "Llama 3.1 8B",
                id: "@cf/meta/llama-3.1-8b-instruct",
                color: "#00d9ff",
                requests: "234/h",
                latency: "198ms"
            },
            mistral: {
                name: "Mistral 7B",
                id: "@cf/mistral/mistral-7b-instruct-v0.1",
                color: "#fbbf24",
                requests: "187/h",
                latency: "156ms"
            },
            qwen: {
                name: "Qwen 1.5 7B",
                id: "@cf/qwen/qwen1.5-7b-chat-awq",
                color: "#8b5cf6",
                requests: "156/h",
                latency: "289ms"
            },
            bielik: {
                name: "Bielik 7B",
                id: "@cf/huggingface/bielik-7b-instruct-v0.1",
                color: "#10b981",
                requests: "89/h",
                latency: "267ms"
            }
        };

        // Configure specific model
        function configureModel(modelKey) {
            const select = document.getElementById('config-model-select');
            select.value = modelKey;
            showModelConfig(modelKey);
        }

        // Show model configuration form
        function showModelConfig(modelKey) {
            const form = document.getElementById('model-config-form');
            const config = modelConfigs[modelKey];
            
            if (config) {
                form.style.display = 'block';
                updatePerformanceDisplay(modelKey);
            } else {
                form.style.display = 'none';
            }
        }

        // Update performance display
        function updatePerformanceDisplay(modelKey) {
            const config = modelConfigs[modelKey];
            if (config) {
                document.getElementById('selected-model-requests').textContent = config.requests;
                document.getElementById('selected-model-latency').textContent = config.latency;
                
                const chart = document.getElementById('performance-chart');
                chart.innerHTML = `
                    <div style="color: ${config.color}; text-align: center;">
<<<<<<< HEAD
                        <div style="font-size: 2rem; margin-bottom: 10px;">ƒë≈∫‚Äú¬à</div>
=======
                        <div style="font-size: 2rem; margin-bottom: 10px;">üìà</div>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                        <div style="font-weight: bold; margin-bottom: 5px;">${config.name}</div>
                        <div style="color: rgba(255,255,255,0.8);">Performance Metrics</div>
                    </div>
                `;
            }
        }

        // Save model configuration
        async function saveModelConfig() {
            const modelKey = document.getElementById('config-model-select').value;
            const temperature = document.getElementById('temperature-slider').value;
            const maxTokens = document.getElementById('max-tokens').value;
            const rateLimit = document.getElementById('rate-limit').value;
            const enabled = document.getElementById('enable-model').checked;

            const config = {
                model: modelKey,
                temperature: parseFloat(temperature),
                maxTokens: parseInt(maxTokens),
                rateLimit: parseInt(rateLimit),
                enabled: enabled
            };

            try {
                // Simulated save - in real implementation, this would call an API
                console.log('Saving model config:', config);
                
                // Show success message
                const originalText = event.target.textContent;
<<<<<<< HEAD
                event.target.textContent = '√¢≈õ‚Ä¶ Zapisano!';
=======
                event.target.textContent = '‚úÖ Zapisano!';
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                event.target.style.background = 'rgba(34, 197, 94, 0.2)';
                
                setTimeout(() => {
                    event.target.textContent = originalText;
                    event.target.style.background = '';
                }, 2000);
                
            } catch (error) {
                console.error('Config save error:', error);
<<<<<<< HEAD
                alert('Bƒπ‚Äö√Ñ‚Ä¶d zapisu konfiguracji: ' + error.message);
=======
                alert('B≈ÇƒÖd zapisu konfiguracji: ' + error.message);
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
            }
        }

        // Test AI model
        async function testModel() {
            const model = document.getElementById('test-model').value;
            const prompt = document.getElementById('test-prompt').value.trim();
            const resultsDiv = document.getElementById('test-results');

            if (!prompt) {
<<<<<<< HEAD
                alert('Wprowadƒπ≈ü prompt testowy');
=======
                alert('Wprowad≈∫ prompt testowy');
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                return;
            }

            resultsDiv.innerHTML = `
                <div style="color: #00d9ff; display: flex; align-items: center;">
<<<<<<< HEAD
                    <div style="margin-right: 10px;">ƒë≈∫‚Äù‚Äû</div>
=======
                    <div style="margin-right: 10px;">üîÑ</div>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    <div>Testowanie modelu ${model}...</div>
                </div>
            `;

            try {
                const startTime = Date.now();
                
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        prompt: prompt,
                        model: model
                    })
                });

                const data = await response.json();
                const responseTime = Date.now() - startTime;

                if (data.answer) {
                    resultsDiv.innerHTML = `
                        <div style="margin-bottom: 15px;">
<<<<<<< HEAD
                            <div style="color: #00d9ff; font-weight: bold; margin-bottom: 8px;">√¢≈õ‚Ä¶ Test zakoƒπ‚Äûczony pomyƒπ‚Ä∫lnie</div>
=======
                            <div style="color: #00d9ff; font-weight: bold; margin-bottom: 8px;">‚úÖ Test zako≈Ñczony pomy≈õlnie</div>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                            <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-bottom: 10px;">
                                Model: ${model} | Czas odpowiedzi: ${responseTime}ms
                            </div>
                        </div>
                        <div style="background: rgba(0,217,255,0.1); border-left: 4px solid #00d9ff; padding: 12px; border-radius: 4px;">
                            <div style="color: rgba(255,255,255,0.9); line-height: 1.6;">${data.answer}</div>
                        </div>
                    `;
                } else {
                    throw new Error(data.error || 'Brak odpowiedzi z modelu');
                }

            } catch (error) {
                console.error('Model test error:', error);
                resultsDiv.innerHTML = `
                    <div style="color: #ef4444; display: flex; align-items: center;">
<<<<<<< HEAD
                        <div style="margin-right: 10px;">√¢≈•≈ö</div>
                        <div>Bƒπ‚Äö√Ñ‚Ä¶d testu: ${error.message}</div>
=======
                        <div style="margin-right: 10px;">‚ùå</div>
                        <div>B≈ÇƒÖd testu: ${error.message}</div>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
                    </div>
                `;
            }
        }

        // Update temperature display
        function updateTemperatureDisplay() {
            const slider = document.getElementById('temperature-slider');
            const display = document.getElementById('temperature-value');
            display.textContent = slider.value;
        }

        // Simulate real-time stats updates
        function updateStats() {
            const stats = {
                totalRequests: Math.floor(847000 + Math.random() * 1000),
                avgResponseTime: Math.floor(245 + Math.random() * 20 - 10),
                errorRate: (0.3 + Math.random() * 0.2 - 0.1).toFixed(1),
                activeUsers: Math.floor(156 + Math.random() * 20 - 10)
            };

            document.getElementById('total-requests').textContent = (stats.totalRequests / 1000).toFixed(1) + 'k';
            document.getElementById('avg-response-time').textContent = stats.avgResponseTime + 'ms';
            document.getElementById('error-rate').textContent = stats.errorRate + '%';
            document.getElementById('active-users').textContent = stats.activeUsers;

            // Update uptime displays
            Object.keys(modelConfigs).forEach(key => {
                const uptimeElement = document.getElementById(key + '-uptime');
                if (uptimeElement) {
                    const uptime = (98 + Math.random() * 2).toFixed(1);
                    uptimeElement.textContent = uptime + '%';
                }
            });
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Setup event listeners
            const modelSelect = document.getElementById('config-model-select');
            modelSelect.addEventListener('change', function() {
                showModelConfig(this.value);
            });

            const tempSlider = document.getElementById('temperature-slider');
            tempSlider.addEventListener('input', updateTemperatureDisplay);

            // Update stats every 30 seconds
            updateStats();
            setInterval(updateStats, 30000);
        });
    </script>
<<<<<<< HEAD
</UniversalPageLayout>
=======
</UniversalPageLayout>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
