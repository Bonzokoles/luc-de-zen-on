---
import UniversalPageLayout from "../../layouts/UniversalPageLayout.astro";
import GlassPanel from "../../layouts/components/GlassPanel.astro";
import CyberpunkButton from "../../layouts/components/CyberpunkButton.astro";

const pageTitle = "System Monitoring | MyBonzo Admin";
const pageDescription =
  "Monitorowanie systemu MyBonzo - wydajność, logi, status";
const pageQuote =
  "W każdym systemie najważniejsze jest to, co dzieje się w środku.";
const pageAuthor = "MyBonzo Monitoring";
---

<UniversalPageLayout
  pageTitle={pageTitle}
  pageDescription={pageDescription}
  pageQuote={pageQuote}
  pageAuthor={pageAuthor}
  showRandomQuote={false}
>
  <!-- Navigation -->
  <GlassPanel title="🧭 Nawigacja" variant="info" padding="sm">
    <div
      style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;"
    >
      <CyberpunkButton
        text="🏠 Strona główna"
        variant="outline"
        size="sm"
        onclick="window.location.href='/admin/'"
      />
      <CyberpunkButton
        text="👥 Użytkownicy"
        variant="outline"
        size="sm"
        onclick="window.location.href='/admin/users'"
      />
      <CyberpunkButton
        text="🤖 AI Chat"
        variant="outline"
        size="sm"
        onclick="window.location.href='/admin/ai-chat'"
      />
    </div>
  </GlassPanel>

  <!-- System Status Overview -->
  <GlassPanel title="🔍 Status systemu" variant="highlight" padding="lg">
    <div
      style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;"
    >
      <div
        style="background: rgba(34,197,94,0.1); padding: 15px; border: 1px solid rgba(34,197,94,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #22c55e; font-size: 2rem; margin-bottom: 5px;">
          ✅
        </div>
        <div style="color: #22c55e; font-weight: 600;">Serwer</div>
        <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
          Online
        </div>
      </div>

      <div
        style="background: rgba(34,197,94,0.1); padding: 15px; border: 1px solid rgba(34,197,94,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #22c55e; font-size: 2rem; margin-bottom: 5px;">
          🚀
        </div>
        <div style="color: #22c55e; font-weight: 600;">Workers</div>
        <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
          Aktywne (5/5)
        </div>
      </div>

      <div
        style="background: rgba(34,197,94,0.1); padding: 15px; border: 1px solid rgba(34,197,94,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #22c55e; font-size: 2rem; margin-bottom: 5px;">
          🗄️
        </div>
        <div style="color: #22c55e; font-weight: 600;">Baza danych</div>
        <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
          Połączona
        </div>
      </div>

      <div
        style="background: rgba(245,158,11,0.1); padding: 15px; border: 1px solid rgba(245,158,11,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #f59e0b; font-size: 2rem; margin-bottom: 5px;">
          ⚠️
        </div>
        <div style="color: #f59e0b; font-weight: 600;">API Responses</div>
        <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
          Wolne (2.3s avg)
        </div>
      </div>
    </div>

    <div
      style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;"
    >
      <CyberpunkButton
        text="🔄 Odśwież status"
        variant="primary"
        size="sm"
        onclick="refreshSystemStatus()"
      />
      <CyberpunkButton
        text="📊 Szczegółowe metryki"
        variant="outline"
        size="sm"
        onclick="showDetailedMetrics()"
      />
      <CyberpunkButton
        text="⚡ Restart serwisów"
        variant="warning"
        size="sm"
        onclick="showRestartModal()"
      />
    </div>
  </GlassPanel>

  <!-- Performance Metrics -->
  <GlassPanel title="📈 Metryki wydajności" variant="default" padding="lg">
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
      <!-- CPU Usage -->
      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px;"
      >
        <h4 style="color: #00d9ff; margin-bottom: 15px;">💻 Użycie CPU</h4>
        <div
          style="background: rgba(0,0,0,0.6); height: 8px; border-radius: 4px; overflow: hidden; margin-bottom: 10px;"
        >
          <div
            style="background: linear-gradient(90deg, #22c55e, #f59e0b); height: 100%; width: 67%; transition: width 0.3s ease;"
          >
          </div>
        </div>
        <div
          style="display: flex; justify-content: space-between; color: rgba(255,255,255,0.8); font-size: 0.9rem;"
        >
          <span>Aktualne: <strong id="cpuCurrent">67%</strong></span>
          <span>Średnie: <strong id="cpuAverage">45%</strong></span>
        </div>
      </div>

      <!-- Memory Usage -->
      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px;"
      >
        <h4 style="color: #00d9ff; margin-bottom: 15px;">🧠 Użycie pamięci</h4>
        <div
          style="background: rgba(0,0,0,0.6); height: 8px; border-radius: 4px; overflow: hidden; margin-bottom: 10px;"
        >
          <div
            style="background: linear-gradient(90deg, #22c55e, #ef4444); height: 100%; width: 82%; transition: width 0.3s ease;"
          >
          </div>
        </div>
        <div
          style="display: flex; justify-content: space-between; color: rgba(255,255,255,0.8); font-size: 0.9rem;"
        >
          <span>Wykorzystane: <strong id="memoryUsed">3.2GB / 4GB</strong></span
          >
          <span>Dostępne: <strong id="memoryFree">0.8GB</strong></span>
        </div>
      </div>
    </div>

    <!-- Network Traffic -->
    <div
      style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; margin-top: 20px;"
    >
      <h4 style="color: #00d9ff; margin-bottom: 15px;">
        🌐 Ruch sieciowy (ostatnia godzina)
      </h4>
      <div
        style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; text-align: center;"
      >
        <div>
          <div
            style="color: #22c55e; font-size: 1.5rem; font-weight: 600;"
            id="requests"
          >
            1,247
          </div>
          <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
            Żądania
          </div>
        </div>
        <div>
          <div
            style="color: #f59e0b; font-size: 1.5rem; font-weight: 600;"
            id="errors"
          >
            23
          </div>
          <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
            Błędy
          </div>
        </div>
        <div>
          <div
            style="color: #00d9ff; font-size: 1.5rem; font-weight: 600;"
            id="responseTime"
          >
            1.8s
          </div>
          <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
            Śr. czas odpowiedzi
          </div>
        </div>
      </div>
    </div>
  </GlassPanel>

  <!-- System Logs -->
  <GlassPanel title="📝 Logi systemowe" variant="default" padding="lg">
    <div
      style="display: flex; gap: 15px; margin-bottom: 20px; align-items: center;"
    >
      <select
        id="logLevel"
        style="padding: 8px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.3); border-radius: 4px; color: white;"
      >
        <option value="all">Wszystkie logi</option>
        <option value="error">Tylko błędy</option>
        <option value="warning">Ostrzeżenia</option>
        <option value="info">Informacje</option>
      </select>

      <input
        type="text"
        id="logSearch"
        placeholder="Szukaj w logach..."
        style="flex: 1; padding: 8px; background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.3); border-radius: 4px; color: white;"
      />

      <CyberpunkButton
        text="🔍 Filtruj"
        variant="outline"
        size="sm"
        onclick="filterLogs()"
      />
      <CyberpunkButton
        text="📥 Pobierz logi"
        variant="outline"
        size="sm"
        onclick="downloadLogs()"
      />
      <CyberpunkButton
        text="🔄 Odśwież"
        variant="primary"
        size="sm"
        onclick="refreshLogs()"
      />
    </div>

    <div
      id="logContainer"
      style="background: rgba(0,0,0,0.6); border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; height: 400px; overflow-y: auto; padding: 15px; font-family: 'Courier New', monospace; font-size: 0.85rem;"
    >
      <!-- Logs will be populated here -->
    </div>
  </GlassPanel>

  <!-- Quick Actions -->
  <GlassPanel title="⚡ Szybkie akcje" variant="warning" padding="lg">
    <div
      style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;"
    >
      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #22c55e; font-size: 2rem; margin-bottom: 10px;">
          🔧
        </div>
        <h4 style="color: #22c55e; margin-bottom: 10px;">Diagnostyka</h4>
        <p
          style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;"
        >
          Uruchom pełną diagnostykę systemu
        </p>
        <CyberpunkButton
          text="Uruchom test"
          variant="success"
          size="sm"
          onclick="runDiagnostics()"
        />
      </div>

      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #f59e0b; font-size: 2rem; margin-bottom: 10px;">
          🧹
        </div>
        <h4 style="color: #f59e0b; margin-bottom: 10px;">Czyszczenie cache</h4>
        <p
          style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;"
        >
          Wyczyść cache i pliki tymczasowe
        </p>
        <CyberpunkButton
          text="Wyczyść cache"
          variant="warning"
          size="sm"
          onclick="clearCache()"
        />
      </div>

      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #00d9ff; font-size: 2rem; margin-bottom: 10px;">
          💾
        </div>
        <h4 style="color: #00d9ff; margin-bottom: 10px;">Backup</h4>
        <p
          style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;"
        >
          Utwórz kopię zapasową systemu
        </p>
        <CyberpunkButton
          text="Utwórz backup"
          variant="primary"
          size="sm"
          onclick="createBackup()"
        />
      </div>

      <div
        style="background: rgba(0,0,0,0.4); padding: 15px; border: 1px solid rgba(0,217,255,0.3); border-radius: 8px; text-align: center;"
      >
        <div style="color: #ef4444; font-size: 2rem; margin-bottom: 10px;">
          ⚠️
        </div>
        <h4 style="color: #ef4444; margin-bottom: 10px;">Tryb maintenance</h4>
        <p
          style="color: rgba(255,255,255,0.7); margin-bottom: 15px; font-size: 0.9rem;"
        >
          Włącz tryb konserwacji
        </p>
        <CyberpunkButton
          text="Włącz maintenance"
          variant="danger"
          size="sm"
          onclick="enableMaintenance()"
        />
      </div>
    </div>
  </GlassPanel>

  <script>
    let autoRefresh = true;
    let refreshInterval;

    // Sample log data
    const sampleLogs = [
      {
        time: "2025-09-23 22:36:15",
        level: "info",
        message: "MyBonzo system started successfully",
        component: "core",
      },
      {
        time: "2025-09-23 22:36:18",
        level: "info",
        message: "Database connection established",
        component: "database",
      },
      {
        time: "2025-09-23 22:36:22",
        level: "info",
        message: "All workers initialized",
        component: "workers",
      },
      {
        time: "2025-09-23 22:35:45",
        level: "warning",
        message: "High memory usage detected (>80%)",
        component: "system",
      },
      {
        time: "2025-09-23 22:35:12",
        level: "info",
        message: "User authentication successful",
        component: "auth",
      },
      {
        time: "2025-09-23 22:34:58",
        level: "error",
        message: "Failed to connect to external API",
        component: "api",
      },
      {
        time: "2025-09-23 22:34:45",
        level: "info",
        message: "Cache cleared successfully",
        component: "cache",
      },
      {
        time: "2025-09-23 22:34:23",
        level: "warning",
        message: "Slow query detected (>2s)",
        component: "database",
      },
      {
        time: "2025-09-23 22:34:01",
        level: "info",
        message: "Backup completed successfully",
        component: "backup",
      },
      {
        time: "2025-09-23 22:33:47",
        level: "info",
        message: "New user registered",
        component: "users",
      },
    ];

    function renderLogs() {
      const container = document.getElementById("logContainer");
      const levelFilter = document.getElementById("logLevel").value;
      const searchTerm = document
        .getElementById("logSearch")
        .value.toLowerCase();

      let filteredLogs = sampleLogs;

      if (levelFilter !== "all") {
        filteredLogs = filteredLogs.filter((log) => log.level === levelFilter);
      }

      if (searchTerm) {
        filteredLogs = filteredLogs.filter(
          (log) =>
            log.message.toLowerCase().includes(searchTerm) ||
            log.component.toLowerCase().includes(searchTerm)
        );
      }

      container.innerHTML = filteredLogs
        .map((log) => {
          let color = "#ffffff";
          switch (log.level) {
            case "error":
              color = "#ef4444";
              break;
            case "warning":
              color = "#f59e0b";
              break;
            case "info":
              color = "#00d9ff";
              break;
          }

          return `
                    <div style="margin-bottom: 8px; padding: 8px; background: rgba(0,0,0,0.3); border-radius: 4px; border-left: 3px solid ${color};">
                        <span style="color: rgba(255,255,255,0.6);">[${log.time}]</span>
                        <span style="color: ${color}; font-weight: 600; text-transform: uppercase;">[${log.level}]</span>
                        <span style="color: rgba(0,217,255,0.8);">[${log.component}]</span>
                        <span style="color: rgba(255,255,255,0.9);">${log.message}</span>
                    </div>
                `;
        })
        .join("");
    }

    function refreshSystemStatus() {
      // Simulate refreshing system status
      const statuses = ["✅", "⚠️", "❌"];
      const colors = ["#22c55e", "#f59e0b", "#ef4444"];

      // Add some visual feedback
      const button = event.target;
      button.textContent = "🔄 Odświeżanie...";
      button.style.opacity = "0.6";

      setTimeout(() => {
        button.textContent = "🔄 Odśwież status";
        button.style.opacity = "1";
        showNotification("System status odświeżony", "success");
      }, 2000);
    }

    function showDetailedMetrics() {
      alert("🚧 Panel szczegółowych metryk w przygotowaniu...");
    }

    function showRestartModal() {
      if (confirm("Czy na pewno chcesz zrestartować serwisy systemu?")) {
        alert("🔄 Restart serwisów zostanie wykonany w trybie bezpiecznym...");
      }
    }

    function filterLogs() {
      renderLogs();
    }

    function downloadLogs() {
      const logs = sampleLogs
        .map(
          (log) =>
            `${log.time} [${log.level.toUpperCase()}] [${log.component}] ${log.message}`
        )
        .join("\n");

      const blob = new Blob([logs], { type: "text/plain" });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `mybonzo-logs-${new Date().toISOString().split("T")[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    }

    function refreshLogs() {
      const button = event.target;
      button.textContent = "🔄 Odświeżanie...";
      button.style.opacity = "0.6";

      setTimeout(() => {
        renderLogs();
        button.textContent = "🔄 Odśwież";
        button.style.opacity = "1";
        showNotification("Logi odświeżone", "info");
      }, 1500);
    }

    function runDiagnostics() {
      alert(
        "🔧 Uruchamianie pełnej diagnostyki systemu...\n\n✅ Test CPU\n✅ Test pamięci\n✅ Test połączenia z bazą\n✅ Test API endpoints\n\nWszystkie testy zakończone pomyślnie!"
      );
    }

    function clearCache() {
      if (confirm("Czy na pewno chcesz wyczyścić cache systemu?")) {
        alert("🧹 Cache został wyczyszczony pomyślnie!");
      }
    }

    function createBackup() {
      alert(
        "💾 Tworzenie kopii zapasowej...\n\nBackup zostanie utworzony w ciągu 5-10 minut."
      );
    }

    function enableMaintenance() {
      if (
        confirm(
          "⚠️ Czy na pewno chcesz włączyć tryb konserwacji?\n\nUżytkownicy będą widzieć stronę maintenance."
        )
      ) {
        alert("🔧 Tryb konserwacji został włączony.");
      }
    }

    function showNotification(message, type) {
      const notification = document.createElement("div");
      notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                background: ${type === "success" ? "rgba(34,197,94,0.9)" : type === "error" ? "rgba(239,68,68,0.9)" : "rgba(0,217,255,0.9)"};
                color: white;
                border-radius: 8px;
                z-index: 1000;
                font-weight: 600;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.transform = "translateX(0)";
      }, 100);

      setTimeout(() => {
        notification.style.transform = "translateX(100%)";
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    // Auto-refresh functionality
    function startAutoRefresh() {
      if (autoRefresh) {
        refreshInterval = setInterval(() => {
          // Simulate updating metrics
          const cpuElement = document.getElementById("cpuCurrent");
          const memoryElement = document.getElementById("memoryUsed");

          if (cpuElement) {
            const newCpu = Math.floor(Math.random() * 40) + 30; // 30-70%
            cpuElement.textContent = newCpu + "%";
          }
        }, 10000); // Update every 10 seconds
      }
    }

    // Initialize page
    document.addEventListener("DOMContentLoaded", function () {
      renderLogs();
      startAutoRefresh();

      // Add search functionality
      document
        .getElementById("logSearch")
        .addEventListener("keyup", function (e) {
          if (e.key === "Enter") {
            filterLogs();
          }
        });
    });

    // Cleanup on page unload
    window.addEventListener("beforeunload", function () {
      if (refreshInterval) {
        clearInterval(refreshInterval);
      }
    });
  </script>

  <style>
    /* Custom scrollbar for log container */
    #logContainer::-webkit-scrollbar {
      width: 8px;
    }

    #logContainer::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 4px;
    }

    #logContainer::-webkit-scrollbar-thumb {
      background: rgba(0, 217, 255, 0.5);
      border-radius: 4px;
    }

    #logContainer::-webkit-scrollbar-thumb:hover {
      background: rgba(0, 217, 255, 0.7);
    }

    /* Smooth transitions for metrics */
    .metric-bar {
      transition: width 0.5s ease-in-out;
    }
  </style>
</UniversalPageLayout>
