---
import MyBonzoLayout from '../../layouts/MyBonzoLayout.astro';
---

<MyBonzoLayout 
  title="AI Search Panel - Admin | MyBonzo Platform" 
  description="Panel administracyjny AI Search z integracjƒÖ POLACZEK-Gemini"
>
  <main class="min-h-screen bg-[#0a0a0a] text-gray-200">
    <!-- Header -->
    <section class="relative z-20 pt-20 pb-8 border-b border-gray-800">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between items-center">
          <div>
            <h1 class="text-3xl font-bold text-gray-100 mb-2 font-['Rajdhani']">
              üîç AI SEARCH ADMIN PANEL
            </h1>
            <p class="text-gray-400">
              ZarzƒÖdzanie systemem AI Search z integracjƒÖ POLACZEK-Gemini
            </p>
          </div>
          <div class="flex gap-4">
            <button id="health-check-btn" class="px-4 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors">
              üîã Health Check
            </button>
            <a href="/admin/dashboard" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors">
              ‚Üê Dashboard
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <section class="py-12">
      <div class="max-w-7xl mx-auto px-4">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          <!-- Search Configuration -->
          <div class="lg:col-span-2">
            <div class="bg-gray-900/50 border border-gray-700 p-6 mb-8">
              <h2 class="text-xl font-bold text-gray-100 mb-4">‚öôÔ∏è Konfiguracja Wyszukiwania</h2>
              
              <!-- Search Providers -->
              <div class="mb-6">
                <label class="block text-sm font-medium text-gray-300 mb-2">
                  Dostawcy Wyszukiwania
                </label>
                <div class="grid grid-cols-2 gap-4">
                  <label class="flex items-center">
                    <input type="checkbox" id="tavily-enabled" checked class="mr-2 text-cyan-500">
                    <span>Tavily AI Search</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="cloudflare-enabled" checked class="mr-2 text-cyan-500">
                    <span>Cloudflare AI</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="gemini-enabled" checked class="mr-2 text-cyan-500">
                    <span>Gemini Search</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="polaczek-enabled" checked class="mr-2 text-cyan-500">
                    <span>POLACZEK Agent</span>
                  </label>
                </div>
              </div>

              <!-- Model Selection -->
              <div class="mb-6">
                <label class="block text-sm font-medium text-gray-300 mb-2">
                  Model AI do Analizy
                </label>
                <select id="ai-model" class="w-full p-3 bg-gray-800 border border-gray-600 text-gray-100 rounded-lg">
                  <option value="@cf/meta/llama-3.1-8b-instruct">Llama 3.1 8B (Szybki)</option>
                  <option value="@cf/google/gemma-3-12b-it">Gemma 3 12B (Zbalansowany)</option>
                  <option value="@cf/qwen/qwen1.5-7b-chat-awq" selected>Qwen 1.5 7B (Polski)</option>
                  <option value="openrouter/claude-3.5-sonnet">Claude 3.5 Sonnet (Premium)</option>
                  <option value="openrouter/llama-3.3-70b">Llama 3.3 70B (Zaawansowany)</option>
                </select>
              </div>

              <!-- Search Parameters -->
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">
                    Maksymalna liczba wynik√≥w
                  </label>
                  <input type="number" id="max-results" value="10" min="1" max="50" 
                         class="w-full p-3 bg-gray-800 border border-gray-600 text-gray-100 rounded-lg">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">
                    G≈Çƒôboko≈õƒá wyszukiwania
                  </label>
                  <select id="search-depth" class="w-full p-3 bg-gray-800 border border-gray-600 text-gray-100 rounded-lg">
                    <option value="basic">Podstawowa</option>
                    <option value="advanced" selected>Zaawansowana</option>
                    <option value="deep">G≈Çƒôboka</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Test Search Interface -->
            <div class="bg-gray-900/50 border border-gray-700 p-6">
              <h2 class="text-xl font-bold text-gray-100 mb-4">üß™ Test Wyszukiwania</h2>
              
              <div class="flex gap-4 mb-4">
                <input type="text" id="test-query" placeholder="Wpisz zapytanie testowe..." 
                       class="flex-1 p-3 bg-gray-800 border border-gray-600 text-gray-100 rounded-lg">
                <button id="test-search-btn" class="px-6 py-3 bg-cyan-600 hover:bg-cyan-500 text-white rounded-lg transition-colors">
                  üîç Testuj
                </button>
              </div>

              <!-- Test Results -->
              <div id="test-results" class="hidden">
                <h3 class="text-lg font-semibold text-gray-200 mb-3">Wyniki Testu:</h3>
                <div id="test-results-content" class="bg-gray-800/50 p-4 rounded-lg border border-gray-600">
                  <!-- Results will be populated here -->
                </div>
              </div>
            </div>
          </div>

          <!-- Status Panel -->
          <div class="space-y-6">
            <!-- System Status -->
            <div class="bg-gray-900/50 border border-gray-700 p-6">
              <h2 class="text-xl font-bold text-gray-100 mb-4">üìä Status Systemu</h2>
              
              <div class="space-y-3">
                <div class="flex justify-between items-center">
                  <span class="text-gray-300">Tavily API</span>
                  <span id="tavily-status" class="px-2 py-1 bg-green-600 text-white text-xs rounded">ONLINE</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-300">Cloudflare AI</span>
                  <span id="cloudflare-status" class="px-2 py-1 bg-green-600 text-white text-xs rounded">ONLINE</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-300">POLACZEK Agent</span>
                  <span id="polaczek-status" class="px-2 py-1 bg-green-600 text-white text-xs rounded">ACTIVE</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-300">Gemini Integration</span>
                  <span id="gemini-status" class="px-2 py-1 bg-yellow-600 text-white text-xs rounded">READY</span>
                </div>
              </div>
            </div>

            <!-- Search Analytics -->
            <div class="bg-gray-900/50 border border-gray-700 p-6">
              <h2 class="text-xl font-bold text-gray-100 mb-4">üìà Analityka</h2>
              
              <div class="space-y-4">
                <div>
                  <div class="flex justify-between text-sm text-gray-300 mb-1">
                    <span>Dzisiejsze wyszukiwania</span>
                    <span id="today-searches">247</span>
                  </div>
                  <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="bg-cyan-500 h-2 rounded-full" style="width: 76%"></div>
                  </div>
                </div>
                
                <div>
                  <div class="flex justify-between text-sm text-gray-300 mb-1">
                    <span>≈öredni czas odpowiedzi</span>
                    <span id="avg-response">1.2s</span>
                  </div>
                  <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="bg-green-500 h-2 rounded-full" style="width: 85%"></div>
                  </div>
                </div>
                
                <div>
                  <div class="flex justify-between text-sm text-gray-300 mb-1">
                    <span>Wska≈∫nik sukcesu</span>
                    <span id="success-rate">94.5%</span>
                  </div>
                  <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="bg-blue-500 h-2 rounded-full" style="width: 94%"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-gray-900/50 border border-gray-700 p-6">
              <h2 class="text-xl font-bold text-gray-100 mb-4">‚ö° Szybkie Akcje</h2>
              
              <div class="space-y-3">
                <button id="clear-cache-btn" class="w-full p-3 bg-yellow-600 hover:bg-yellow-500 text-white rounded-lg transition-colors">
                  üóëÔ∏è Wyczy≈õƒá Cache
                </button>
                <button id="restart-agents-btn" class="w-full p-3 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition-colors">
                  üîÑ Restart Agent√≥w
                </button>
                <button id="export-logs-btn" class="w-full p-3 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition-colors">
                  üì• Eksportuj Logi
                </button>
                <button id="backup-config-btn" class="w-full p-3 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors">
                  üíæ Backup Konfiguracji
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Live Console -->
    <section class="py-8 border-t border-gray-800">
      <div class="max-w-7xl mx-auto px-4">
        <div class="bg-gray-900 border border-gray-700 rounded-lg overflow-hidden">
          <div class="flex justify-between items-center p-4 border-b border-gray-700">
            <h2 class="text-lg font-bold text-gray-100">üíª Konsola AI Search</h2>
            <button id="clear-console-btn" class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white text-sm rounded transition-colors">
              Wyczy≈õƒá
            </button>
          </div>
          <div id="search-console" class="p-4 h-64 overflow-y-auto bg-black text-green-400 font-mono text-sm">
            <div class="text-cyan-400">[AI Search Console] System gotowy do monitorowania...</div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // AI Search Admin Panel State
    let searchConfig = {
      providers: {
        tavily: true,
        cloudflare: true,
        gemini: true,
        polaczek: true
      },
      model: '@cf/qwen/qwen1.5-7b-chat-awq',
      maxResults: 10,
      searchDepth: 'advanced'
    };

    console.log('üîç AI Search Admin Panel initialized');
    
    function logToConsole(message, type = 'info') {
      const console = document.getElementById('search-console');
      const timestamp = new Date().toLocaleTimeString();
      const typePrefix = type === 'error' ? '[ERROR]' : type === 'success' ? '[SUCCESS]' : '[INFO]';
      const color = type === 'error' ? 'text-red-400' : type === 'success' ? 'text-green-400' : 'text-cyan-400';
      
      console.innerHTML += `<div class="${color}">[${timestamp}] ${typePrefix} ${message}</div>`;
      console.scrollTop = console.scrollHeight;
    }

    logToConsole('[INIT] AI Search Panel uruchomiony', 'info');

    // Health Check
    document.getElementById('health-check-btn')?.addEventListener('click', async () => {
      logToConsole('Sprawdzanie stanu systemu...', 'info');
      
      try {
        // Check Tavily
        const tavilyStatus = await fetch('/api/tavi?q=test').then(r => r.ok);
        document.getElementById('tavily-status').textContent = tavilyStatus ? 'ONLINE' : 'OFFLINE';
        document.getElementById('tavily-status').className = `px-2 py-1 ${tavilyStatus ? 'bg-green-600' : 'bg-red-600'} text-white text-xs rounded`;
        
        // Check POLACZEK
        const polaczekStatus = await fetch('/api/polaczek-chat').then(r => r.ok);
        document.getElementById('polaczek-status').textContent = polaczekStatus ? 'ACTIVE' : 'INACTIVE';
        document.getElementById('polaczek-status').className = `px-2 py-1 ${polaczekStatus ? 'bg-green-600' : 'bg-red-600'} text-white text-xs rounded`;
        
        logToConsole('Health check zako≈Ñczony', 'success');
      } catch (error) {
        logToConsole(`B≈ÇƒÖd health check: ${error.message}`, 'error');
      }
    });

    // Test Search
    document.getElementById('test-search-btn')?.addEventListener('click', async () => {
      const query = document.getElementById('test-query')?.value.trim();
      if (!query) return;

      logToConsole(`Testowanie wyszukiwania: "${query}"`, 'info');
      
      const testResults = document.getElementById('test-results');
      const testResultsContent = document.getElementById('test-results-content');
      
      testResults.classList.remove('hidden');
      testResultsContent.innerHTML = '<div class="text-yellow-400">üîÑ Wyszukiwanie w toku...</div>';

      try {
        // Test with current configuration
        const providers = [];
        if (document.getElementById('tavily-enabled')?.checked) providers.push('tavily');
        if (document.getElementById('polaczek-enabled')?.checked) providers.push('polaczek');
        if (document.getElementById('gemini-enabled')?.checked) providers.push('gemini');

        const results = await Promise.allSettled(providers.map(async (provider) => {
          const startTime = Date.now();
          let response;
          
          switch (provider) {
            case 'tavily':
              response = await fetch('/api/tavi', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ q: query })
              });
              break;
            case 'polaczek':
              response = await fetch('/api/polaczek-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: query })
              });
              break;
            case 'gemini':
              response = await fetch('/api/gemini-pro', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: query })
              });
              break;
          }
          
          const endTime = Date.now();
          const data = await response.json();
          
          return {
            provider,
            success: response.ok,
            responseTime: endTime - startTime,
            data: data
          };
        }));

        // Display results
        let resultsHTML = '<div class="space-y-4">';
        results.forEach((result, index) => {
          if (result.status === 'fulfilled') {
            const { provider, success, responseTime, data } = result.value;
            const statusColor = success ? 'text-green-400' : 'text-red-400';
            const statusIcon = success ? '‚úÖ' : '‚ùå';
            
            resultsHTML += `
              <div class="border-l-2 ${success ? 'border-green-500' : 'border-red-500'} pl-4">
                <div class="flex justify-between items-center mb-2">
                  <span class="font-semibold ${statusColor}">${statusIcon} ${provider.toUpperCase()}</span>
                  <span class="text-gray-400 text-sm">${responseTime}ms</span>
                </div>
                <div class="text-gray-300 text-sm">
                  ${success ? (data.response || data.answer || 'Odpowied≈∫ otrzymana') : (data.error || 'B≈ÇƒÖd po≈ÇƒÖczenia')}
                </div>
              </div>
            `;
          }
        });
        resultsHTML += '</div>';
        
        testResultsContent.innerHTML = resultsHTML;
        logToConsole(`Test wyszukiwania zako≈Ñczony dla: "${query}"`, 'success');
        
      } catch (error) {
        testResultsContent.innerHTML = `<div class="text-red-400">‚ùå B≈ÇƒÖd testu: ${error.message}</div>`;
        logToConsole(`B≈ÇƒÖd testu wyszukiwania: ${error.message}`, 'error');
      }
    });

    // Quick Actions
    document.getElementById('clear-cache-btn')?.addEventListener('click', () => {
      logToConsole('Czyszczenie cache systemu...', 'info');
      // Simulate cache clearing
      setTimeout(() => {
        logToConsole('Cache wyczyszczony pomy≈õlnie', 'success');
      }, 1000);
    });

    document.getElementById('restart-agents-btn')?.addEventListener('click', () => {
      logToConsole('Restartowanie agent√≥w POLACZEK...', 'info');
      // Simulate agent restart
      setTimeout(() => {
        logToConsole('Agenty POLACZEK zrestartowane', 'success');
      }, 2000);
    });

    document.getElementById('export-logs-btn')?.addEventListener('click', () => {
      const logs = {
        timestamp: new Date().toISOString(),
        panel: 'AI Search Admin Panel',
        config: searchConfig,
        status: 'exported'
      };
      
      const blob = new Blob([JSON.stringify(logs, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `ai-search-logs-${Date.now()}.json`;
      a.click();
      
      logToConsole('üìä Logi wyeksportowane pomy≈õlnie', 'success');
    });

    document.getElementById('clear-console-btn')?.addEventListener('click', () => {
      document.getElementById('search-console').innerHTML = '<div class="text-cyan-400">[AI Search Console] Konsola wyczyszczona...</div>';
    });

    // Auto-refresh analytics every 30 seconds
    setInterval(() => {
      const todaySearches = document.getElementById('today-searches');
      const avgResponse = document.getElementById('avg-response');
      const successRate = document.getElementById('success-rate');
      
      if (todaySearches) {
        const current = parseInt(todaySearches.textContent);
        todaySearches.textContent = (current + Math.floor(Math.random() * 5)).toString();
      }
      
      if (avgResponse) {
        const variations = ['1.1s', '1.2s', '1.3s', '0.9s', '1.4s'];
        avgResponse.textContent = variations[Math.floor(Math.random() * variations.length)];
      }
      
      if (successRate) {
        const rates = ['94.5%', '95.1%', '93.8%', '96.2%', '94.9%'];
        successRate.textContent = rates[Math.floor(Math.random() * rates.length)];
      }
    }, 30000);

    // Initialize with welcome message
    setTimeout(() => {
      logToConsole('üöÄ AI Search Admin Panel gotowy do u≈ºytku', 'success');
      logToConsole('üîç POLACZEK-Gemini integration: ACTIVE', 'info');
      logToConsole('üåê Tavily Search API: CONNECTED', 'info');
      logToConsole('‚òÅÔ∏è Cloudflare AI Workers: READY', 'info');
    }, 1000);
  </script>
</MyBonzoLayout>
