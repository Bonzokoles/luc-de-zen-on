---
// POLACZEK Agents Management Panel
---

<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>⚙️ POLACZEK Agents Management</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
      color: white;
      min-height: 100vh;
    }

    .header {
      background: rgba(0, 0, 0, 0.4);
      padding: 2rem;
      text-align: center;
      backdrop-filter: blur(15px);
      border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }

    .header h1 {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .header p {
      color: rgba(255, 255, 255, 0.8);
      font-size: 1.1rem;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    .dashboard-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .panel {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 2rem;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .panel h2 {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .agents-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .agent-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .agent-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
      border-color: rgba(255, 255, 255, 0.2);
    }

    .agent-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .agent-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .agent-icon {
      font-size: 2rem;
    }

    .agent-details h3 {
      font-size: 1.2rem;
      margin-bottom: 0.3rem;
    }

    .agent-role {
      color: rgba(255, 255, 255, 0.7);
      font-size: 0.9rem;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
    }

    .status-active { background: #4ecdc4; }
    .status-busy { background: #ffa726; }
    .status-error { background: #ff6b6b; }
    .status-idle { background: #95a5a6; }

    .agent-metrics {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin: 1rem 0;
    }

    .metric {
      text-align: center;
      padding: 0.8rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
    }

    .metric-value {
      font-size: 1.3rem;
      font-weight: bold;
      color: #4ecdc4;
    }

    .metric-label {
      font-size: 0.8rem;
      color: rgba(255, 255, 255, 0.7);
      margin-top: 0.3rem;
    }

    .agent-actions {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .btn {
      padding: 0.6rem 1.2rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
      font-size: 0.9rem;
      transition: all 0.2s;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }

    .btn-primary {
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
      color: white;
    }

    .btn-secondary {
      background: rgba(255, 255, 255, 0.1);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-danger {
      background: linear-gradient(45deg, #ff6b6b, #ff8a65);
      color: white;
    }

    .btn:hover {
      transform: scale(1.05);
    }

    .system-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }

    .stat-card {
      background: rgba(255, 255, 255, 0.05);
      padding: 1.5rem;
      border-radius: 10px;
      text-align: center;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: bold;
      color: #4ecdc4;
      margin-bottom: 0.5rem;
    }

    .console-panel {
      background: #1a1a1a;
      border-radius: 10px;
      padding: 1rem;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
      height: 300px;
      overflow-y: auto;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .console-line {
      margin-bottom: 0.5rem;
      padding: 0.3rem;
      border-radius: 3px;
    }

    .console-info { color: #4ecdc4; }
    .console-warning { color: #ffa726; background: rgba(255, 167, 38, 0.1); }
    .console-error { color: #ff6b6b; background: rgba(255, 107, 107, 0.1); }
    .console-success { color: #96ceb4; background: rgba(150, 206, 180, 0.1); }

    .quick-actions {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .quick-btn {
      padding: 1rem 2rem;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      color: white;
      text-decoration: none;
      transition: all 0.3s;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .quick-btn:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }

    .performance-chart {
      height: 200px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 10px;
      padding: 1rem;
      display: flex;
      align-items: end;
      gap: 10px;
    }

    .chart-bar {
      flex: 1;
      background: linear-gradient(to top, #ff6b6b, #4ecdc4);
      border-radius: 3px 3px 0 0;
      min-height: 20px;
      opacity: 0.8;
      transition: opacity 0.3s;
    }

    .chart-bar:hover {
      opacity: 1;
    }

    @media (max-width: 768px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      
      .agents-grid {
        grid-template-columns: 1fr;
      }
      
      .quick-actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>⚙️ POLACZEK Agents Management</h1>
    <p>Centrum zarządzania systemem agentów AI z przeglądarką i tłumaczem</p>
  </div>

  <div class="container">
    <!-- Quick Actions -->
    <div class="quick-actions">
      <a href="/ai-browser" class="quick-btn">
        🔍 Otwórz Przeglądarkę AI
      </a>
      <a href="/ai-search" class="quick-btn">
        🎯 AI Search Engine
      </a>
      <a href="#" class="quick-btn" onclick="runSystemDiagnostics()">
        🔧 Diagnostyka Systemu
      </a>
      <a href="#" class="quick-btn" onclick="exportLogs()">
        📋 Eksport Logów
      </a>
    </div>

    <!-- Dashboard Grid -->
    <div class="dashboard-grid">
      <!-- System Statistics -->
      <div class="panel">
        <h2>📊 Statystyki Systemu</h2>
        <div class="system-stats">
          <div class="stat-card">
            <div class="stat-value" id="totalQueries">1,247</div>
            <div>Zapytania Dzisiaj</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="activeAgents">4</div>
            <div>Aktywne Agenty</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="avgResponseTime">1.2s</div>
            <div>Śr. Czas Odpowiedzi</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="successRate">96.8%</div>
            <div>Wskaźnik Sukcesu</div>
          </div>
        </div>
      </div>

      <!-- Performance Chart -->
      <div class="panel">
        <h2>📈 Wydajność Agentów</h2>
        <div class="performance-chart" id="performanceChart">
          <!-- Chart bars will be generated by JavaScript -->
        </div>
      </div>
    </div>

    <!-- Agents Grid -->
    <div class="agents-grid">
      <!-- POLACZEK_D - Dyrektor -->
      <div class="agent-card" id="agent-polaczek-d">
        <div class="agent-header">
          <div class="agent-info">
            <span class="agent-icon">🎯</span>
            <div class="agent-details">
              <h3>POLACZEK_D</h3>
              <div class="agent-role">Dyrektor & Orchestrator</div>
            </div>
          </div>
          <span class="status-indicator status-active" id="status-polaczek-d"></span>
        </div>
        
        <div class="agent-metrics">
          <div class="metric">
            <div class="metric-value">342</div>
            <div class="metric-label">Zadania</div>
          </div>
          <div class="metric">
            <div class="metric-value">98.5%</div>
            <div class="metric-label">Sukces</div>
          </div>
        </div>

        <div class="agent-actions">
          <button class="btn btn-primary" onclick="testAgent('POLACZEK_D')">Test</button>
          <button class="btn btn-secondary" onclick="configureAgent('POLACZEK_D')">Konfiguruj</button>
          <button class="btn btn-danger" onclick="restartAgent('POLACZEK_D')">Restart</button>
        </div>
      </div>

      <!-- POLACZEK_T - Tłumacz -->
      <div class="agent-card" id="agent-polaczek-t">
        <div class="agent-header">
          <div class="agent-info">
            <span class="agent-icon">🔄</span>
            <div class="agent-details">
              <h3>POLACZEK_T</h3>
              <div class="agent-role">Tłumacz & Lokalizator</div>
            </div>
          </div>
          <span class="status-indicator status-active" id="status-polaczek-t"></span>
        </div>
        
        <div class="agent-metrics">
          <div class="metric">
            <div class="metric-value">1,829</div>
            <div class="metric-label">Tłumaczenia</div>
          </div>
          <div class="metric">
            <div class="metric-value">0.8s</div>
            <div class="metric-label">Śr. Czas</div>
          </div>
        </div>

        <div class="agent-actions">
          <button class="btn btn-primary" onclick="testTranslation()">Test Tłumaczenia</button>
          <button class="btn btn-secondary" onclick="viewTranslationHistory()">Historia</button>
        </div>
      </div>

      <!-- POLACZEK_B - Bibliotekarz -->
      <div class="agent-card" id="agent-polaczek-b">
        <div class="agent-header">
          <div class="agent-info">
            <span class="agent-icon">📚</span>
            <div class="agent-details">
              <h3>POLACZEK_B</h3>
              <div class="agent-role">Bibliotekarz & Knowledge Manager</div>
            </div>
          </div>
          <span class="status-indicator status-busy" id="status-polaczek-b"></span>
        </div>
        
        <div class="agent-metrics">
          <div class="metric">
            <div class="metric-value">15,743</div>
            <div class="metric-label">Dokumenty</div>
          </div>
          <div class="metric">
            <div class="metric-value">89.2%</div>
            <div class="metric-label">Indeksacja</div>
          </div>
        </div>

        <div class="agent-actions">
          <button class="btn btn-primary" onclick="testAgent('POLACZEK_B')">Test</button>
          <button class="btn btn-secondary" onclick="viewKnowledgeBase()">Baza Wiedzy</button>
        </div>
      </div>

      <!-- POLACZEK_M1 - Manager -->
      <div class="agent-card" id="agent-polaczek-m1">
        <div class="agent-header">
          <div class="agent-info">
            <span class="agent-icon">⚙️</span>
            <div class="agent-details">
              <h3>POLACZEK_M1</h3>
              <div class="agent-role">Manager & Workflow Coordinator</div>
            </div>
          </div>
          <span class="status-indicator status-active" id="status-polaczek-m1"></span>
        </div>
        
        <div class="agent-metrics">
          <div class="metric">
            <div class="metric-value">45</div>
            <div class="metric-label">Aktywne Workflow</div>
          </div>
          <div class="metric">
            <div class="metric-value">1.4s</div>
            <div class="metric-label">Śr. Koordynacja</div>
          </div>
        </div>

        <div class="agent-actions">
          <button class="btn btn-primary" onclick="testAgent('POLACZEK_M1')">Test</button>
          <button class="btn btn-secondary" onclick="viewWorkflows()">Workflow</button>
        </div>
      </div>
    </div>

    <!-- Console Panel -->
    <div class="panel">
      <h2>🖥️ Konsola Systemu</h2>
      <div class="console-panel" id="systemConsole">
        <div class="console-line console-success">[2025-01-08 14:32:15] POLACZEK System initialized successfully</div>
        <div class="console-line console-info">[2025-01-08 14:32:16] All agents activated and ready</div>
        <div class="console-line console-info">[2025-01-08 14:32:17] AI Browser system online</div>
        <div class="console-line console-success">[2025-01-08 14:35:42] POLACZEK_T: Translation request completed - EN->PL</div>
        <div class="console-line console-info">[2025-01-08 14:37:21] POLACZEK_D: Orchestration task assigned to agents</div>
        <div class="console-line console-warning">[2025-01-08 14:38:05] POLACZEK_B: Knowledge base indexing at 89.2%</div>
        <div class="console-line console-success">[2025-01-08 14:39:12] Search query processed successfully</div>
        <div class="console-line console-info">[2025-01-08 14:40:33] POLACZEK_M1: Workflow optimization completed</div>
      </div>
    </div>
  </div>

  <script>
    // Agent Management Functions
    async function testAgent(agentId) {
      console.log(`Testing agent: ${agentId}`);
      
      const testQueries = {
        'POLACZEK_D': 'Zaplanuj strategię wyszukiwania dla zapytania o AI',
        'POLACZEK_T': 'Hello, translate this to Polish',
        'POLACZEK_B': 'Znajdź dokumentację na temat machine learning',
        'POLACZEK_M1': 'Zoptymalizuj workflow dla systemu tłumaczeń'
      };

      try {
        addConsoleMessage(`Testing ${agentId}...`, 'info');
        
        if (agentId === 'POLACZEK_T') {
          const response = await fetch('/api/polaczek-t', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              text: testQueries[agentId],
              source: 'en',
              target: 'pl'
            })
          });
          
          const result = await response.json();
          if (result.success) {
            addConsoleMessage(`${agentId} test successful: ${result.translated_text}`, 'success');
          } else {
            addConsoleMessage(`${agentId} test failed: ${result.error}`, 'error');
          }
        } else {
          // Test other agents via agents-search API
          const response = await fetch('/api/agents-search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              query: testQueries[agentId],
              agents: [agentId],
              orchestrate: agentId === 'POLACZEK_D'
            })
          });
          
          const result = await response.json();
          if (result.success) {
            addConsoleMessage(`${agentId} test successful`, 'success');
          } else {
            addConsoleMessage(`${agentId} test failed`, 'error');
          }
        }
        
      } catch (error) {
        addConsoleMessage(`${agentId} test error: ${error.message}`, 'error');
      }
    }

    function configureAgent(agentId) {
      window.open(`/admin/agent-config?agent=${agentId}`, '_blank');
    }

    function restartAgent(agentId) {
      if (confirm(`Czy na pewno chcesz zrestartować agenta ${agentId}?`)) {
        addConsoleMessage(`Restarting ${agentId}...`, 'warning');
        
        // Simulate agent restart
        setTimeout(() => {
          updateAgentStatus(agentId, 'active');
          addConsoleMessage(`${agentId} restarted successfully`, 'success');
        }, 2000);
      }
    }

    function testTranslation() {
      const testText = 'Welcome to the POLACZEK AI Browser System!';
      
      fetch('/api/polaczek-t', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: testText,
          source: 'en',
          target: 'pl'
        })
      })
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          alert(`Tłumaczenie testowe:\n\nOryginalny: ${testText}\nTłumaczenie: ${result.translated_text}`);
          addConsoleMessage(`Translation test successful: ${result.translated_text}`, 'success');
        } else {
          addConsoleMessage(`Translation test failed: ${result.error}`, 'error');
        }
      })
      .catch(error => {
        addConsoleMessage(`Translation test error: ${error.message}`, 'error');
      });
    }

    function updateAgentStatus(agentId, status) {
      const statusElement = document.getElementById(`status-${agentId.toLowerCase().replace('_', '-')}`);
      if (statusElement) {
        statusElement.className = `status-indicator status-${status}`;
      }
    }

    function addConsoleMessage(message, type = 'info') {
      const console = document.getElementById('systemConsole');
      const timestamp = new Date().toLocaleString('pl-PL');
      const line = document.createElement('div');
      line.className = `console-line console-${type}`;
      line.textContent = `[${timestamp}] ${message}`;
      
      console.appendChild(line);
      console.scrollTop = console.scrollHeight;
    }

    function runSystemDiagnostics() {
      addConsoleMessage('Running system diagnostics...', 'info');
      
      const agents = ['POLACZEK_D', 'POLACZEK_T', 'POLACZEK_B', 'POLACZEK_M1'];
      let completed = 0;
      
      agents.forEach((agent, index) => {
        setTimeout(() => {
          testAgent(agent).then(() => {
            completed++;
            if (completed === agents.length) {
              addConsoleMessage('System diagnostics completed', 'success');
            }
          }).catch(error => {
            completed++;
            addConsoleMessage(`Diagnostic error for ${agent}: ${error.message}`, 'error');
            if (completed === agents.length) {
              addConsoleMessage('System diagnostics completed with errors', 'warning');
            }
          });
        }, index * 1000);
      });
    }

    function exportLogs() {
      const logs = document.getElementById('systemConsole').textContent;
      const blob = new Blob([logs], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `polaczek-logs-${new Date().toISOString().slice(0, 10)}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      addConsoleMessage('Logs exported successfully', 'success');
    }

    function viewTranslationHistory() {
      window.open('/admin/translation-history', '_blank');
    }

    function viewKnowledgeBase() {
      window.open('/admin/knowledge-base', '_blank');
    }

    function viewWorkflows() {
      window.open('/admin/workflow-manager', '_blank');
    }

    // Initialize performance chart
    function initializePerformanceChart() {
      const chart = document.getElementById('performanceChart');
      const agents = ['POLACZEK_D', 'POLACZEK_T', 'POLACZEK_B', 'POLACZEK_M1'];
      const performances = [95, 98, 89, 92]; // Example performance percentages
      
      chart.innerHTML = '';
      
      agents.forEach((agent, index) => {
        const bar = document.createElement('div');
        bar.className = 'chart-bar';
        bar.style.height = `${performances[index]}%`;
        bar.title = `${agent}: ${performances[index]}%`;
        chart.appendChild(bar);
      });
    }

    // Update statistics periodically
    function updateStatistics() {
      // Simulate real-time updates
      const totalQueries = Math.floor(Math.random() * 100) + 1200;
      const avgResponseTime = (Math.random() * 0.5 + 1).toFixed(1);
      const successRate = (Math.random() * 2 + 95).toFixed(1);
      
      document.getElementById('totalQueries').textContent = totalQueries.toLocaleString();
      document.getElementById('avgResponseTime').textContent = avgResponseTime + 's';
      document.getElementById('successRate').textContent = successRate + '%';
    }

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      initializePerformanceChart();
      addConsoleMessage('POLACZEK Management Dashboard initialized', 'success');
      
      // Update statistics every 30 seconds
      setInterval(updateStatistics, 30000);
    });

    console.log('🤖 POLACZEK Agents Management System initialized');
  </script>
</body>
</html>
