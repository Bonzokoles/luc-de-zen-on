import { createOPTIONSHandler, createErrorResponse, createSuccessResponse } from '../../utils/corsUtils';

export const GET = async () => {
  return createSuccessResponse({
    message: 'Chat API is running',
    status: 'active',
    methods: ['GET', 'POST', 'OPTIONS'],
    description: 'Send POST request with { prompt: "your message" }'
  });
};

export const OPTIONS = createOPTIONSHandler(['GET', 'POST', 'OPTIONS']);

export const POST = async ({ request, locals }: { request: Request; locals: any }) => {
  try {
    const body = await request.json() as {
      prompt: string;
      model?: string;
      temperature?: number;
      system?: string;
      language?: 'pl' | 'en' | 'auto';
      usePolaczek?: boolean;
    };
    const env = locals.runtime.env;

    if (!env.AI) {
      return createErrorResponse('Cloudflare AI nie jest dostƒôpny', 500, {
        answer: 'Przepraszam, system AI jest obecnie niedostƒôpny.'
      });
    }

    // Integracja z Polaczek AI Assistant
    if (body.usePolaczek || body.model === 'polaczek') {
      try {
        const polaczekResponse = await fetch(new URL('/api/polaczek-chat', request.url), {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            prompt: body.prompt,
            model: body.model || 'polaczek',
            temperature: body.temperature,
            language: body.language || 'pl'
          })
        });

        if (polaczekResponse.ok) {
          const polaczekData = await polaczekResponse.json();
          return createSuccessResponse({
            answer: polaczekData.data?.answer || polaczekData.answer,
            modelUsed: 'polaczek-assistant',
            via: 'polaczek-integration'
          });
        }
      } catch (polaczekError) {
        console.warn('Polaczek fallback failed, using regular AI:', polaczekError);
      }
    }

    const language = body.language === 'en' ? 'en' : 'pl';
    const modelId = body.model?.startsWith('@cf/') ? body.model : (
      body.model === 'qwen-pl' ? '@cf/qwen/qwen2.5-7b-instruct' :
        body.model === 'llama-8b' ? '@cf/meta/llama-3.1-8b-instruct' :
          body.model === 'gemma' ? '@cf/google/gemma-3-12b-it' :
            '@cf/google/gemma-3-12b-it' // Default to Gemma instead of Llama
    );

    const systemPrompt = body.system ?? (language === 'en'
      ? `You are MyBonzo AI Assistant - a helpful AI for Polish AI platform. MyBonzo is an advanced AI platform with tools for image generation, Polish AI models, data analysis, and development tools. Answer concisely and clearly about MyBonzo features.`
      : `Jeste≈õ MyBonzo AI Assistant - pomocnym asystentem polskiej platformy AI. 

üéØ CZYM JEST MYBONZO:
MyBonzo to zaawansowana platforma AI oferujƒÖca:
‚Ä¢ Generator obraz√≥w AI (Stable Diffusion, Flux)  
‚Ä¢ Polskie modele AI (Bielik, POLACZEK)
‚Ä¢ Narzƒôdzia analityczne i biznesowe
‚Ä¢ System agent√≥w AI dla deweloper√≥w
‚Ä¢ Cloudflare Workers AI integration
‚Ä¢ 6 modeli AI: Gemma, Llama, Qwen, Mistral, Bielik, POLACZEK

üöÄ G≈Å√ìWNE FUNKCJE:
‚Ä¢ üé® AI Art Generator - tworzenie obraz√≥w
‚Ä¢ üß† Chat z AI - rozmowy z modelami
‚Ä¢ üìä Analiza danych - BigQuery integration  
‚Ä¢ üéØ Wildcards System - rozszerzanie prompt√≥w
‚Ä¢ üîä Voice AI - synteza mowy
‚Ä¢ ü§ñ AI Workers - r√≥≈ºne modele AI
‚Ä¢ üõ°Ô∏è Admin Panel - zarzƒÖdzanie systemem

‚ö†Ô∏è WA≈ªNE OSTRZE≈ªENIA:
MyBonzo NIE JEST:
- Systemem zarzƒÖdzania finansami
- AplikacjƒÖ do ≈õledzenia wydatk√≥w  
- Narzƒôdziem planowania bud≈ºetu
- Systemem oszczƒôdzania pieniƒôdzy
- PlatformƒÖ dropshippingu z Chin
- AplikacjƒÖ e-commerce
- Systemem finansowym lub bankowym

Odpowiadaj TYLKO o rzeczywistych funkcjach MyBonzo jako platformy AI!`);

    // U≈ºyj Cloudflare Workers AI z wybranym modelem
    const response = await env.AI.run(modelId, {
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: body.prompt }
      ],
      temperature: typeof body.temperature === 'number' ? body.temperature : 0.6,
    });

    return createSuccessResponse({
      answer: response.response || "Przepraszam, nie uda≈Ço siƒô wygenerowaƒá odpowiedzi.",
      modelUsed: modelId
    });

  } catch (error) {
    console.error('AI_CHAT Error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return createErrorResponse(errorMessage, 500, {
      context: 'AI_CHAT',
      timestamp: new Date().toISOString()
    });
  }
};
