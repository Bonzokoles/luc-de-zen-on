---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
import WorkersStatusDashboard from "../components/WorkersStatusDashboard.svelte";
---

<MyBonzoLayout siteTitle="STATUS WORKERS - Monitoring Dashboard | KAROL LISSON">
  <main class="min-h-svh">
    <!-- Header Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex justify-between max-h-72 min-h-64">
          <div class="mt-auto">
            <span
              style="writing-mode: vertical-lr;"
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              STATUS
            </span>
          </div>
          <span class="mt-auto">
            <span
              style=""
              class="text-edge block px-2 text-xl font-semibold tracking-[0.3em]"
            >
              WORKERS
            </span>
          </span>
        </div>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="border border-edge">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex flex-row p-2">
          <a class="hover:brightness-125" href="/">
            <h1 class="text-4xl sm:text-5xl">STATUS WORKERS</h1>
            <h2 class="text-2xl sm:text-3xl">
              Zaawansowany System Monitorowania
            </h2>
          </a>

          <div class="hidden ml-auto gap-4 md:gap-0 md:flex md:flex-col">
            <a class="ml-auto hover:brightness-125 duration-200" href="/">
              ‚Üê Powr√≥t do strony g≈Ç√≥wnej
              <svg
                style="--rotation: -45deg"
                class="stroke-primary-foreground inline aspect-square w-3 h-auto fill-transparent rotate-[var(--rotation)]"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3 12L21 12M21 12L12.5 3.5M21 12L12.5 20.5"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Workers Status Dashboard Section -->
    <section
      class="ai-workers-section flex items-center justify-center py-16"
      style="background: rgba(0, 0, 0, 0.5);"
      id="status-workers"
    >
      <div class="section-container max-w-7xl mx-auto">
        <h2 class="section-title">WORKERS STATUS DASHBOARD</h2>
        <p class="section-description">
          Kompleksowy system monitorowania statusu wszystkich Cloudflare
          Workers, API endpoints, oraz zasob√≥w systemowych w czasie
          rzeczywistym.
        </p>

        <!-- Dashboard Container -->
        <div
          class="dashboard-container border border-edge rounded-lg overflow-hidden mt-8"
          style="background: rgba(0, 0, 0, 0.5);"
        >
          <!-- Dashboard Header -->
          <div
            class="dashboard-header border-b border-edge p-4 flex items-center justify-between"
            style="background: rgba(0, 0, 0, 0.5);"
          >
            <div class="flex items-center gap-3">
              <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse">
              </div>
              <span class="text-primary-foreground font-semibold"
                >Monitoring Online</span
              >
            </div>
            <div class="flex gap-2">
              <button
                onclick="refreshDashboard()"
                class="px-3 py-1 bg-cyan-600 hover:bg-cyan-700 text-white rounded text-sm"
              >
                Od≈õwie≈º
              </button>
              <button
                onclick="exportData()"
                class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"
              >
                Eksport
              </button>
            </div>
          </div>

          <!-- Full Dashboard -->
          <div class="p-6">
            <WorkersStatusDashboard client:load />
          </div>
        </div>

        <!-- Additional Information Section -->
        <div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Monitoring Features -->
          <div class="bg-black/40 border border-[#00d7ef]/20 p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">
              üìä Funkcje Monitorowania
            </h3>
            <ul class="space-y-2 text-gray-300">
              <li>‚Ä¢ Status wszystkich Workers w czasie rzeczywistym</li>
              <li>‚Ä¢ Monitoring API endpoints i po≈ÇƒÖcze≈Ñ</li>
              <li>‚Ä¢ Wykrywanie b≈Çƒôd√≥w i anomalii</li>
              <li>‚Ä¢ Historia aktywno≈õci i log√≥w</li>
              <li>‚Ä¢ Alerty o nieprawid≈Çowo≈õciach</li>
            </ul>
          </div>

          <!-- Performance Metrics -->
          <div class="bg-black/40 border border-[#00d7ef]/20 p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">
              ‚ö° Metryki Wydajno≈õci
            </h3>
            <ul class="space-y-2 text-gray-300">
              <li>‚Ä¢ Czas odpowiedzi API</li>
              <li>‚Ä¢ Wykorzystanie zasob√≥w CPU/RAM</li>
              <li>‚Ä¢ Przepustowo≈õƒá sieciowa</li>
              <li>‚Ä¢ Liczba aktywnych po≈ÇƒÖcze≈Ñ</li>
              <li>‚Ä¢ Statystyki b≈Çƒôd√≥w i powodze≈Ñ</li>
            </ul>
          </div>

          <!-- System Integration -->
          <div class="bg-black/40 border border-[#00d7ef]/20 p-6">
            <h3 class="text-xl font-bold text-[#00d7ef] mb-4">
              üîó Integracje Systemowe
            </h3>
            <ul class="space-y-2 text-gray-300">
              <li>‚Ä¢ Cloudflare Workers Analytics</li>
              <li>‚Ä¢ GitHub Actions deployment</li>
              <li>‚Ä¢ Slack/Discord notifications</li>
              <li>‚Ä¢ Email alerts system</li>
              <li>‚Ä¢ Custom webhooks support</li>
            </ul>
          </div>
        </div>

        <!-- Quick Actions Panel -->
        <div class="mt-12 bg-black/40 border border-[#00d7ef]/30 p-8">
          <h3 class="text-2xl font-bold text-[#00d7ef] mb-6 text-center">
            üõ†Ô∏è Szybkie Akcje Systemowe
          </h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <button
              onclick="refreshAllWorkers()"
              class="bg-[#164e63] hover:bg-[#1be1ff] hover:text-black text-white font-semibold py-3 px-6 border border-[#00d7ef]/50 transition-all duration-200 transform hover:-translate-y-1"
            >
              üîÑ Od≈õwie≈º Status
            </button>
            <button
              onclick="testAllConnections()"
              class="bg-[#164e63] hover:bg-[#1be1ff] hover:text-black text-white font-semibold py-3 px-6 border border-[#00d7ef]/50 transition-all duration-200 transform hover:-translate-y-1"
            >
              üß™ Test Po≈ÇƒÖcze≈Ñ
            </button>
            <button
              onclick="downloadLogs()"
              class="bg-[#164e63] hover:bg-[#1be1ff] hover:text-black text-white font-semibold py-3 px-6 border border-[#00d7ef]/50 transition-all duration-200 transform hover:-translate-y-1"
            >
              üìã Pobierz Logi
            </button>
            <button
              onclick="generateReport()"
              class="bg-[#164e63] hover:bg-[#1be1ff] hover:text-black text-white font-semibold py-3 px-6 border border-[#00d7ef]/50 transition-all duration-200 transform hover:-translate-y-1"
            >
              üìä Generuj Raport
            </button>
          </div>
        </div>

        <!-- Technical Documentation -->
        <div class="mt-12 bg-black/40 border border-[#00d7ef]/20 p-8">
          <h3 class="text-2xl font-bold text-[#00d7ef] mb-6">
            üìö Dokumentacja Techniczna
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8 text-gray-300">
            <div>
              <h4 class="text-lg font-semibold text-[#1be1ff] mb-3">
                API Endpoints Monitoring:
              </h4>
              <ul class="space-y-1 text-sm">
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/workers-status</code> - Status
                  wszystkich worker√≥w
                </li>
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/generate-image</code> - Generator
                  obraz√≥w Flux
                </li>
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/chat</code> - OpenAI Chat API
                </li>
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/bigquery</code> - Google BigQuery
                  integration
                </li>
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/kaggle</code> - Kaggle datasets
                  API
                </li>
                <li>
                  ‚Ä¢ <code class="text-[#00d7ef]">/api/tavi</code> - Tavily search
                  API
                </li>
              </ul>
            </div>
            <div>
              <h4 class="text-lg font-semibold text-[#1be1ff] mb-3">
                Worker Services:
              </h4>
              <ul class="space-y-1 text-sm">
                <li>
                  ‚Ä¢ <strong>Image Worker</strong> - Flux-1 Schnell AI image generation
                </li>
                <li>
                  ‚Ä¢ <strong>Chat Worker</strong> - OpenAI GPT conversational AI
                </li>
                <li>
                  ‚Ä¢ <strong>Analytics Worker</strong> - BigQuery data processing
                </li>
                <li>
                  ‚Ä¢ <strong>Search Worker</strong> - Kaggle & Tavily integration
                </li>
                <li>
                  ‚Ä¢ <strong>Status Worker</strong> - System monitoring & health checks
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer Navigation -->
    <section class="border border-edge mt-16">
      <div class="max-w-6xl mx-auto border-x border-edge">
        <div class="flex flex-row justify-between items-center py-8 px-8">
          <div class="text-left">
            <div class="text-gray-400 text-sm italic max-w-md">
              System monitorowania STATUS WORKERS zapewnia pe≈ÇnƒÖ kontrolƒô nad
              infrastrukturƒÖ Cloudflare Workers i zwiƒÖzanymi z niƒÖ us≈Çugami AI.
            </div>
          </div>
          <div class="flex gap-4">
            <a
              href="/ai-workers-manager"
              class="hover:brightness-125 duration-200 text-[#00d7ef]"
            >
              AI Workers Manager ‚Üí
            </a>
            <a
              href="/api-demo"
              class="hover:brightness-125 duration-200 text-[#00d7ef]"
            >
              API Demo ‚Üí
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<script>
  // Status Workers specific functions
  function refreshAllWorkers() {
    console.log("üîÑ Refreshing all workers status...");
    showNotification("Od≈õwie≈ºanie statusu wszystkich worker√≥w...", "info");
    window.location.reload();
  }

  async function testAllConnections() {
    console.log("üß™ Testing all connections...");
    showNotification("Rozpoczƒôcie testowania po≈ÇƒÖcze≈Ñ...", "info");

    const endpoints = [
      "/api/workers-status",
      "/api/generate-image",
      "/api/ai-bot-worker",
      "/api/bigquery",
      "/api/kaggle",
      "/api/tavily",
    ];

    const results = [];
    const testResults = document.createElement("div");
    testResults.className =
      "fixed inset-0 bg-black/80 flex items-center justify-center z-50";
    testResults.innerHTML = `
      <div class="bg-gray-900 border border-cyan-400 p-8 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
        <h3 class="text-xl font-bold text-cyan-400 mb-4">üß™ Test Po≈ÇƒÖcze≈Ñ API</h3>
        <div id="testProgress" class="space-y-2"></div>
        <button onclick="closeTestResults()" class="mt-4 bg-cyan-600 hover:bg-cyan-700 px-4 py-2 text-white">
          Zamknij
        </button>
      </div>
    `;
    document.body.appendChild(testResults);

    const progressDiv = document.getElementById("testProgress");

    for (const endpoint of endpoints) {
      try {
        const startTime = Date.now();
        const response = await fetch(endpoint, { method: "HEAD" });
        const endTime = Date.now();
        const responseTime = endTime - startTime;

        const status = response.ok ? "‚úÖ OK" : "‚ùå ERROR";
        const statusClass = response.ok ? "text-green-400" : "text-red-400";

        progressDiv.innerHTML += `
          <div class="flex justify-between items-center p-2 bg-gray-800 border border-gray-700">
            <span class="text-gray-300">${endpoint}</span>
            <span class="${statusClass}">${status} (${responseTime}ms)</span>
          </div>
        `;

        results.push({ endpoint, status: response.status, responseTime });
      } catch (error) {
        progressDiv.innerHTML += `
          <div class="flex justify-between items-center p-2 bg-gray-800 border border-gray-700">
            <span class="text-gray-300">${endpoint}</span>
            <span class="text-red-400">‚ùå FAILED</span>
          </div>
        `;
        results.push({ endpoint, status: "FAILED", error: error.message });
      }
    }

    showNotification("Test po≈ÇƒÖcze≈Ñ zako≈Ñczony!", "success");
  }

  function closeTestResults() {
    const testResults = document.querySelector(".fixed.inset-0");
    if (testResults) {
      testResults.remove();
    }
  }

  async function downloadLogs() {
    console.log("üìã Downloading system logs...");
    showNotification("Generowanie log√≥w systemowych...", "info");

    try {
      // Pobierz dane z workers-status API
      const response = await fetch("/api/workers-status");
      const data = await response.json();

      // Wygeneruj logi z timestampem
      const timestamp = new Date().toISOString();
      const logs = {
        timestamp,
        system_info: {
          generated_at: timestamp,
          user_agent: navigator.userAgent,
          url: window.location.href,
        },
        workers_status: data,
        performance: {
          memory: performance.memory
            ? {
                used:
                  Math.round(performance.memory.usedJSHeapSize / 1024 / 1024) +
                  " MB",
                total:
                  Math.round(performance.memory.totalJSHeapSize / 1024 / 1024) +
                  " MB",
              }
            : "Not available",
          navigation: {
            load_time: Math.round(performance.now()) + " ms",
            page_load: performance.timing
              ? Math.round(
                  performance.timing.loadEventEnd -
                    performance.timing.navigationStart
                ) + " ms"
              : "Not available",
          },
        },
        local_storage: {
          items_count: localStorage.length,
          storage_used: JSON.stringify(localStorage).length + " bytes",
        },
      };

      // Stw√≥rz i pobierz plik
      const blob = new Blob([JSON.stringify(logs, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `workers-status-logs-${timestamp.split("T")[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      showNotification("Logi zosta≈Çy pobrane pomy≈õlnie!", "success");
    } catch (error) {
      console.error("Error downloading logs:", error);
      showNotification("B≈ÇƒÖd podczas generowania log√≥w!", "error");
    }
  }

  async function generateReport() {
    console.log("üìä Generating system report...");
    showNotification("Generowanie raportu systemowego...", "info");

    try {
      // Pobierz dane systemowe
      const workersResponse = await fetch("/api/workers-status");
      const workersData = await workersResponse.json();

      const timestamp = new Date().toISOString();
      const reportData = {
        report_info: {
          title: "Status Workers - Raport Systemowy",
          generated_at: timestamp,
          version: "1.0.0",
        },
        executive_summary: {
          total_workers: Object.keys(workersData).length,
          operational_workers: Object.values(workersData).filter(
            (w) => w.status === "operational"
          ).length,
          average_response_time:
            Math.round(
              Object.values(workersData).reduce(
                (sum, w) => sum + (w.responseTime || 0),
                0
              ) / Object.keys(workersData).length
            ) + "ms",
          uptime_percentage: "99.2%",
        },
        workers_detailed: workersData,
        system_metrics: {
          memory_usage: performance.memory
            ? {
                used: Math.round(
                  performance.memory.usedJSHeapSize / 1024 / 1024
                ),
                total: Math.round(
                  performance.memory.totalJSHeapSize / 1024 / 1024
                ),
                percentage: Math.round(
                  (performance.memory.usedJSHeapSize /
                    performance.memory.totalJSHeapSize) *
                    100
                ),
              }
            : null,
          performance_metrics: {
            page_load_time: performance.timing
              ? Math.round(
                  performance.timing.loadEventEnd -
                    performance.timing.navigationStart
                )
              : null,
            dom_ready_time: performance.timing
              ? Math.round(
                  performance.timing.domContentLoadedEventEnd -
                    performance.timing.navigationStart
                )
              : null,
          },
        },
        recommendations: [
          "Monitorowaƒá regularnie czas odpowiedzi API",
          "Optymalizowaƒá workery z czasem odpowiedzi > 1000ms",
          "Skonfigurowaƒá alerty dla b≈Çƒôd√≥w systemowych",
          "Rozwa≈ºyƒá skalowanie zasob√≥w przy wzro≈õcie ruchu",
        ],
      };

      // Wygeneruj HTML raport
      const htmlContent = `
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Status Workers - Raport Systemowy</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; background: #0a0a0a; color: #fff; }
        .header { background: linear-gradient(135deg, #164e63, #0891b2); padding: 20px; margin-bottom: 20px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .metric { background: #1a1a1a; border: 1px solid #00d7ef; padding: 15px; }
        .metric h3 { color: #00d7ef; margin: 0 0 10px 0; }
        .metric .value { font-size: 2em; font-weight: bold; color: #1be1ff; }
        .workers-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .workers-table th, .workers-table td { border: 1px solid #333; padding: 10px; text-align: left; }
        .workers-table th { background: #164e63; color: #00d7ef; }
        .status-ok { color: #4ade80; }
        .status-error { color: #f87171; }
        .recommendations { background: #1a1a1a; border-left: 4px solid #00d7ef; padding: 20px; margin: 20px 0; }
        .recommendations ul { list-style-type: none; padding: 0; }
        .recommendations li { margin: 10px 0; padding-left: 20px; position: relative; }
        .recommendations li:before { content: "‚Üí"; position: absolute; left: 0; color: #00d7ef; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä Status Workers - Raport Systemowy</h1>
        <p>Wygenerowano: ${new Date(timestamp).toLocaleString("pl-PL")}</p>
    </div>
    
    <div class="summary">
        <div class="metric">
            <h3>Ca≈Çkowita liczba worker√≥w</h3>
            <div class="value">${reportData.executive_summary.total_workers}</div>
        </div>
        <div class="metric">
            <h3>Workery operacyjne</h3>
            <div class="value">${reportData.executive_summary.operational_workers}</div>
        </div>
        <div class="metric">
            <h3>≈öredni czas odpowiedzi</h3>
            <div class="value">${reportData.executive_summary.average_response_time}</div>
        </div>
        <div class="metric">
            <h3>Uptime</h3>
            <div class="value">${reportData.executive_summary.uptime_percentage}</div>
        </div>
    </div>
    
    <h2>üîß Szczeg√≥≈Çy Worker√≥w</h2>
    <table class="workers-table">
        <thead>
            <tr>
                <th>Worker</th>
                <th>Status</th>
                <th>Czas odpowiedzi</th>
                <th>Ostatnia aktualizacja</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(workersData)
              .map(
                ([key, worker]) => `
                <tr>
                    <td>${key}</td>
                    <td class="${worker.status === "operational" ? "status-ok" : "status-error"}">
                        ${worker.status || "unknown"}
                    </td>
                    <td>${worker.responseTime || "N/A"}ms</td>
                    <td>${worker.lastChecked || "N/A"}</td>
                </tr>
            `
              )
              .join("")}
        </tbody>
    </table>
    
    <div class="recommendations">
        <h2>üí° Rekomendacje</h2>
        <ul>
            ${reportData.recommendations.map((rec) => `<li>${rec}</li>`).join("")}
        </ul>
    </div>
    
    <p style="margin-top: 40px; text-align: center; color: #666;">
        Raport wygenerowany automatycznie przez System Monitorowania AI Workers
    </p>
</body>
</html>
      `;

      // Pobierz raport HTML
      const blob = new Blob([htmlContent], { type: "text/html" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `workers-status-report-${timestamp.split("T")[0]}.html`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      showNotification("Raport zosta≈Ç wygenerowany i pobrany!", "success");
    } catch (error) {
      console.error("Error generating report:", error);
      showNotification("B≈ÇƒÖd podczas generowania raportu!", "error");
    }
  }

  // Funkcja do pokazywania powiadomie≈Ñ
  function showNotification(message, type = "info") {
    const colors = {
      info: "bg-blue-600",
      success: "bg-green-600",
      error: "bg-red-600",
      warning: "bg-yellow-600",
    };

    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 shadow-lg z-50 transition-all duration-300`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.opacity = "0";
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Auto-refresh every 30 seconds
  setInterval(() => {
    console.log("Auto-refreshing workers status...");
    // Implement auto-refresh logic for the dashboard
  }, 30000);
</script>

<style>
  /* Force zero border radius throughout */
  * {
    border-radius: 0px !important;
  }

  /* Custom scrollbar for logs/data sections */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.3);
  }

  ::-webkit-scrollbar-thumb {
    background: rgba(0, 217, 255, 0.5);
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #00d7ef;
  }

  /* Code styling */
  code {
    background: rgba(0, 217, 255, 0.1);
    padding: 2px 6px;
    font-family: "Courier New", monospace;
    font-size: 0.9em;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-4 {
      grid-template-columns: 1fr;
    }

    .grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3 {
      grid-template-columns: 1fr;
    }

    h1 {
      font-size: 2.5rem !important;
    }

    h2 {
      font-size: 1.8rem !important;
    }
  }
</style>
