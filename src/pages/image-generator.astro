---
// TypeScript interface for component props (Astro best practice)
interface Props {
  siteTitle?: string;
  description?: string;
}

// Proper destructuring of props with defaults (Astro best practice)
const { 
  siteTitle = "Generator Obrazów | AI Workers",
  description = "Zaawansowany generator obrazów z AI. Flux-1 Schnell, Stable Diffusion, DALL-E i więcej!"
} = Astro.props;

// Proper type imports (Astro best practice)
import type { HTMLAttributes } from "astro/types";
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";

// Metadata for SEO and performance (Astro best practice)
const pageMetadata = {
  title: siteTitle,
  description,
  robots: "index, follow",
  og: {
    title: siteTitle,
    description: description,
    type: "website"
  }
};
---

<MyBonzoLayout
  {siteTitle}
  {description}
>
  <main class="min-h-svh">
    <section class="ai-workers-section py-10">
      <div class="section-container max-w-4xl mx-auto">
        <h1 class="section-title">🎨 GENERATOR OBRAZÓW AI</h1>
        <p class="section-description">
          Zaawansowany generator obrazów z AI. Flux-1 Schnell, Stable Diffusion, DALL-E i więcej!
        </p>

        <!-- Quick Stats -->
        <div class="global-stats-grid mb-8">
          <div class="stat-card">
            <div class="stat-icon">🎨</div>
            <div class="stat-value" id="totalGenerated">0</div>
            <div class="stat-label">Wygenerowanych obrazów</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">⚡</div>
            <div class="stat-value" id="avgTime">-</div>
            <div class="stat-label">Średni czas generacji</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">🤖</div>
            <div class="stat-value" id="activeModel">Flux-1</div>
            <div class="stat-label">Aktywny model</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">💾</div>
            <div class="stat-value" id="savedImages">0</div>
            <div class="stat-label">Zapisane obrazy</div>
          </div>
        </div>

        <div
          class="border border-edge rounded-lg p-6 mt-6"
          style="background: rgba(0,0,0,0.5);"
        >
          <!-- Prompt -->
          <div class="mb-5">
            <label
              for="imagePrompt"
              class="block text-lg font-semibold mb-2 text-primary-foreground"
              >Opis obrazu</label
            >
            <div class="relative">
              <textarea
                id="imagePrompt"
                rows="3"
                class="w-full p-3 border border-edge rounded text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none pr-24"
                style="background: rgba(0,0,0,0.5);"
                placeholder="Np. Futurystyczne miasto o zachodzie słońca, styl fotograficzny, 4K"
              ></textarea>
              
              <!-- Prompt Tools -->
              <div class="absolute top-2 right-2 flex gap-1">
                <button
                  id="translateBtn"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs transition-colors"
                  onclick="translatePrompt()"
                  title="Przetłumacz na angielski"
                >🌐</button>
                <button
                  id="enhanceBtn"
                  class="bg-purple-600 hover:bg-purple-700 text-white px-2 py-1 rounded text-xs transition-colors"
                  onclick="enhancePrompt()"
                  title="Magic Prompt - ulepszanie przez AI Stable Diffusion"
                >✨</button>
              </div>
            </div>
            
            <!-- Quick Prompt Templates -->
            <div class="mt-2 flex flex-wrap gap-1">
              <button onclick="setTemplate('photo')" class="prompt-template">📸 Fotograficzny</button>
              <button onclick="setTemplate('art')" class="prompt-template">🎨 Artystyczny</button>
              <button onclick="setTemplate('anime')" class="prompt-template">🎭 Anime</button>
              <button onclick="setTemplate('3d')" class="prompt-template">🎮 3D Render</button>
              <button onclick="setTemplate('vintage')" class="prompt-template">📼 Vintage</button>
            </div>
          </div>

          <!-- Controls -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Model</label
              >
              <select
                id="imageModel"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <!-- Cloudflare Models -->
                <optgroup label="🔥 Cloudflare AI">
                  <option value="@cf/stabilityai/stable-diffusion-xl-base-1.0"
                    >Stable Diffusion XL</option
                  >
                  <option value="@cf/lykon/dreamshaper-8-lcm"
                    >DreamShaper 8 LCM</option
                  >
                  <option value="@cf/black-forest-labs/flux-1-schnell"
                    >Flux-1 Schnell</option
                  >
                </optgroup>
                
                <!-- External Free AI Models -->
                <optgroup label="🆓 Darmowe AI">
                  <option value="together_flux"
                    >Together AI - FLUX.1-schnell</option
                  >
                  <option value="hf_playground"
                    >HuggingFace - Playground v2.5</option
                  >
                  <option value="stability_sdxl"
                    >Stability AI - SDXL</option
                  >
                  <option value="openai_sora"
                    >OpenAI - Sora (Wideo - wkrótce)</option
                  >
                </optgroup>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Styl</label
              >
              <select
                id="imageStyle"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="photographic">Fotograficzny</option>
                <option value="artistic">Artystyczny</option>
                <option value="digital">Cyfrowy</option>
                <option value="anime">Anime</option>
                <option value="abstract">Abstrakcyjny</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Rozmiar</label
              >
              <select
                id="imageSize"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="512x512">512×512 (kwadrat)</option>
                <option value="768x512">768×512 (poziomo)</option>
                <option value="512x768">512×768 (pionowo)</option>
                <option value="1024x1024">1024×1024 (duży)</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Kroki</label
              >
              <select
                id="imageSteps"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="15">15</option>
                <option value="25">25</option>
                <option value="35">35</option>
                <option value="50">50</option>
              </select>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="mb-5 grid grid-cols-1 md:grid-cols-3 gap-3">
            <button
              id="generateBtn"
              class="bg-cyan-600 hover:bg-cyan-700 text-white py-3 px-6 rounded-lg font-semibold text-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              onclick="generateImage()">🎨 Generuj Obraz</button
            >
            <button
              id="randomPromptBtn"
              class="bg-purple-600 hover:bg-purple-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors"
              onclick="generateRandomPrompt()">🎲 Losowy Prompt</button
            >
            <button
              id="savePresetBtn"
              class="bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors"
              onclick="saveCurrentPreset()">💾 Zapisz Preset</button
            >
          </div>

          <!-- Quick Presets -->
          <div class="mb-5">
            <label class="block text-sm font-medium mb-2 text-primary-foreground">Szybkie presety</label>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
              <button class="preset-btn" onclick="loadPreset('portrait')">👤 Portret</button>
              <button class="preset-btn" onclick="loadPreset('landscape')">🏞️ Krajobraz</button>
              <button class="preset-btn" onclick="loadPreset('abstract')">🎭 Abstrakcja</button>
              <button class="preset-btn" onclick="loadPreset('scifi')">🚀 Sci-Fi</button>
              <button class="preset-btn" onclick="loadPreset('anime')">🎌 Anime</button>
              <button class="preset-btn" onclick="loadPreset('vintage')">📷 Vintage</button>
              <button class="preset-btn" onclick="loadPreset('cyberpunk')">🌆 Cyberpunk</button>
              <button class="preset-btn" onclick="loadPreset('nature')">🌿 Natura</button>
            </div>
          </div>

          <!-- Loading -->
          <div id="loading" class="text-center py-3 hidden">
            <div
              class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"
            >
            </div>
            <p class="mt-2 text-muted-foreground">Generowanie obrazu...</p>
          </div>

          <!-- Error -->
          <div
            id="errorBox"
            class="mt-3 p-3 bg-red-900/50 border border-red-600 rounded hidden text-red-200"
          >
          </div>

          <!-- Result -->
          <div id="resultSection" class="hidden mt-5">
            <h3 class="text-xl font-semibold mb-3 text-primary-foreground">
              Wygenerowany obraz
            </h3>
            <div
              class="border border-edge rounded-lg p-3"
              style="background: rgba(0,0,0,0.5);"
            >
              <img
                id="generatedImage"
                class="w-full rounded mb-3"
                alt="Wygenerowany obraz"
              />
              <div class="flex gap-2 flex-wrap">
                <button
                  class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm"
                  onclick="downloadImage()">💾 Pobierz</button
                >
                <button
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
                  onclick="shareImage()">📤 Udostępnij</button
                >
                <button
                  class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm"
                  onclick="generateVariation()">🔄 Wariacja</button
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Advanced Options -->
        <div class="mt-8 border border-edge rounded-lg p-6" style="background: rgba(0,0,0,0.3);">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">⚙️ Zaawansowane opcje</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Negative prompt</label>
              <input
                id="negativePrompt"
                type="text"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
                placeholder="Co ma NIE być na obrazie..."
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">CFG Scale</label>
              <input
                id="cfgScale"
                type="range"
                min="1"
                max="20"
                value="7"
                class="w-full"
                oninput="document.getElementById('cfgValue').textContent = this.value"
              />
              <span id="cfgValue" class="text-sm text-gray-400">7</span>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Seed</label>
              <div class="flex gap-2">
                <input
                  id="imageSeed"
                  type="number"
                  class="flex-1 p-2 border border-edge rounded text-primary-foreground"
                  style="background: rgba(0,0,0,0.5);"
                  placeholder="Random"
                />
                <button
                  class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded"
                  onclick="randomSeed()"
                >🎲</button>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">
                <input type="checkbox" id="upscaleImage" class="mr-2">
                Powiększ obraz (2x)
              </label>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">
                <input type="checkbox" id="faceRestore" class="mr-2">
                Popraw twarze
              </label>
            </div>
          </div>
        </div>

        <!-- Batch Generation -->
        <div class="mt-6 border border-edge rounded-lg p-6" style="background: rgba(0,0,0,0.3);">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">🔄 Generacja wsadowa</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Liczba obrazów</label>
              <select
                id="batchCount"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="1">1 obraz</option>
                <option value="2">2 obrazy</option>
                <option value="4">4 obrazy</option>
                <option value="8">8 obrazów</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">
                <input type="checkbox" id="varySeeds" class="mr-2">
                Różne seeds
              </label>
            </div>
            <div>
              <button
                id="batchGenerateBtn"
                class="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded font-semibold transition-colors"
                onclick="generateBatch()"
              >🔄 Generuj wsadowo</button>
            </div>
          </div>
        </div>

        <!-- Results Grid -->
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-4 text-primary-foreground">🖼️ Galeria wyników</h3>
          <div id="resultsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          </div>
        </div>

        <!-- History -->
        <div class="mt-8">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-primary-foreground">📚 Historia generacji</h3>
            <div class="flex gap-2">
              <button 
                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm"
                onclick="clearHistory()"
              >🗑️ Wyczyść</button>
              <button 
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
                onclick="exportHistory()"
              >📤 Eksportuj</button>
            </div>
          </div>
          <div id="historyGrid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
          </div>
        </div>

        <!-- History panel -->
        <div id="historyPanel" class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 z-50" style="display: none;">
          <div class="bg-gray-900 p-6 rounded-lg max-w-6xl w-full max-h-[80vh] overflow-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-semibold text-[#00bcd4]">Historia generowanych obrazów</h3>
              <div class="flex gap-2">
                <button onclick="exportHistory()" class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700">Eksportuj</button>
                <button onclick="clearHistory()" class="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700">Wyczyść</button>
                <button onclick="closeHistory()" class="text-gray-400 hover:text-white text-xl">✕</button>
              </div>
            </div>
            <div id="historyStats" class="mb-4 p-4 bg-gray-800 rounded-lg">
              <div class="grid grid-cols-4 gap-4 text-center">
                <div>
                  <div class="text-[#00bcd4] font-bold text-lg" id="historyTotal">0</div>
                  <div class="text-sm text-gray-400">Łącznie</div>
                </div>
                <div>
                  <div class="text-[#00bcd4] font-bold text-lg" id="historyToday">0</div>
                  <div class="text-sm text-gray-400">Dzisiaj</div>
                </div>
                <div>
                  <div class="text-[#00bcd4] font-bold text-lg" id="historyWeek">0</div>
                  <div class="text-sm text-gray-400">Ten tydzień</div>
                </div>
                <div>
                  <div class="text-[#00bcd4] font-bold text-lg" id="historyFavorites">0</div>
                  <div class="text-sm text-gray-400">Ulubione</div>
                </div>
              </div>
            </div>
            <div class="mb-4 flex gap-2 flex-wrap">
              <button onclick="filterHistory('all')" class="px-3 py-1 bg-[#00bcd4] text-white rounded text-sm">Wszystkie</button>
              <button onclick="filterHistory('today')" class="px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-[#00bcd4]">Dzisiaj</button>
              <button onclick="filterHistory('week')" class="px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-[#00bcd4]">Ten tydzień</button>
              <button onclick="filterHistory('favorites')" class="px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-[#00bcd4]">Ulubione</button>
            </div>
            <div id="historyList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"></div>
          </div>
        </div>

      </div>
    </section>
  </main>
</MyBonzoLayout>

<style>
  .section-container {
    padding: 2rem;
    text-align: center;
  }
  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }

  .global-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
  }

  .stat-card {
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid var(--edge);
    border-radius: 0.75rem;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    border-color: #00bcd4;
    transform: translateY(-2px);
  }

  .stat-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #888;
  }

  .preset-btn {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid var(--edge);
    color: white;
    padding: 0.5rem 1rem;
    rounded: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .preset-btn:hover {
    background: #00bcd4;
    border-color: #00bcd4;
    transform: translateY(-1px);
  }

  .result-card {
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid var(--edge);
    border-radius: 0.5rem;
    padding: 1rem;
    transition: all 0.3s ease;
  }

  .result-card:hover {
    border-color: #00bcd4;
    transform: translateY(-2px);
  }

  .result-card img {
    width: 100%;
    border-radius: 0.375rem;
    margin-bottom: 0.75rem;
  }

  .result-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .result-actions button {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .history-item {
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid var(--edge);
    border-radius: 0.375rem;
    padding: 0.75rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .history-item:hover {
    border-color: #00bcd4;
    transform: scale(1.05);
  }

  .history-item img {
    width: 100%;
    border-radius: 0.25rem;
    margin-bottom: 0.5rem;
  }

  .history-prompt {
    font-size: 0.75rem;
    color: #ccc;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .section-description {
    font-size: 1.1rem;
    color: #d1d5db;
    margin-bottom: 1.25rem;
  }
  .ai-workers-section {
    min-height: 100vh;
  }
  .prompt-template {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .prompt-template:hover {
    background: rgba(6, 182, 212, 0.2);
    border-color: #06b6d4;
    color: #06b6d4;
  }
  .quick-prompt-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .quick-prompt-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
  }
</style>

<script>
  // @ts-nocheck
  // Frontend for binary PNG API with loading/error/history (no template literals)
  var generationHistory = [];
  try {
    generationHistory = JSON.parse(
      localStorage.getItem("imageHistory") || "[]"
    );
  } catch (e) {
    generationHistory = [];
  }

  function parseSize(size) {
    var parts = String(size || "").split("x");
    var w = parseInt(parts[0], 10);
    var h = parseInt(parts[1], 10);
    if (isNaN(w) || isNaN(h)) {
      w = 512;
      h = 512;
    }
    return { width: w, height: h };
  }

  // Template prompts
  var promptTemplates = {
    photo: "professional photography, high quality, 4K, realistic, detailed",
    art: "digital art, masterpiece, highly detailed, artistic, beautiful colors",
    anime: "anime style, manga style, vibrant colors, cel shading, high quality",
    "3d": "3D render, octane render, cinema4d, blender, high quality, realistic lighting",
    vintage: "vintage style, retro, film photography, nostalgic, warm tones"
  };

  function setTemplate(type) {
    var promptEl = document.getElementById("imagePrompt");
    if (promptEl && promptTemplates[type]) {
      var currentText = promptEl.value.trim();
      if (currentText) {
        promptEl.value = currentText + ", " + promptTemplates[type];
      } else {
        promptEl.value = promptTemplates[type];
      }
    }
  }

  async function translatePrompt() {
    var promptEl = document.getElementById("imagePrompt");
    var translateBtn = document.getElementById("translateBtn");
    
    if (!promptEl || !translateBtn) return;
    
    var text = promptEl.value.trim();
    if (!text) {
      alert("Wprowadź tekst do przetłumaczenia");
      return;
    }

    translateBtn.disabled = true;
    translateBtn.textContent = "⏳";
    
    try {
      var response = await fetch("/api/translate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: text,
          from: "pl",
          to: "en"
        })
      });

      if (!response.ok) {
        throw new Error("Błąd tłumaczenia");
      }

      var data = await response.json();
      if (data.success && data.translatedText) {
        promptEl.value = data.translatedText;
      } else {
        throw new Error(data.error || "Brak tłumaczenia");
      }
    } catch (error) {
      console.error("Translation error:", error);
      alert("Błąd tłumaczenia: " + error.message);
    } finally {
      translateBtn.disabled = false;
      translateBtn.textContent = "🌐";
    }
  }

  async function enhancePrompt() {
    var promptEl = document.getElementById("imagePrompt");
    var enhanceBtn = document.getElementById("enhanceBtn");
    var styleEl = document.getElementById("imageStyle");
    
    if (!promptEl || !enhanceBtn) return;
    
    var text = promptEl.value.trim();
    if (!text) {
      alert("Wprowadź tekst do ulepszenia");
      return;
    }

    enhanceBtn.disabled = true;
    enhanceBtn.textContent = "⏳";
    
    try {
      var style = styleEl ? styleEl.value : "default";
      var response = await fetch("/api/magic-prompt", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: text,
          style: style
        })
      });

      if (!response.ok) {
        throw new Error("Błąd Magic Prompt");
      }

      var data = await response.json();
      if (data.success && data.enhancedPrompt) {
        promptEl.value = data.enhancedPrompt;
        
        // Show enhancement info
        var info = document.createElement("div");
        info.className = "mt-1 text-xs text-green-400";
        info.textContent = "✨ Prompt ulepszony przez MagicPrompt-SD";
        
        var existingInfo = promptEl.parentElement.querySelector(".magic-info");
        if (existingInfo) existingInfo.remove();
        info.className += " magic-info";
        promptEl.parentElement.appendChild(info);
        
        setTimeout(() => {
          if (info.parentElement) info.remove();
        }, 3000);
      } else {
        throw new Error(data.error || "Brak ulepszonego promptu");
      }
    } catch (error) {
      console.error("Magic Prompt error:", error);
      alert("Błąd Magic Prompt: " + error.message);
    } finally {
      enhanceBtn.disabled = false;
      enhanceBtn.textContent = "✨";
    }
  }

  function setPrompt(p) {
    var el = document.getElementById("imagePrompt");
    if (el) el.value = p;
  }

  function blobToDataUrl(blob) {
    return new Promise(function (resolve, reject) {
      var r = new FileReader();
      r.onloadend = function () {
        resolve(String(r.result || ""));
      };
      r.onerror = reject;
      r.readAsDataURL(blob);
    });
  }

  async function generateImage() {
    var promptEl = document.getElementById("imagePrompt");
    var modelEl = document.getElementById("imageModel");
    var styleEl = document.getElementById("imageStyle");
    var sizeEl = document.getElementById("imageSize");
    var stepsEl = document.getElementById("imageSteps");
    var loading = document.getElementById("loading");
    var errorBox = document.getElementById("errorBox");
    var btn = document.getElementById("generateBtn");
    var result = document.getElementById("resultSection");

    var prompt = promptEl ? String(promptEl.value).trim() : "";
    if (!prompt) {
      alert("Proszę wprowadzić opis obrazu");
      return;
    }

    if (errorBox) {
      errorBox.classList.add("hidden");
      errorBox.textContent = "";
    }
    if (result) result.classList.add("hidden");
    if (loading) loading.classList.remove("hidden");
    if (btn) {
      btn.disabled = true;
      btn.textContent = "Generowanie...";
    }

    try {
      var model = modelEl ? String(modelEl.value) : "";
      var style = styleEl ? String(styleEl.value) : "";
      var steps = stepsEl ? parseInt(String(stepsEl.value), 10) : undefined;
      var size = sizeEl ? String(sizeEl.value) : "512x512";
      var dims = parseSize(size);

      var res = await fetch("/api/generate-image", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: prompt,
          model: model,
          style: style,
          width: dims.width,
          height: dims.height,
          steps: steps,
        }),
      });

      if (!res.ok) {
        var errMsg = "Błąd generacji obrazu";
        try {
          var j = await res.json();
          if (j && j.error) errMsg = j.error;
        } catch (e) {}
        throw new Error(errMsg);
      }

      var img = document.getElementById("generatedImage");
      var objUrl;

      // Check if it's JSON response (external models) or blob (Cloudflare)
      var contentType = res.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        // External model response with base64 image
        var jsonData = await res.json();
        if (jsonData.success && jsonData.image) {
          if (img) img.src = jsonData.image; // Already data URL
          objUrl = jsonData.image;
          
          // Show provider info
          var providerInfo = document.createElement("div");
          providerInfo.className = "mt-2 text-sm text-cyan-400";
          providerInfo.textContent = "Wygenerowane przez: " + (jsonData.provider || "AI");
          if (result) {
            var existingInfo = result.querySelector(".provider-info");
            if (existingInfo) existingInfo.remove();
            providerInfo.className += " provider-info";
            result.appendChild(providerInfo);
          }
        } else {
          throw new Error(jsonData.error || "Błąd zewnętrznego API");
        }
      } else {
        // Cloudflare blob response
        var blob = await res.blob();
        objUrl = URL.createObjectURL(blob);
        if (img) img.src = objUrl;
      }
      
      if (result) result.classList.remove("hidden");

      // Persist history as data URL to survive reloads
      try {
        var dataUrl;
        if (contentType && contentType.includes("application/json")) {
          // For external models, use the base64 data URL directly
          dataUrl = objUrl;
        } else {
          // For Cloudflare models, convert blob to data URL
          dataUrl = await blobToDataUrl(blob);
        }
        
        var item = {
          id: Date.now(),
          prompt: prompt,
          imageUrl: dataUrl,
          ts: new Date().toISOString(),
          settings: {
            model: model,
            style: style,
            width: dims.width,
            height: dims.height,
            steps: steps,
          },
        };
        generationHistory.unshift(item);
        if (generationHistory.length > 20)
          generationHistory = generationHistory.slice(0, 20);
        localStorage.setItem("imageHistory", JSON.stringify(generationHistory));
        updateHistoryDisplay();
      } catch (e) {}
    } catch (err) {
      console.error("Generation error:", err);
      if (errorBox) {
        errorBox.textContent = err && err.message ? err.message : String(err);
        errorBox.classList.remove("hidden");
      }
    } finally {
      if (loading) loading.classList.add("hidden");
      if (btn) {
        btn.disabled = false;
        btn.textContent = "🎨 Generuj Obraz";
      }
    }
  }

  // Presets for different image types
  var imagePresets = {
    portraits: [
      "professional portrait photography, studio lighting, high quality",
      "realistic portrait, detailed face, soft lighting, 4K",
      "cinematic portrait, dramatic lighting, professional"
    ],
    landscapes: [
      "breathtaking landscape photography, golden hour, high resolution",
      "epic mountain vista, dramatic clouds, professional photography",
      "serene natural landscape, perfect lighting, 4K"
    ],
    art: [
      "digital art masterpiece, highly detailed, artstation trending",
      "concept art, fantasy illustration, detailed background",
      "artistic painting, oil painting style, museum quality"
    ],
    fantasy: [
      "fantasy art, magical atmosphere, detailed illustration",
      "mystical scene, glowing effects, epic fantasy art",
      "enchanted world, fantasy landscape, magical lighting"
    ],
    scifi: [
      "futuristic sci-fi scene, cyberpunk style, neon lighting",
      "space exploration, cosmic vista, detailed spacecraft",
      "dystopian future, high-tech environment, dramatic"
    ],
    anime: [
      "anime style illustration, vibrant colors, detailed",
      "manga style artwork, cel shading, high quality anime",
      "kawaii anime character, colorful, studio quality"
    ],
    realistic: [
      "photorealistic, ultra detailed, professional photography",
      "hyperrealistic rendering, perfect lighting, 8K quality",
      "realistic photo, natural lighting, high definition"
    ],
    abstract: [
      "abstract art, geometric patterns, vibrant colors",
      "surreal abstract composition, artistic expression",
      "modern abstract design, bold colors, creative"
    ]
  };

  function loadPreset(category) {
    var presets = imagePresets[category];
    if (!presets || !presets.length) return;
    
    var randomPreset = presets[Math.floor(Math.random() * presets.length)];
    var promptEl = document.getElementById("imagePrompt");
    if (promptEl) {
      promptEl.value = randomPreset;
    }
  }

  function randomizeSeed() {
    var seedEl = document.getElementById("seed");
    if (seedEl) {
      seedEl.value = Math.floor(Math.random() * 1000000);
    }
  }

  function generateBatch() {
    var batchCount = parseInt(document.getElementById("batchCount").value) || 1;
    var varySeeds = document.getElementById("varySeeds").checked;
    var originalSeed = document.getElementById("seed").value;
    
    var generateBtn = document.getElementById("generateBtn");
    if (generateBtn) {
      for (var i = 0; i < batchCount; i++) {
        setTimeout(function(index) {
          if (varySeeds && index > 0) {
            randomizeSeed();
          }
          generateImage();
        }, i * 2000, i); // 2 second delay between generations
      }
    }
    
    // Restore original seed if not varying
    if (!varySeeds) {
      setTimeout(function() {
        document.getElementById("seed").value = originalSeed;
      }, batchCount * 2000);
    }
  }

  function addToResults(imageUrl, prompt, settings) {
    var resultsGrid = document.getElementById("resultsGrid");
    if (!resultsGrid) return;

    var resultCard = document.createElement("div");
    resultCard.className = "result-card";
    resultCard.innerHTML = 
      '<img src="' + imageUrl + '" alt="Generated image" />' +
      '<div class="result-actions">' +
        '<button onclick="downloadResult(\'' + imageUrl + '\')" style="background: #10b981; color: white;">💾 Pobierz</button>' +
        '<button onclick="copyPromptFromResult(\'' + prompt.replace(/'/g, "\\'") + '\')" style="background: #3b82f6; color: white;">📋 Kopiuj prompt</button>' +
        '<button onclick="toggleFavorite(this)" style="background: #f59e0b; color: white;">⭐ Ulubione</button>' +
      '</div>';
    
    resultsGrid.insertBefore(resultCard, resultsGrid.firstChild);
  }

  function downloadResult(imageUrl) {
    var link = document.createElement("a");
    link.href = imageUrl;
    link.download = "generated_image_" + Date.now() + ".png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function copyPromptFromResult(prompt) {
    navigator.clipboard.writeText(prompt).then(function() {
      alert("Prompt skopiowany do schowka!");
    });
  }

  function toggleFavorite(button) {
    var isFavorite = button.classList.contains("favorited");
    if (isFavorite) {
      button.classList.remove("favorited");
      button.style.background = "#f59e0b";
      button.textContent = "⭐ Ulubione";
    } else {
      button.classList.add("favorited");
      button.style.background = "#ef4444";
      button.textContent = "❤️ Ulubione";
    }
  }

  function clearResults() {
    var resultsGrid = document.getElementById("resultsGrid");
    if (resultsGrid) {
      resultsGrid.innerHTML = "";
    }
  }

  function exportHistory() {
    var dataStr = JSON.stringify(generationHistory, null, 2);
    var dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    var link = document.createElement("a");
    link.href = URL.createObjectURL(dataBlob);
    link.download = "image_generation_history_" + new Date().toISOString().split('T')[0] + ".json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function clearHistory() {
    if (confirm("Czy na pewno chcesz wyczyścić całą historię generacji?")) {
      generationHistory = [];
      localStorage.removeItem("imageHistory");
      updateHistoryDisplay();
      updateGlobalStats();
    }
  }

  function openHistoryPanel() {
    var panel = document.getElementById("historyPanel");
    if (panel) {
      panel.style.display = "flex";
      panel.classList.remove("hidden");
      updateHistoryPanelStats();
    }
  }

  function closeHistory() {
    var panel = document.getElementById("historyPanel");
    if (panel) {
      panel.style.display = "none";
      panel.classList.add("hidden");
    }
  }

  function updateHistoryPanelStats() {
    var total = generationHistory.length;
    var today = 0;
    var week = 0;
    var favorites = 0;
    
    var todayDate = new Date().toDateString();
    var weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    generationHistory.forEach(function(item) {
      var itemDate = new Date(item.ts);
      if (itemDate.toDateString() === todayDate) today++;
      if (itemDate >= weekAgo) week++;
      if (item.favorite) favorites++;
    });
    
    var totalEl = document.getElementById("historyTotal");
    var todayEl = document.getElementById("historyToday");
    var weekEl = document.getElementById("historyWeek");
    var favoritesEl = document.getElementById("historyFavorites");
    
    if (totalEl) totalEl.textContent = total;
    if (todayEl) todayEl.textContent = today;
    if (weekEl) weekEl.textContent = week;
    if (favoritesEl) favoritesEl.textContent = favorites;
  }

  function filterHistory(filter) {
    var historyList = document.getElementById("historyList");
    if (!historyList) return;
    
    var filteredHistory;
    var todayDate = new Date().toDateString();
    var weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    switch (filter) {
      case 'today':
        filteredHistory = generationHistory.filter(function(item) {
          return new Date(item.ts).toDateString() === todayDate;
        });
        break;
      case 'week':
        filteredHistory = generationHistory.filter(function(item) {
          return new Date(item.ts) >= weekAgo;
        });
        break;
      case 'favorites':
        filteredHistory = generationHistory.filter(function(item) {
          return item.favorite;
        });
        break;
      default:
        filteredHistory = generationHistory;
    }
    
    displayFilteredHistory(filteredHistory);
    
    // Update filter button states
    var filterButtons = document.querySelectorAll('[onclick^="filterHistory"]');
    filterButtons.forEach(function(btn) {
      btn.className = btn.className.replace('bg-[#00bcd4]', 'bg-gray-600');
    });
    event.target.className = event.target.className.replace('bg-gray-600', 'bg-[#00bcd4]');
  }

  function displayFilteredHistory(filteredHistory) {
    var historyList = document.getElementById("historyList");
    if (!historyList) return;
    
    historyList.innerHTML = "";
    
    filteredHistory.forEach(function(item) {
      var historyItem = document.createElement("div");
      historyItem.className = "history-item";
      historyItem.innerHTML =
        '<img src="' + item.imageUrl + '" alt="History image" />' +
        '<div class="history-prompt">' + (item.prompt || "").substring(0, 50) + '...</div>' +
        '<div class="text-xs text-gray-500 mt-1">' + new Date(item.ts).toLocaleString() + '</div>';
      
      historyItem.onclick = function() {
        var promptEl = document.getElementById("imagePrompt");
        if (promptEl && item.prompt) {
          promptEl.value = item.prompt;
        }
        closeHistory();
      };
      
      historyList.appendChild(historyItem);
    });
  }

  function downloadImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    var link = document.createElement("a");
    link.download = "generated_image.png";
    link.href = img.src;
    link.click();
  }

  function shareImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    if (navigator.share) {
      navigator
        .share({ title: "Wygenerowany obraz AI", url: img.src })
        .catch(function () {});
    } else if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(img.src);
      alert("Link do obrazu skopiowany do schowka!");
    }
  }

  function generateVariation() {
    var promptEl = document.getElementById("imagePrompt");
    var currentPrompt = promptEl ? String(promptEl.value) : "";
    var v = [
      ", w innym stylu",
      ", z innymi kolorami",
      ", z innej perspektywy",
      ", w wersji artystycznej",
      ", z dodatkowymi detalami",
    ];
    var add = v[Math.floor(Math.random() * v.length)];
    if (promptEl) promptEl.value = currentPrompt + add;
    generateImage();
  }

  function createHistoryCard(item) {
    var wrap = document.createElement("div");
    wrap.className =
      "history-item border border-edge rounded-lg p-2 cursor-pointer hover:border-cyan-400 transition-colors";
    wrap.style.background = "rgba(0,0,0,0.5)";
    var image = document.createElement("img");
    image.src = item.imageUrl;
    image.alt = "Historia";
    image.className = "w-full aspect-square object-cover rounded mb-2";
    wrap.appendChild(image);
    var p = document.createElement("p");
    p.className = "text-xs text-gray-400 truncate";
    p.textContent = item.prompt;
    wrap.appendChild(p);
    wrap.onclick = function () {
      var el = document.getElementById("imagePrompt");
      if (el) el.value = item.prompt;
      var img = document.getElementById("generatedImage");
      if (img) img.src = item.imageUrl;
      var res = document.getElementById("resultSection");
      if (res) res.classList.remove("hidden");
    };
    return wrap;
  }

  function updateHistoryDisplay() {
    var grid = document.getElementById("historyGrid");
    if (!grid) return;
    grid.innerHTML = "";
    var items = generationHistory.slice(0, 8);
    for (var i = 0; i < items.length; i++) {
      grid.appendChild(createHistoryCard(items[i]));
    }
  }

  // Global statistics functions
  function updateGlobalStats() {
    var totalImages = generationHistory.length;
    var todayImages = 0;
    var weekImages = 0;
    var favoriteImages = 0;
    
    var todayDate = new Date().toDateString();
    var weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    generationHistory.forEach(function(item) {
      var itemDate = new Date(item.ts);
      if (itemDate.toDateString() === todayDate) todayImages++;
      if (itemDate >= weekAgo) weekImages++;
      if (item.favorite) favoriteImages++;
    });
    
    var totalEl = document.getElementById("statTotalImages");
    var todayEl = document.getElementById("statTodayImages");
    var weekEl = document.getElementById("statWeekImages");
    var avgEl = document.getElementById("statAvgTime");
    
    if (totalEl) totalEl.textContent = totalImages;
    if (todayEl) todayEl.textContent = todayImages;
    if (weekEl) weekEl.textContent = weekImages;
    if (avgEl) avgEl.textContent = "~2.5s"; // Estimated average
  }

  // Initialize stats on page load
  document.addEventListener("DOMContentLoaded", function () {
    updateHistoryDisplay();
    updateGlobalStats();
  });
</script>
