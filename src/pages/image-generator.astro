---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
---

<MyBonzoLayout
  siteTitle="Generator Obraz√≥w | AI Workers"
  description="Generuj obrazy z tekstu za pomocƒÖ Cloudflare AI."
>
  <main class="min-h-svh">
    <section class="ai-workers-section py-10">
      <div class="section-container max-w-4xl mx-auto">
        <h1 class="section-title">GENERATOR OBRAZ√ìW AI</h1>
        <p class="section-description">
          Podaj opis i wybierz parametry. Otrzymasz PNG bezpo≈õrednio z serwera.
        </p>

        <div
          class="border border-edge rounded-lg p-6 mt-6"
          style="background: rgba(0,0,0,0.5);"
        >
          <!-- Prompt -->
          <div class="mb-5">
            <label
              for="imagePrompt"
              class="block text-lg font-semibold mb-2 text-primary-foreground"
              >Opis obrazu</label
            >
            <div class="relative">
              <textarea
                id="imagePrompt"
                rows="3"
                class="w-full p-3 border border-edge rounded text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none pr-24"
                style="background: rgba(0,0,0,0.5);"
                placeholder="Np. Futurystyczne miasto o zachodzie s≈Ço≈Ñca, styl fotograficzny, 4K"
              ></textarea>
              
              <!-- Prompt Tools -->
              <div class="absolute top-2 right-2 flex gap-1">
                <button
                  id="translateBtn"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs transition-colors"
                  onclick="translatePrompt()"
                  title="Przet≈Çumacz na angielski"
                >üåê</button>
                <button
                  id="enhanceBtn"
                  class="bg-purple-600 hover:bg-purple-700 text-white px-2 py-1 rounded text-xs transition-colors"
                  onclick="enhancePrompt()"
                  title="Magic Prompt - ulepszanie przez AI Stable Diffusion"
                >‚ú®</button>
              </div>
            </div>
            
            <!-- Quick Prompt Templates -->
            <div class="mt-2 flex flex-wrap gap-1">
              <button onclick="setTemplate('photo')" class="prompt-template">üì∏ Fotograficzny</button>
              <button onclick="setTemplate('art')" class="prompt-template">üé® Artystyczny</button>
              <button onclick="setTemplate('anime')" class="prompt-template">üé≠ Anime</button>
              <button onclick="setTemplate('3d')" class="prompt-template">üéÆ 3D Render</button>
              <button onclick="setTemplate('vintage')" class="prompt-template">üìº Vintage</button>
            </div>
          </div>

          <!-- Controls -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Model</label
              >
              <select
                id="imageModel"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <!-- Cloudflare Models -->
                <optgroup label="üî• Cloudflare AI">
                  <option value="@cf/stabilityai/stable-diffusion-xl-base-1.0"
                    >Stable Diffusion XL</option
                  >
                  <option value="@cf/lykon/dreamshaper-8-lcm"
                    >DreamShaper 8 LCM</option
                  >
                  <option value="@cf/black-forest-labs/flux-1-schnell"
                    >Flux-1 Schnell</option
                  >
                </optgroup>
                
                <!-- External Free AI Models -->
                <optgroup label="üÜì Darmowe AI">
                  <option value="together_flux"
                    >Together AI - FLUX.1-schnell</option
                  >
                  <option value="hf_playground"
                    >HuggingFace - Playground v2.5</option
                  >
                  <option value="stability_sdxl"
                    >Stability AI - SDXL</option
                  >
                  <option value="openai_sora"
                    >OpenAI - Sora (Wideo - wkr√≥tce)</option
                  >
                </optgroup>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Styl</label
              >
              <select
                id="imageStyle"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="photographic">Fotograficzny</option>
                <option value="artistic">Artystyczny</option>
                <option value="digital">Cyfrowy</option>
                <option value="anime">Anime</option>
                <option value="abstract">Abstrakcyjny</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Rozmiar</label
              >
              <select
                id="imageSize"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="512x512">512√ó512 (kwadrat)</option>
                <option value="768x512">768√ó512 (poziomo)</option>
                <option value="512x768">512√ó768 (pionowo)</option>
                <option value="1024x1024">1024√ó1024 (du≈ºy)</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Kroki</label
              >
              <select
                id="imageSteps"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="15">15</option>
                <option value="25">25</option>
                <option value="35">35</option>
                <option value="50">50</option>
              </select>
            </div>
          </div>

          <!-- Action -->
          <div class="mb-5">
            <button
              id="generateBtn"
              class="w-full bg-cyan-600 hover:bg-cyan-700 text-white py-3 px-6 rounded-lg font-semibold text-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              onclick="generateImage()">üé® Generuj Obraz</button
            >
          </div>

          <!-- Loading -->
          <div id="loading" class="text-center py-3 hidden">
            <div
              class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"
            >
            </div>
            <p class="mt-2 text-muted-foreground">Generowanie obrazu...</p>
          </div>

          <!-- Error -->
          <div
            id="errorBox"
            class="mt-3 p-3 bg-red-900/50 border border-red-600 rounded hidden text-red-200"
          >
          </div>

          <!-- Result -->
          <div id="resultSection" class="hidden mt-5">
            <h3 class="text-xl font-semibold mb-3 text-primary-foreground">
              Wygenerowany obraz
            </h3>
            <div
              class="border border-edge rounded-lg p-3"
              style="background: rgba(0,0,0,0.5);"
            >
              <img
                id="generatedImage"
                class="w-full rounded mb-3"
                alt="Wygenerowany obraz"
              />
              <div class="flex gap-2 flex-wrap">
                <button
                  class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm"
                  onclick="downloadImage()">üíæ Pobierz</button
                >
                <button
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
                  onclick="shareImage()">üì§ Udostƒôpnij</button
                >
                <button
                  class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm"
                  onclick="generateVariation()">üîÑ Wariacja</button
                >
              </div>
            </div>
          </div>
        </div>

        <!-- History -->
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-3 text-primary-foreground">
            Historia
          </h3>
          <div id="historyGrid" class="grid grid-cols-2 md:grid-cols-4 gap-4">
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<style>
  .section-container {
    padding: 2rem;
    text-align: center;
  }
  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }
  .section-description {
    font-size: 1.1rem;
    color: #d1d5db;
    margin-bottom: 1.25rem;
  }
  .ai-workers-section {
    min-height: 100vh;
  }
  .prompt-template {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .prompt-template:hover {
    background: rgba(6, 182, 212, 0.2);
    border-color: #06b6d4;
    color: #06b6d4;
  }
  .quick-prompt-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .quick-prompt-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
  }
</style>

<script>
  // @ts-nocheck
  // Frontend for binary PNG API with loading/error/history (no template literals)
  var generationHistory = [];
  try {
    generationHistory = JSON.parse(
      localStorage.getItem("imageHistory") || "[]"
    );
  } catch (e) {
    generationHistory = [];
  }

  function parseSize(size) {
    var parts = String(size || "").split("x");
    var w = parseInt(parts[0], 10);
    var h = parseInt(parts[1], 10);
    if (isNaN(w) || isNaN(h)) {
      w = 512;
      h = 512;
    }
    return { width: w, height: h };
  }

  // Template prompts
  var promptTemplates = {
    photo: "professional photography, high quality, 4K, realistic, detailed",
    art: "digital art, masterpiece, highly detailed, artistic, beautiful colors",
    anime: "anime style, manga style, vibrant colors, cel shading, high quality",
    "3d": "3D render, octane render, cinema4d, blender, high quality, realistic lighting",
    vintage: "vintage style, retro, film photography, nostalgic, warm tones"
  };

  function setTemplate(type) {
    var promptEl = document.getElementById("imagePrompt");
    if (promptEl && promptTemplates[type]) {
      var currentText = promptEl.value.trim();
      if (currentText) {
        promptEl.value = currentText + ", " + promptTemplates[type];
      } else {
        promptEl.value = promptTemplates[type];
      }
    }
  }

  async function translatePrompt() {
    var promptEl = document.getElementById("imagePrompt");
    var translateBtn = document.getElementById("translateBtn");
    
    if (!promptEl || !translateBtn) return;
    
    var text = promptEl.value.trim();
    if (!text) {
      alert("Wprowad≈∫ tekst do przet≈Çumaczenia");
      return;
    }

    translateBtn.disabled = true;
    translateBtn.textContent = "‚è≥";
    
    try {
      var response = await fetch("/api/translate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: text,
          from: "pl",
          to: "en"
        })
      });

      if (!response.ok) {
        throw new Error("B≈ÇƒÖd t≈Çumaczenia");
      }

      var data = await response.json();
      if (data.success && data.translatedText) {
        promptEl.value = data.translatedText;
      } else {
        throw new Error(data.error || "Brak t≈Çumaczenia");
      }
    } catch (error) {
      console.error("Translation error:", error);
      alert("B≈ÇƒÖd t≈Çumaczenia: " + error.message);
    } finally {
      translateBtn.disabled = false;
      translateBtn.textContent = "üåê";
    }
  }

  async function enhancePrompt() {
    var promptEl = document.getElementById("imagePrompt");
    var enhanceBtn = document.getElementById("enhanceBtn");
    var styleEl = document.getElementById("imageStyle");
    
    if (!promptEl || !enhanceBtn) return;
    
    var text = promptEl.value.trim();
    if (!text) {
      alert("Wprowad≈∫ tekst do ulepszenia");
      return;
    }

    enhanceBtn.disabled = true;
    enhanceBtn.textContent = "‚è≥";
    
    try {
      var style = styleEl ? styleEl.value : "default";
      var response = await fetch("/api/magic-prompt", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: text,
          style: style
        })
      });

      if (!response.ok) {
        throw new Error("B≈ÇƒÖd Magic Prompt");
      }

      var data = await response.json();
      if (data.success && data.enhancedPrompt) {
        promptEl.value = data.enhancedPrompt;
        
        // Show enhancement info
        var info = document.createElement("div");
        info.className = "mt-1 text-xs text-green-400";
        info.textContent = "‚ú® Prompt ulepszony przez MagicPrompt-SD";
        
        var existingInfo = promptEl.parentElement.querySelector(".magic-info");
        if (existingInfo) existingInfo.remove();
        info.className += " magic-info";
        promptEl.parentElement.appendChild(info);
        
        setTimeout(() => {
          if (info.parentElement) info.remove();
        }, 3000);
      } else {
        throw new Error(data.error || "Brak ulepszonego promptu");
      }
    } catch (error) {
      console.error("Magic Prompt error:", error);
      alert("B≈ÇƒÖd Magic Prompt: " + error.message);
    } finally {
      enhanceBtn.disabled = false;
      enhanceBtn.textContent = "‚ú®";
    }
  }

  function setPrompt(p) {
    var el = document.getElementById("imagePrompt");
    if (el) el.value = p;
  }

  function blobToDataUrl(blob) {
    return new Promise(function (resolve, reject) {
      var r = new FileReader();
      r.onloadend = function () {
        resolve(String(r.result || ""));
      };
      r.onerror = reject;
      r.readAsDataURL(blob);
    });
  }

  async function generateImage() {
    var promptEl = document.getElementById("imagePrompt");
    var modelEl = document.getElementById("imageModel");
    var styleEl = document.getElementById("imageStyle");
    var sizeEl = document.getElementById("imageSize");
    var stepsEl = document.getElementById("imageSteps");
    var loading = document.getElementById("loading");
    var errorBox = document.getElementById("errorBox");
    var btn = document.getElementById("generateBtn");
    var result = document.getElementById("resultSection");

    var prompt = promptEl ? String(promptEl.value).trim() : "";
    if (!prompt) {
      alert("Proszƒô wprowadziƒá opis obrazu");
      return;
    }

    if (errorBox) {
      errorBox.classList.add("hidden");
      errorBox.textContent = "";
    }
    if (result) result.classList.add("hidden");
    if (loading) loading.classList.remove("hidden");
    if (btn) {
      btn.disabled = true;
      btn.textContent = "Generowanie...";
    }

    try {
      var model = modelEl ? String(modelEl.value) : "";
      var style = styleEl ? String(styleEl.value) : "";
      var steps = stepsEl ? parseInt(String(stepsEl.value), 10) : undefined;
      var size = sizeEl ? String(sizeEl.value) : "512x512";
      var dims = parseSize(size);

      var res = await fetch("/api/generate-image", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: prompt,
          model: model,
          style: style,
          width: dims.width,
          height: dims.height,
          steps: steps,
        }),
      });

      if (!res.ok) {
        var errMsg = "B≈ÇƒÖd generacji obrazu";
        try {
          var j = await res.json();
          if (j && j.error) errMsg = j.error;
        } catch (e) {}
        throw new Error(errMsg);
      }

      var img = document.getElementById("generatedImage");
      var objUrl;

      // Check if it's JSON response (external models) or blob (Cloudflare)
      var contentType = res.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        // External model response with base64 image
        var jsonData = await res.json();
        if (jsonData.success && jsonData.image) {
          if (img) img.src = jsonData.image; // Already data URL
          objUrl = jsonData.image;
          
          // Show provider info
          var providerInfo = document.createElement("div");
          providerInfo.className = "mt-2 text-sm text-cyan-400";
          providerInfo.textContent = "Wygenerowane przez: " + (jsonData.provider || "AI");
          if (result) {
            var existingInfo = result.querySelector(".provider-info");
            if (existingInfo) existingInfo.remove();
            providerInfo.className += " provider-info";
            result.appendChild(providerInfo);
          }
        } else {
          throw new Error(jsonData.error || "B≈ÇƒÖd zewnƒôtrznego API");
        }
      } else {
        // Cloudflare blob response
        var blob = await res.blob();
        objUrl = URL.createObjectURL(blob);
        if (img) img.src = objUrl;
      }
      
      if (result) result.classList.remove("hidden");

      // Persist history as data URL to survive reloads
      try {
        var dataUrl;
        if (contentType && contentType.includes("application/json")) {
          // For external models, use the base64 data URL directly
          dataUrl = objUrl;
        } else {
          // For Cloudflare models, convert blob to data URL
          dataUrl = await blobToDataUrl(blob);
        }
        
        var item = {
          id: Date.now(),
          prompt: prompt,
          imageUrl: dataUrl,
          ts: new Date().toISOString(),
          settings: {
            model: model,
            style: style,
            width: dims.width,
            height: dims.height,
            steps: steps,
          },
        };
        generationHistory.unshift(item);
        if (generationHistory.length > 20)
          generationHistory = generationHistory.slice(0, 20);
        localStorage.setItem("imageHistory", JSON.stringify(generationHistory));
        updateHistoryDisplay();
      } catch (e) {}
    } catch (err) {
      console.error("Generation error:", err);
      if (errorBox) {
        errorBox.textContent = err && err.message ? err.message : String(err);
        errorBox.classList.remove("hidden");
      }
    } finally {
      if (loading) loading.classList.add("hidden");
      if (btn) {
        btn.disabled = false;
        btn.textContent = "üé® Generuj Obraz";
      }
    }
  }

  function downloadImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    var link = document.createElement("a");
    link.download = "generated_image.png";
    link.href = img.src;
    link.click();
  }

  function shareImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    if (navigator.share) {
      navigator
        .share({ title: "Wygenerowany obraz AI", url: img.src })
        .catch(function () {});
    } else if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(img.src);
      alert("Link do obrazu skopiowany do schowka!");
    }
  }

  function generateVariation() {
    var promptEl = document.getElementById("imagePrompt");
    var currentPrompt = promptEl ? String(promptEl.value) : "";
    var v = [
      ", w innym stylu",
      ", z innymi kolorami",
      ", z innej perspektywy",
      ", w wersji artystycznej",
      ", z dodatkowymi detalami",
    ];
    var add = v[Math.floor(Math.random() * v.length)];
    if (promptEl) promptEl.value = currentPrompt + add;
    generateImage();
  }

  function createHistoryCard(item) {
    var wrap = document.createElement("div");
    wrap.className =
      "history-item border border-edge rounded-lg p-2 cursor-pointer hover:border-cyan-400 transition-colors";
    wrap.style.background = "rgba(0,0,0,0.5)";
    var image = document.createElement("img");
    image.src = item.imageUrl;
    image.alt = "Historia";
    image.className = "w-full aspect-square object-cover rounded mb-2";
    wrap.appendChild(image);
    var p = document.createElement("p");
    p.className = "text-xs text-gray-400 truncate";
    p.textContent = item.prompt;
    wrap.appendChild(p);
    wrap.onclick = function () {
      var el = document.getElementById("imagePrompt");
      if (el) el.value = item.prompt;
      var img = document.getElementById("generatedImage");
      if (img) img.src = item.imageUrl;
      var res = document.getElementById("resultSection");
      if (res) res.classList.remove("hidden");
    };
    return wrap;
  }

  function updateHistoryDisplay() {
    var grid = document.getElementById("historyGrid");
    if (!grid) return;
    grid.innerHTML = "";
    var items = generationHistory.slice(0, 8);
    for (var i = 0; i < items.length; i++) {
      grid.appendChild(createHistoryCard(items[i]));
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    updateHistoryDisplay();
  });
</script>
