---
import BackroomInterface from '@/layouts/BackroomInterface.astro';
import AiHelpAssistant from '@/components/AiHelpAssistant.svelte';
---

<BackroomInterface siteTitle="Generator Obrazów | AI Workers">
  <div class="fixed inset-0 bg-[#0f1419] -z-10">
    <div class="absolute inset-0 bg-gradient-to-br from-cyan-900/15 via-[#0f1419] to-[#0f1419]"></div>
  </div>

  <section class="backroom-header">
    <div class="backroom-container">
      <h1 class="backroom-title">Generator Obrazów AI</h1>
      <p class="backroom-description">Zaawansowany generator obrazów z AI. Flux-1 Schnell, Stable Diffusion, DALL-E i więcej!</p>
    </div>
  </section>

  <section class="backroom-section">
    <div class="backroom-container">
      <div class="function-container">
        <h2 class="text-2xl font-semibold text-primary mb-5">🎨 Generator Obrazów</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <div class="border border-edge rounded-lg p-4 text-center" style="background: rgba(0,0,0,0.5);">
            <div class="text-2xl mb-2">🎨</div>
            <div class="text-xl font-bold text-primary-foreground" id="totalGenerated">0</div>
            <div class="text-sm text-gray-400">Wygenerowanych obrazów</div>
          </div>
          <div class="border border-edge rounded-lg p-4 text-center" style="background: rgba(0,0,0,0.5);">
            <div class="text-2xl mb-2">⚡</div>
            <div class="text-xl font-bold text-primary-foreground" id="avgTime">-</div>
            <div class="text-sm text-gray-400">Średni czas generacji</div>
          </div>
          <div class="border border-edge rounded-lg p-4 text-center" style="background: rgba(0,0,0,0.5);">
            <div class="text-2xl mb-2">🤖</div>
            <div class="text-xl font-bold text-primary-foreground" id="activeModel">Flux-1</div>
            <div class="text-sm text-gray-400">Aktywny model</div>
          </div>
          <div class="border border-edge rounded-lg p-4 text-center" style="background: rgba(0,0,0,0.5);">
            <div class="text-2xl mb-2">💾</div>
            <div class="text-xl font-bold text-primary-foreground" id="savedImages">0</div>
            <div class="text-sm text-gray-400">Zapisane obrazy</div>
          </div>
        </div>

        <div class="border border-edge rounded-lg p-6 mt-6" style="background: rgba(0,0,0,0.5);">
          <!-- Prompt -->
          <div class="mb-5">
            <label for="imagePrompt" class="block text-lg font-semibold mb-2 text-primary-foreground">Opis obrazu</label>
            <div class="relative">
              <textarea id="imagePrompt" rows="3" class="w-full p-3 border border-edge rounded text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none pr-24" style="background: rgba(0,0,0,0.5);" placeholder="Np. Futurystyczne miasto o zachodzie słońca, styl fotograficzny, 4K"></textarea>
              
              <!-- Prompt Tools -->
              <div class="absolute top-2 right-2 flex gap-1">
                <button id="translateBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs transition-colors" onclick="translatePrompt()" title="Przetłumacz na angielski">🌐</button>
                <button id="enhanceBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-2 py-1 rounded text-xs transition-colors" onclick="enhancePrompt()" title="Magic Prompt - ulepszanie przez AI Stable Diffusion">✨</button>
              </div>
            </div>
            
            <!-- Quick Prompt Templates -->
            <div class="mt-2 flex flex-wrap gap-1">
              <button onclick="setTemplate('photo')" class="prompt-template">📸 Fotograficzny</button>
              <button onclick="setTemplate('art')" class="prompt-template">🎨 Artystyczny</button>
              <button onclick="setTemplate('anime')" class="prompt-template">🎭 Anime</button>
              <button onclick="setTemplate('3d')" class="prompt-template">🎮 3D Render</button>
              <button onclick="setTemplate('vintage')" class="prompt-template">📼 Vintage</button>
            </div>
          </div>

          <!-- Controls -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Model</label>
              <select id="imageModel" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0,0,0,0.5);" onchange="updateActiveModel()">
                <!-- Cloudflare Models -->
                <optgroup label="🔥 Cloudflare AI">
                  <option value="@cf/stabilityai/stable-diffusion-xl-base-1.0">Stable Diffusion XL</option>
                  <option value="@cf/lykon/dreamshaper-8-lcm">DreamShaper 8 LCM</option>
                  <option value="@cf/black-forest-labs/flux-1-schnell">Flux-1 Schnell</option>
                </optgroup>
                
                <!-- External Free AI Models -->
                <optgroup label="🆓 Darmowe AI - Obrazy">
                  <option value="stabilityai/stable-diffusion-3-medium">Stable Diffusion 3 Medium</option>
                  <option value="black-forest-labs/flux-1.1-pro">FLUX 1.1 Pro</option>
                  <option value="together_flux">Together AI - FLUX.1-schnell</option>
                  <option value="hf_playground">HuggingFace - Playground v2.5</option>
                </optgroup>
                
                <!-- Video Generation -->
                <optgroup label="🎬 Generowanie Wideo">
                  <option value="openai/sora-turbo">OpenAI - Sora Turbo (Free)</option>
                </optgroup>
                
                <!-- 3D & Photo2Photo -->
                <optgroup label="🎨 Specjalne">
                  <option value="triposr-3d">TripoSR - 3D Models</option>
                  <option value="rembg-photo2photo">Photo2Photo - ControlNet</option>
                </optgroup>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Typ Generowania</label>
              <select id="generationType" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0,0,0,0.5);" onchange="updateGenerationType()">
                <option value="image">🖼️ Obraz (Image)</option>
                <option value="video">🎬 Wideo (5s)</option>
                <option value="3d">🎲 Model 3D</option>
                <option value="photo2photo">📸 Photo2Photo</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Styl</label>
              <select id="imageStyle" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0,0,0,0.5);">
                <option value="photographic">📸 Fotograficzny</option>
                <option value="artistic">🎨 Artystyczny</option>
                <option value="digital">💻 Cyfrowy</option>
                <option value="anime">🎭 Anime</option>
                <option value="abstract">🌈 Abstrakcyjny</option>
                <option value="cinematic">🎬 Kinowy</option>
                <option value="fantasy">🧙 Fantasy</option>
                <option value="cyberpunk">🤖 Cyberpunk</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Rozmiar</label>
              <select id="imageSize" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0,0,0,0.5);">
                <option value="512x512">512×512 (kwadrat)</option>
                <option value="768x512">768×512 (poziomo)</option>
                <option value="512x768">512×768 (pionowo)</option>
                <option value="1024x1024">1024×1024 (duży)</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2 text-primary-foreground">Kroki</label>
              <select id="imageSteps" class="w-full p-2 border border-edge rounded text-primary-foreground" style="background: rgba(0,0,0,0.5);">
                <option value="15">15</option>
                <option value="25">25</option>
                <option value="35">35</option>
                <option value="50">50</option>
              </select>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="mb-5 grid grid-cols-1 md:grid-cols-3 gap-3">
            <button id="generateBtn" class="action-btn">✨ <span id="generateBtnText">Generuj Obraz</span></button>
            <button id="randomPromptBtn" class="action-btn-secondary" onclick="generateRandomPrompt()">🎲 Losowy Prompt</button>
            <button id="savePresetBtn" class="action-btn-secondary" onclick="saveCurrentPreset()">💾 Zapisz Preset</button>
          </div>

          <!-- Loading -->
          <div id="loading" class="text-center py-3 hidden">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"></div>
            <p class="mt-2 text-muted-foreground">Generowanie obrazu...</p>
          </div>

          <!-- Error -->
          <div id="errorBox" class="mt-3 p-3 bg-red-900/50 border border-red-600 rounded hidden text-red-200"></div>

          <!-- Generated Image Result -->
          <div id="resultSection" class="mt-6 hidden">
            <h3 class="text-xl font-semibold mb-4 text-primary-foreground">🖼️ Wygenerowany obraz</h3>
            <div class="border border-edge rounded-lg p-4" style="background: rgba(0,0,0,0.3);">
              <div class="text-center">
                <img id="generatedImage" src="" alt="Wygenerowany obraz" class="max-w-full h-auto rounded-lg shadow-lg mx-auto mb-4" style="max-height: 600px;" />
                <div class="flex justify-center gap-2 mt-4">
                  <button onclick="downloadImage()" class="action-btn-secondary">💾 Pobierz</button>
                  <button onclick="shareImage()" class="action-btn-secondary">📤 Udostępnij</button>
                  <button onclick="saveToGallery()" class="action-btn-secondary">⭐ Zapisz do galerii</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Results Grid -->
          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4 text-primary-foreground">🖼️ Galeria wyników</h3>
            <div id="resultsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- POLACZEK_T Floating Assistant -->
  <div class="fixed bottom-5 right-5 z-50">
    <button id="polaczekBtn" class="action-btn">🤖 POLACZEK_T</button>
    <div id="polaczekWidget" class="hidden absolute bottom-16 right-0 w-96 bg-surface border border-edge rounded-lg shadow-lg">
      <AiHelpAssistant client:load pageTitle="Generator Obrazów | AI Workers" />
    </div>
  </div>

  <script>
    // @ts-nocheck
    // Frontend for binary PNG API with loading/error/history (no template literals)
    var generationHistory = [];
    try {
      generationHistory = JSON.parse(
        localStorage.getItem("imageHistory") || "[]"
      );
    } catch (e) {
      generationHistory = [];
    }

    function parseSize(size) {
      var parts = String(size || "").split("x");
      var w = parseInt(parts[0], 10);
      var h = parseInt(parts[1], 10);
      if (isNaN(w) || isNaN(h)) {
        w = 512;
        h = 512;
      }
      return { width: w, height: h };
    }

    // Template prompts
    var promptTemplates = {
      photo: "professional photography, high quality, 4K, realistic, detailed",
      art: "digital art, masterpiece, highly detailed, artistic, beautiful colors",
      anime: "anime style, manga style, vibrant colors, cel shading, high quality",
      "3d": "3D render, octane render, cinema4d, blender, high quality, realistic lighting",
      vintage: "vintage style, retro, film photography, nostalgic, warm tones"
    };

    function setTemplate(type) {
      var promptEl = document.getElementById("imagePrompt");
      if (promptEl && promptTemplates[type]) {
        var currentText = promptEl.value.trim();
        if (currentText) {
          promptEl.value = currentText + ", " + promptTemplates[type];
        } else {
          promptEl.value = promptTemplates[type];
        }
      }
    }

    async function translatePrompt() {
      var promptEl = document.getElementById("imagePrompt");
      var translateBtn = document.getElementById("translateBtn");
      
      if (!promptEl || !translateBtn) return;
      
      var text = promptEl.value.trim();
      if (!text) {
        alert("Wprowadź tekst do przetłumaczenia");
        return;
      }

      translateBtn.disabled = true;
      translateBtn.textContent = "⏳";
      
      try {
        var response = await fetch("/api/translate", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            text: text,
            from: "pl",
            to: "en"
          })
        });

        if (!response.ok) {
          throw new Error("Błąd tłumaczenia");
        }

        var data = await response.json();
        if (data.success && data.translatedText) {
          promptEl.value = data.translatedText;
        } else {
          throw new Error(data.error || "Brak tłumaczenia");
        }
      } catch (error) {
        console.error("Translation error:", error);
        alert("Błąd tłumaczenia: " + error.message);
      } finally {
        translateBtn.disabled = false;
        translateBtn.textContent = "🌐";
      }
    }

    async function enhancePrompt() {
      var promptEl = document.getElementById("imagePrompt");
      var enhanceBtn = document.getElementById("enhanceBtn");
      var styleEl = document.getElementById("imageStyle");
      
      if (!promptEl || !enhanceBtn) return;
      
      var text = promptEl.value.trim();
      if (!text) {
        alert("Wprowadź tekst do ulepszenia");
        return;
      }

      enhanceBtn.disabled = true;
      enhanceBtn.textContent = "⏳";
      
      try {
        var style = styleEl ? styleEl.value : "default";
        var response = await fetch("/api/magic-prompt", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            prompt: text,
            style: style
          })
        });

        if (!response.ok) {
          throw new Error("Błąd Magic Prompt");
        }

        var data = await response.json();
        if (data.success && data.enhancedPrompt) {
          promptEl.value = data.enhancedPrompt;
          
          // Show enhancement info
          var info = document.createElement("div");
          info.className = "mt-1 text-xs text-green-400";
          info.textContent = "✨ Prompt ulepszony przez MagicPrompt-SD";
          
          var existingInfo = promptEl.parentElement.querySelector(".magic-info");
          if (existingInfo) existingInfo.remove();
          info.className += " magic-info";
          promptEl.parentElement.appendChild(info);
          
          setTimeout(() => {
            if (info.parentElement) info.remove();
          }, 3000);
        } else {
          throw new Error(data.error || "Brak ulepszonego promptu");
        }
      } catch (error) {
        console.error("Magic Prompt error:", error);
        alert("Błąd Magic Prompt: " + error.message);
      } finally {
        enhanceBtn.disabled = false;
        enhanceBtn.textContent = "✨";
      }
    }

    function setPrompt(p) {
      var el = document.getElementById("imagePrompt");
      if (el) el.value = p;
    }

    function blobToDataUrl(blob) {
      return new Promise(function (resolve, reject) {
        var r = new FileReader();
        r.onloadend = function () {
          resolve(String(r.result || ""));
        };
        r.onerror = reject;
        r.readAsDataURL(blob);
      });
    }

    async function generateImage() {
      var promptEl = document.getElementById("imagePrompt");
      var modelEl = document.getElementById("imageModel");
      var styleEl = document.getElementById("imageStyle");
      var sizeEl = document.getElementById("imageSize");
      var stepsEl = document.getElementById("imageSteps");
      var loading = document.getElementById("loading");
      var errorBox = document.getElementById("errorBox");
      var btn = document.getElementById("generateBtn");
      var result = document.getElementById("resultSection");

      var prompt = promptEl ? String(promptEl.value).trim() : "";
      if (!prompt) {
        alert("Proszę wprowadzić opis obrazu");
        return;
      }

      if (errorBox) {
        errorBox.classList.add("hidden");
        errorBox.textContent = "";
      }
      if (result) result.classList.add("hidden");
      if (loading) loading.classList.remove("hidden");
      if (btn) {
        btn.disabled = true;
        btn.textContent = "Generowanie...";
      }

      try {
        var model = modelEl ? String(modelEl.value) : "";
        var style = styleEl ? String(styleEl.value) : "";
        var steps = stepsEl ? parseInt(String(stepsEl.value), 10) : undefined;
        var size = sizeEl ? String(sizeEl.value) : "512x512";
        var dims = parseSize(size);

        var res = await fetch("/api/generate-image", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            prompt: prompt,
            model: model,
            style: style,
            width: dims.width,
            height: dims.height,
            steps: steps,
          }),
        });

        if (!res.ok) {
          var errMsg = "Błąd generacji obrazu";
          try {
            var j = await res.json();
            if (j && j.error) errMsg = j.error;
          } catch (e) {}
          throw new Error(errMsg);
        }

        var img = document.getElementById("generatedImage");
        var objUrl;

        // Check if it's JSON response (external models) or blob (Cloudflare)
        var contentType = res.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          // External model response with base64 image
          var jsonData = await res.json();
          if (jsonData.success && jsonData.image) {
            if (img) img.src = jsonData.image; // Already data URL
            objUrl = jsonData.image;
            
            // Show provider info
            var providerInfo = document.createElement("div");
            providerInfo.className = "mt-2 text-sm text-cyan-400";
            providerInfo.textContent = "Wygenerowane przez: " + (jsonData.provider || "AI");
            if (result) {
              var existingInfo = result.querySelector(".provider-info");
              if (existingInfo) existingInfo.remove();
              providerInfo.className += " provider-info";
              result.appendChild(providerInfo);
            }
          } else {
            throw new Error(jsonData.error || "Błąd zewnętrznego API");
          }
        } else {
          // Cloudflare blob response
          var blob = await res.blob();
          objUrl = URL.createObjectURL(blob);
          if (img) img.src = objUrl;
        }
        
        if (result) result.classList.remove("hidden");

        // Persist history as data URL to survive reloads
        try {
          var dataUrl;
          if (contentType && contentType.includes("application/json")) {
            // For external models, use the base64 data URL directly
            dataUrl = objUrl;
          } else {
            // For Cloudflare models, convert blob to data URL
            dataUrl = await blobToDataUrl(blob);
          }
          
          var item = {
            id: Date.now(),
            prompt: prompt,
            imageUrl: dataUrl,
            ts: new Date().toISOString(),
            settings: {
              model: model,
              style: style,
              width: dims.width,
              height: dims.height,
              steps: steps,
            },
          };
          generationHistory.unshift(item);
          if (generationHistory.length > 20)
            generationHistory = generationHistory.slice(0, 20);
          localStorage.setItem("imageHistory", JSON.stringify(generationHistory));
          updateHistoryDisplay();
        } catch (e) {}
      } catch (err) {
        console.error("Generation error:", err);
        if (errorBox) {
          errorBox.textContent = err && err.message ? err.message : String(err);
          errorBox.classList.remove("hidden");
        }
      } finally {
        if (loading) loading.classList.add("hidden");
        if (btn) {
          btn.disabled = false;
          btn.textContent = "🎨 Generuj Obraz";
        }
      }
    }

    // Missing functions implementation
    function generateRandomPrompt() {
      const randomPrompts = [
        "A futuristic city at sunset, cyberpunk style, neon lights",
        "A magical forest with glowing mushrooms, fantasy art",
        "A cat wearing a space helmet, digital art, cute",
        "An ancient temple in the mountains, atmospheric lighting",
        "A steampunk airship flying through clouds, detailed",
        "A dragon sleeping on a pile of gold, fantasy painting",
        "A robot gardening flowers, whimsical digital art",
        "A lighthouse during a storm, dramatic lighting"
      ];
      const randomPrompt = randomPrompts[Math.floor(Math.random() * randomPrompts.length)];
      const promptEl = document.getElementById("imagePrompt");
      if (promptEl) {
        promptEl.value = randomPrompt;
      }
    }

    function saveCurrentPreset() {
      const preset = {
        model: document.getElementById("imageModel")?.value || "",
        style: document.getElementById("imageStyle")?.value || "",
        size: document.getElementById("imageSize")?.value || "",
        steps: document.getElementById("imageSteps")?.value || ""
      };
      localStorage.setItem("imageGeneratorPreset", JSON.stringify(preset));
      alert("Preset zapisany!");
    }

    function updateActiveModel() {
      const modelSelect = document.getElementById("imageModel");
      const activeModelDisplay = document.getElementById("activeModel");
      
      if (modelSelect && activeModelDisplay) {
        const selectedModel = modelSelect.value;
        let displayName = selectedModel;
        
        // Skróć nazwę modelu dla lepszego wyświetlania
        if (selectedModel.includes('flux-1-schnell')) displayName = 'Flux-1';
        else if (selectedModel.includes('stable-diffusion-xl')) displayName = 'SD XL';
        else if (selectedModel.includes('dreamshaper')) displayName = 'DreamShaper';
        else if (selectedModel.includes('flux-1.1-pro')) displayName = 'FLUX 1.1';
        else if (selectedModel.includes('sora-turbo')) displayName = 'Sora';
        
        activeModelDisplay.textContent = displayName;
      }
    }

    function loadSavedPreset() {
      try {
        const savedPreset = localStorage.getItem("imageGeneratorPreset");
        if (savedPreset) {
          const preset = JSON.parse(savedPreset);
          
          const modelEl = document.getElementById("imageModel");
          const styleEl = document.getElementById("imageStyle");
          const sizeEl = document.getElementById("imageSize");
          const stepsEl = document.getElementById("imageSteps");
          
          if (preset.model && modelEl) modelEl.value = preset.model;
          if (preset.style && styleEl) styleEl.value = preset.style;
          if (preset.size && sizeEl) sizeEl.value = preset.size;
          if (preset.steps && stepsEl) stepsEl.value = preset.steps;
          
          // Aktualizuj wyświetlanie aktywnego modelu
          updateActiveModel();
        }
      } catch (e) {
        console.log("Błąd ładowania presetu:", e);
      }
    }

    function updateGenerationType() {
      const type = document.getElementById("generationType")?.value;
      const generateBtn = document.getElementById("generateBtnText");
      if (generateBtn) {
        switch(type) {
          case "video": generateBtn.textContent = "Generuj Wideo"; break;
          case "3d": generateBtn.textContent = "Generuj Model 3D"; break;
          case "photo2photo": generateBtn.textContent = "Przekształć Zdjęcie"; break;
          default: generateBtn.textContent = "Generuj Obraz"; break;
        }
      }
    }

    function updateHistoryDisplay() {
      try {
        const history = JSON.parse(localStorage.getItem("imageHistory") || "[]");
        const historyContainer = document.getElementById("historyContainer");
        if (historyContainer && history.length > 0) {
          historyContainer.innerHTML = history.slice(0, 5).map(item => 
            `<div class="history-item">
              <img src="${item.imageUrl}" alt="Generated" style="width: 100px; height: 100px; object-fit: cover;">
              <p>${item.prompt.substring(0, 50)}...</p>
            </div>`
          ).join("");
        }
      } catch (e) {
        console.log("History display error:", e);
      }
    }

    function updateGlobalStats() {
      try {
        const history = JSON.parse(localStorage.getItem("imageHistory") || "[]");
        const countEl = document.querySelector('[data-stat="generated-count"]');
        const savedEl = document.querySelector('[data-stat="saved-count"]');
        
        if (countEl) countEl.textContent = history.length;
        if (savedEl) savedEl.textContent = history.filter(item => item.saved).length;
      } catch (e) {
        console.log("Stats update error:", e);
      }
    }

    function updateGenerationUI() {
      const type = document.getElementById("generationType")?.value;
      const generateBtn = document.getElementById("generateBtn");
      const sourceImageSection = document.getElementById("sourceImageSection");
      
      if (generateBtn) {
        switch(type) {
          case "video": generateBtn.textContent = "🎬 Generuj Wideo"; break;
          case "3d": generateBtn.textContent = "🎲 Generuj Model 3D"; break;
          case "photo2photo": generateBtn.textContent = "📸 Przekształć Zdjęcie"; break;
          default: generateBtn.textContent = "✨ Generuj Obraz"; break;
        }
      }
      
      // Show/hide source image upload for photo2photo
      if (sourceImageSection) {
        sourceImageSection.style.display = (type === "photo2photo") ? "block" : "none";
      }
    }

    function handleSourceImageUpload(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.getElementById("sourceImagePreview");
          if (preview) {
            preview.src = e.target.result;
            preview.style.display = "block";
          }
        };
        reader.readAsDataURL(file);
      }
    }

    function toggleNSFWBlur() {
      const toggle = document.getElementById("nsfwBlur");
      const images = document.querySelectorAll(".generated-image");
      images.forEach(img => {
        if (toggle.checked) {
          img.style.filter = "blur(10px)";
        } else {
          img.style.filter = "none";
        }
      });
    }

    // Image management functions
    function downloadImage() {
      const img = document.getElementById("generatedImage");
      if (!img || !img.src) return;
      
      const link = document.createElement("a");
      link.href = img.src;
      link.download = `mybonzo-generated-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    function shareImage() {
      const img = document.getElementById("generatedImage");
      if (!img || !img.src) return;
      
      if (navigator.share) {
        fetch(img.src)
          .then(res => res.blob())
          .then(blob => {
            const file = new File([blob], `mybonzo-generated-${Date.now()}.png`, { type: "image/png" });
            return navigator.share({
              title: "Wygenerowany obraz AI",
              text: "Sprawdź ten obraz wygenerowany przez AI na MyBonzo!",
              files: [file]
            });
          })
          .catch(err => console.log("Share error:", err));
      } else {
        // Fallback - copy to clipboard
        const url = window.location.href;
        navigator.clipboard.writeText(url).then(() => {
          alert("Link do strony skopiowany do schowka!");
        });
      }
    }

    function saveToGallery() {
      const img = document.getElementById("generatedImage");
      const prompt = document.getElementById("imagePrompt")?.value;
      
      if (!img || !img.src) return;
      
      try {
        const history = JSON.parse(localStorage.getItem("imageHistory") || "[]");
        const currentItem = history.find(item => item.imageUrl === img.src);
        
        if (currentItem) {
          currentItem.saved = true;
          currentItem.savedAt = new Date().toISOString();
          localStorage.setItem("imageHistory", JSON.stringify(history));
          alert("Obraz zapisany do galerii!");
          updateGlobalStats();
        }
      } catch (e) {
        console.error("Save to gallery error:", e);
        alert("Błąd podczas zapisywania do galerii");
      }
    }

    // Initialize
    document.addEventListener("DOMContentLoaded", function () {
      updateHistoryDisplay();
      updateGlobalStats();
      updateGenerationUI();
      loadSavedPreset(); // Ładowanie zapisanego presetu
      updateActiveModel(); // Inicjalna aktualizacja nazwy modelu
      
      // Setup generate button
      var generateBtn = document.getElementById("generateBtn");
      if (generateBtn) {
        generateBtn.onclick = generateImage;
      }
      
      // Setup generation type change handler
      var generationTypeSelect = document.getElementById("generationType");
      if (generationTypeSelect) {
        generationTypeSelect.onchange = updateGenerationUI;
      }
      
      // Setup source image upload handler
      var sourceImageInput = document.getElementById("sourceImage");
      if (sourceImageInput) {
        sourceImageInput.onchange = handleSourceImageUpload;
      }
      
      // Setup NSFW blur toggle
      var nsfwBlurToggle = document.getElementById("nsfwBlur");
      if (nsfwBlurToggle) {
        nsfwBlurToggle.onchange = toggleNSFWBlur;
      }
      
      // Setup canvas and file upload
      setupCanvas();
      setupFileUpload();
    });

    // POLACZEK_T Assistant
    const polaczekBtn = document.getElementById('polaczekBtn');
    const polaczekWidget = document.getElementById('polaczekWidget');

    polaczekBtn.addEventListener('click', () => {
      polaczekWidget.classList.toggle('hidden');
    });
  </script>

  <style>
    .prompt-template {
      @apply px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded transition-colors;
    }
    
    .action-btn {
      @apply w-full px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded font-semibold transition-colors flex items-center justify-center gap-2;
    }
    
    .action-btn-secondary {
      @apply w-full px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded font-semibold transition-colors flex items-center justify-center gap-2;
    }
    
    .action-btn:disabled {
      @apply bg-gray-500 cursor-not-allowed;
    }
  </style>
</BackroomInterface>
