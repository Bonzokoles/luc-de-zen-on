---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
---

<MyBonzoLayout
  siteTitle="Generator ObrazÃ³w | AI Workers"
  description="Generuj obrazy z tekstu za pomocÄ… Cloudflare AI."
>
  <main class="min-h-svh">
    <section class="ai-workers-section py-10">
      <div class="section-container max-w-4xl mx-auto">
        <h1 class="section-title">GENERATOR OBRAZÃ“W AI</h1>
        <p class="section-description">
          Podaj opis i wybierz parametry. Otrzymasz PNG bezpoÅ›rednio z serwera.
        </p>

        <div
          class="border border-edge rounded-lg p-6 mt-6"
          style="background: rgba(0,0,0,0.5);"
        >
          <!-- Prompt -->
          <div class="mb-5">
            <label
              for="imagePrompt"
              class="block text-lg font-semibold mb-2 text-primary-foreground"
              >Opis obrazu</label
            >
            <textarea
              id="imagePrompt"
              rows="3"
              class="w-full p-3 border border-edge rounded text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none"
              style="background: rgba(0,0,0,0.5);"
              placeholder="Np. Futurystyczne miasto o zachodzie sÅ‚oÅ„ca, styl fotograficzny, 4K"
            ></textarea>
          </div>

          <!-- Controls -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Model</label
              >
              <select
                id="imageModel"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="@cf/stabilityai/stable-diffusion-xl-base-1.0"
                  >Stable Diffusion XL</option
                >
                <option value="@cf/lykon/dreamshaper-8-lcm"
                  >DreamShaper 8 LCM</option
                >
                <option value="@cf/black-forest-labs/flux-1-schnell"
                  >Flux-1 Schnell</option
                >
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Styl</label
              >
              <select
                id="imageStyle"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="photographic">Fotograficzny</option>
                <option value="artistic">Artystyczny</option>
                <option value="digital">Cyfrowy</option>
                <option value="anime">Anime</option>
                <option value="abstract">Abstrakcyjny</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Rozmiar</label
              >
              <select
                id="imageSize"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="512x512">512Ã—512 (kwadrat)</option>
                <option value="768x512">768Ã—512 (poziomo)</option>
                <option value="512x768">512Ã—768 (pionowo)</option>
                <option value="1024x1024">1024Ã—1024 (duÅ¼y)</option>
              </select>
            </div>
            <div>
              <label
                class="block text-sm font-medium mb-2 text-primary-foreground"
                >Kroki</label
              >
              <select
                id="imageSteps"
                class="w-full p-2 border border-edge rounded text-primary-foreground"
                style="background: rgba(0,0,0,0.5);"
              >
                <option value="15">15</option>
                <option value="25">25</option>
                <option value="35">35</option>
                <option value="50">50</option>
              </select>
            </div>
          </div>

          <!-- Action -->
          <div class="mb-5">
            <button
              id="generateBtn"
              class="w-full bg-cyan-600 hover:bg-cyan-700 text-white py-3 px-6 rounded-lg font-semibold text-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              onclick="generateImage()">ðŸŽ¨ Generuj Obraz</button
            >
          </div>

          <!-- Loading -->
          <div id="loading" class="text-center py-3 hidden">
            <div
              class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"
            >
            </div>
            <p class="mt-2 text-muted-foreground">Generowanie obrazu...</p>
          </div>

          <!-- Error -->
          <div
            id="errorBox"
            class="mt-3 p-3 bg-red-900/50 border border-red-600 rounded hidden text-red-200"
          >
          </div>

          <!-- Result -->
          <div id="resultSection" class="hidden mt-5">
            <h3 class="text-xl font-semibold mb-3 text-primary-foreground">
              Wygenerowany obraz
            </h3>
            <div
              class="border border-edge rounded-lg p-3"
              style="background: rgba(0,0,0,0.5);"
            >
              <img
                id="generatedImage"
                class="w-full rounded mb-3"
                alt="Wygenerowany obraz"
              />
              <div class="flex gap-2 flex-wrap">
                <button
                  class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm"
                  onclick="downloadImage()">ðŸ’¾ Pobierz</button
                >
                <button
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
                  onclick="shareImage()">ðŸ“¤ UdostÄ™pnij</button
                >
                <button
                  class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm"
                  onclick="generateVariation()">ðŸ”„ Wariacja</button
                >
              </div>
            </div>
          </div>
        </div>

        <!-- History -->
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-3 text-primary-foreground">
            Historia
          </h3>
          <div id="historyGrid" class="grid grid-cols-2 md:grid-cols-4 gap-4">
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<style>
  .section-container {
    padding: 2rem;
    text-align: center;
  }
  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }
  .section-description {
    font-size: 1.1rem;
    color: #d1d5db;
    margin-bottom: 1.25rem;
  }
  .ai-workers-section {
    min-height: 100vh;
  }
  .quick-prompt-btn {
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .quick-prompt-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
  }
</style>

<script>
  // @ts-nocheck
  // Frontend for binary PNG API with loading/error/history (no template literals)
  var generationHistory = [];
  try {
    generationHistory = JSON.parse(
      localStorage.getItem("imageHistory") || "[]"
    );
  } catch (e) {
    generationHistory = [];
  }

  function parseSize(size) {
    var parts = String(size || "").split("x");
    var w = parseInt(parts[0], 10);
    var h = parseInt(parts[1], 10);
    if (isNaN(w) || isNaN(h)) {
      w = 512;
      h = 512;
    }
    return { width: w, height: h };
  }

  function setPrompt(p) {
    var el = document.getElementById("imagePrompt");
    if (el) el.value = p;
  }

  function blobToDataUrl(blob) {
    return new Promise(function (resolve, reject) {
      var r = new FileReader();
      r.onloadend = function () {
        resolve(String(r.result || ""));
      };
      r.onerror = reject;
      r.readAsDataURL(blob);
    });
  }

  async function generateImage() {
    var promptEl = document.getElementById("imagePrompt");
    var modelEl = document.getElementById("imageModel");
    var styleEl = document.getElementById("imageStyle");
    var sizeEl = document.getElementById("imageSize");
    var stepsEl = document.getElementById("imageSteps");
    var loading = document.getElementById("loading");
    var errorBox = document.getElementById("errorBox");
    var btn = document.getElementById("generateBtn");
    var result = document.getElementById("resultSection");

    var prompt = promptEl ? String(promptEl.value).trim() : "";
    if (!prompt) {
      alert("ProszÄ™ wprowadziÄ‡ opis obrazu");
      return;
    }

    if (errorBox) {
      errorBox.classList.add("hidden");
      errorBox.textContent = "";
    }
    if (result) result.classList.add("hidden");
    if (loading) loading.classList.remove("hidden");
    if (btn) {
      btn.disabled = true;
      btn.textContent = "Generowanie...";
    }

    try {
      var model = modelEl ? String(modelEl.value) : "";
      var style = styleEl ? String(styleEl.value) : "";
      var steps = stepsEl ? parseInt(String(stepsEl.value), 10) : undefined;
      var size = sizeEl ? String(sizeEl.value) : "512x512";
      var dims = parseSize(size);

      var res = await fetch("/api/generate-image", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: prompt,
          model: model,
          style: style,
          width: dims.width,
          height: dims.height,
          steps: steps,
        }),
      });

      if (!res.ok) {
        var errMsg = "BÅ‚Ä…d generacji obrazu";
        try {
          var j = await res.json();
          if (j && j.error) errMsg = j.error;
        } catch (e) {}
        throw new Error(errMsg);
      }

      var blob = await res.blob();
      var objUrl = URL.createObjectURL(blob);

      var img = document.getElementById("generatedImage");
      if (img) img.src = objUrl;
      if (result) result.classList.remove("hidden");

      // Persist history as data URL to survive reloads
      try {
        var dataUrl = await blobToDataUrl(blob);
        var item = {
          id: Date.now(),
          prompt: prompt,
          imageUrl: dataUrl,
          ts: new Date().toISOString(),
          settings: {
            model: model,
            style: style,
            width: dims.width,
            height: dims.height,
            steps: steps,
          },
        };
        generationHistory.unshift(item);
        if (generationHistory.length > 20)
          generationHistory = generationHistory.slice(0, 20);
        localStorage.setItem("imageHistory", JSON.stringify(generationHistory));
        updateHistoryDisplay();
      } catch (e) {}
    } catch (err) {
      console.error("Generation error:", err);
      if (errorBox) {
        errorBox.textContent = err && err.message ? err.message : String(err);
        errorBox.classList.remove("hidden");
      }
    } finally {
      if (loading) loading.classList.add("hidden");
      if (btn) {
        btn.disabled = false;
        btn.textContent = "ðŸŽ¨ Generuj Obraz";
      }
    }
  }

  function downloadImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    var link = document.createElement("a");
    link.download = "generated_image.png";
    link.href = img.src;
    link.click();
  }

  function shareImage() {
    var img = document.getElementById("generatedImage");
    if (!img || !img.src) return;
    if (navigator.share) {
      navigator
        .share({ title: "Wygenerowany obraz AI", url: img.src })
        .catch(function () {});
    } else if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(img.src);
      alert("Link do obrazu skopiowany do schowka!");
    }
  }

  function generateVariation() {
    var promptEl = document.getElementById("imagePrompt");
    var currentPrompt = promptEl ? String(promptEl.value) : "";
    var v = [
      ", w innym stylu",
      ", z innymi kolorami",
      ", z innej perspektywy",
      ", w wersji artystycznej",
      ", z dodatkowymi detalami",
    ];
    var add = v[Math.floor(Math.random() * v.length)];
    if (promptEl) promptEl.value = currentPrompt + add;
    generateImage();
  }

  function createHistoryCard(item) {
    var wrap = document.createElement("div");
    wrap.className =
      "history-item border border-edge rounded-lg p-2 cursor-pointer hover:border-cyan-400 transition-colors";
    wrap.style.background = "rgba(0,0,0,0.5)";
    var image = document.createElement("img");
    image.src = item.imageUrl;
    image.alt = "Historia";
    image.className = "w-full aspect-square object-cover rounded mb-2";
    wrap.appendChild(image);
    var p = document.createElement("p");
    p.className = "text-xs text-gray-400 truncate";
    p.textContent = item.prompt;
    wrap.appendChild(p);
    wrap.onclick = function () {
      var el = document.getElementById("imagePrompt");
      if (el) el.value = item.prompt;
      var img = document.getElementById("generatedImage");
      if (img) img.src = item.imageUrl;
      var res = document.getElementById("resultSection");
      if (res) res.classList.remove("hidden");
    };
    return wrap;
  }

  function updateHistoryDisplay() {
    var grid = document.getElementById("historyGrid");
    if (!grid) return;
    grid.innerHTML = "";
    var items = generationHistory.slice(0, 8);
    for (var i = 0; i < items.length; i++) {
      grid.appendChild(createHistoryCard(items[i]));
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    updateHistoryDisplay();
  });
</script>
