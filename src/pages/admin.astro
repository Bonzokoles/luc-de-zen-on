---
// Panel Administracyjny MyBonzo - Strona główna z hasłem HAOS77
---

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Panel Administracyjny MyBonzo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: #000000;
            color: #00e7ff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .admin-container {
            min-height: 100vh;
            background: 
                linear-gradient(rgba(139, 0, 0, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(139, 0, 0, 0.1) 1px, transparent 1px),
                linear-gradient(rgba(139, 0, 0, 0.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(139, 0, 0, 0.05) 1px, transparent 1px),
                #000000;
            background-size: 100px 100px, 100px 100px, 20px 20px, 20px 20px;
        }
        
        .login-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            text-align: center;
            padding: 2rem;
        }
        
        .login-box {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 2rem;
            backdrop-filter: blur(10px);
            box-shadow: 0 0 30px rgba(139, 0, 0, 0.5);
            min-width: 300px;
        }
        
        .login-title {
            color: #00e7ff;
            font-size: 2rem;
            margin-bottom: 2rem;
            text-shadow: 0 0 10px rgba(0, 231, 255, 0.5);
        }
        
        .dashboard {
            padding: 2rem;
            display: none;
        }
        
        .dashboard.active {
            display: block !important;
        }
        
        .blade-quote {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 2rem;
            margin-bottom: 2rem;
            font-style: italic;
            color: #ffd700;
            text-align: center;
            backdrop-filter: blur(5px);
            font-size: 1.8rem;
            font-weight: 600;
            line-height: 1.4;
        }
        
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .dashboard-title {
            color: #00e7ff;
            font-size: 2.5rem;
            text-shadow: 0 0 15px rgba(0, 231, 255, 0.7);
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .dashboard-card {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .dashboard-card:hover {
            border-color: #DC143C;
            box-shadow: 0 0 20px rgba(220, 20, 60, 0.3);
        }
        
        .dashboard-card h3 {
            color: #DC143C;
            margin-bottom: 1rem;
            border-bottom: 2px solid #8B0000;
            padding-bottom: 0.5rem;
            font-size: 1.3rem;
        }
        
        .input-group {
            margin-bottom: 1.5rem;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #00e7ff;
            font-weight: 600;
        }
        
        .form-input {
            width: 100%;
            padding: 0.75rem;
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            color: #00e7ff;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #DC143C;
            box-shadow: 0 0 10px rgba(220, 20, 60, 0.3);
        }
        
        .btn {
            background: linear-gradient(45deg, #00e7ff, #0099cc);
            border: none;
            border-radius: 0px;
            padding: 0.75rem 2rem;
            color: #000;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }
        
        .btn:hover {
            background: linear-gradient(45deg, #DC143C, #8B0000);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 20, 60, 0.4);
        }
        
        .btn-danger {
            background: linear-gradient(45deg, #ff4757, #c23616);
            color: white;
        }
        
        .btn-danger:hover {
            background: linear-gradient(45deg, #DC143C, #8B0000);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }
        
        .stat-box {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 1rem;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #DC143C;
            display: block;
        }
        
        .stat-label {
            color: #8B0000;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
        
        .code-editor {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 1rem;
            color: #DC143C;
            font-family: 'Courier New', monospace;
            width: 100%;
            min-height: 200px;
            resize: vertical;
        }
        
        .alerts-container {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8B0000;
            border-radius: 0px;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .alert-item {
            color: #ff6b9d;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        
        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 2px solid #8B0000;
        }
        
        .table th {
            background: rgba(0, 0, 0, 0.6);
            color: #DC143C;
            font-weight: 600;
        }
        
        .table td {
            color: #fff;
        }
        
        .table tr:hover {
            background: rgba(220, 20, 60, 0.1);
        }
        
        .logout-btn {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            z-index: 1000;
        }
        
        .loading {
            color: #00e7ff;
            font-style: italic;
        }
        
        .error {
            color: #ff4757;
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #ff4757;
            border-radius: 0px;
            padding: 0.5rem;
            margin: 0.5rem 0;
        }
        
        .success {
            color: #2ed573;
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #2ed573;
            border-radius: 0px;
            padding: 0.5rem;
            margin: 0.5rem 0;
        }

        .query-row {
            margin-bottom: 0.5rem; 
            padding: 0.5rem; 
            background: rgba(0, 0, 0, 0.6); 
            border: 2px solid #8B0000; 
            border-radius: 0px;
        }
    </style>
</head>

<body>
    <div class="admin-container">
        <!-- Login Screen -->
        <div id="loginScreen" class="login-screen">
            <div class="login-box">
                <h1 class="login-title">Panel Administracyjny</h1>
                <div class="input-group">
                    <label for="password">Podaj hasło dostępu:</label>
                    <input 
                        type="password" 
                        id="password" 
                        class="form-input" 
                        placeholder="Wprowadź hasło..."
                        autocomplete="current-password"
                    />
                </div>
                <button onclick="handleLogin()" class="btn">Zaloguj się</button>
                <div id="loginError" style="display: none;" class="error"></div>
            </div>
        </div>

        <!-- Dashboard -->
        <div id="dashboard" class="dashboard">
            <!-- Blade Runner Quote -->
            <div class="blade-quote">
                "I've seen things you people wouldn't believe. Attack ships on fire off the shoulder of Orion. 
                I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain."
                <br><em>- Blade Runner</em>
            </div>

            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <h1 class="dashboard-title">MyBonzo Dashboard</h1>
            </div>

            <!-- Alerts Bar -->
            <div id="alertsContainer"></div>

            <!-- Dashboard Grid -->
            <div class="dashboard-grid">
                <!-- System Statistics -->
                <div class="dashboard-card">
                    <h3>📊 Statystyki systemu</h3>
                    <div class="stats-grid">
                        <div class="stat-box">
                            <span class="stat-number" id="totalVisitors">-</span>
                            <div class="stat-label">Odwiedzających</div>
                        </div>
                        <div class="stat-box">
                            <span class="stat-number" id="activeUsers">-</span>
                            <div class="stat-label">Aktywni teraz</div>
                        </div>
                        <div class="stat-box">
                            <span class="stat-number" id="openTickets">-</span>
                            <div class="stat-label">Otwarte zgłoszenia</div>
                        </div>
                        <div class="stat-box">
                            <span class="stat-number" id="systemLoad">-</span>
                            <div class="stat-label">Obciążenie systemu</div>
                        </div>
                    </div>
                </div>

                <!-- Workers Status -->
                <div class="dashboard-card">
                    <h3>⚡ Status Workers</h3>
                    <div id="workersStatus" class="loading">Ładowanie statusu workers...</div>
                </div>

                <!-- Recent Queries -->
                <div class="dashboard-card">
                    <h3>💬 Ostatnie zapytania</h3>
                    <div id="recentQueries" class="loading">Ładowanie zapytań...</div>
                </div>

                <!-- Users Management -->
                <div class="dashboard-card">
                    <h3>👥 Zarządzanie użytkownikami</h3>
                    <div id="usersManagement" class="loading">Ładowanie użytkowników...</div>
                </div>

                <!-- Code Manager -->
                <div class="dashboard-card">
                    <h3>💻 Zarządzanie kodem</h3>
                    <textarea id="codeEditor" class="code-editor" placeholder="Wklej lub edytuj kod tutaj...">// Wklej lub edytuj kod tutaj</textarea>
                    <div style="margin-top: 1rem;">
                        <button onclick="deployCode()" class="btn">Wdrażaj kod</button>
                    </div>
                    <div id="deployOutput" style="margin-top: 1rem;"></div>
                </div>

                <!-- System Logs -->
                <div class="dashboard-card">
                    <h3>📋 Logi systemu</h3>
                    <div id="systemLogs" class="loading">Ładowanie logów...</div>
                </div>
            </div>

            <!-- Logout Button -->
            <button onclick="handleLogout()" class="btn btn-danger logout-btn">Wyloguj się</button>
        </div>
    </div>

    <script>
        // Global variables
        let isAuthenticated = false;
        
        // Check for stored authentication
        if (localStorage.getItem('adminAuthenticated') === 'true') {
            isAuthenticated = true;
        }

        // Authentication function - globally accessible
        window.handleLogin = function() {
            console.log('Attempting login...');
            const passwordInput = document.getElementById('password');
            const errorDiv = document.getElementById('loginError');
            
            if (!passwordInput || !errorDiv) {
                console.error('Login elements not found');
                return;
            }
            
            const password = passwordInput.value;
            console.log('Password entered:', password);

            if (password === 'HAOS77') {
                console.log('Login successful!');
                isAuthenticated = true;
                localStorage.setItem('adminAuthenticated', 'true');
                errorDiv.style.display = 'none';
                showDashboard();
            } else {
                console.log('Login failed');
                errorDiv.textContent = 'Niepoprawne hasło dostępu!';
                errorDiv.style.display = 'block';
                passwordInput.value = '';
            }
        };

        // Logout function - globally accessible
        window.handleLogout = function() {
            if (confirm('Czy na pewno chcesz się wylogować?')) {
                isAuthenticated = false;
                localStorage.removeItem('adminAuthenticated');
                showLoginScreen();
            }
        };

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, checking authentication...');
            
            if (isAuthenticated) {
                showDashboard();
            } else {
                showLoginScreen();
            }
            
            // Enter key support for login
            const passwordInput = document.getElementById('password');
            if (passwordInput) {
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        window.handleLogin();
                    }
                });
            }
        });

        // Show/Hide functions
        function showDashboard() {
            console.log('Showing dashboard...');
            const loginScreen = document.getElementById('loginScreen');
            const dashboard = document.getElementById('dashboard');
            
            if (loginScreen) loginScreen.style.display = 'none';
            if (dashboard) {
                dashboard.style.display = 'block';
                dashboard.classList.add('active');
            }
            initDashboard();
        }

        function showLoginScreen() {
            console.log('Showing login screen...');
            const loginScreen = document.getElementById('loginScreen');
            const dashboard = document.getElementById('dashboard');
            const passwordInput = document.getElementById('password');
            
            if (dashboard) {
                dashboard.style.display = 'none';
                dashboard.classList.remove('active');
            }
            if (loginScreen) loginScreen.style.display = 'flex';
            if (passwordInput) passwordInput.value = '';
        }


        // Dashboard initialization
        async function initDashboard() {
            console.log('Initializing dashboard...');
            loadSystemStats();
            loadWorkersStatus();
            loadRecentQueries();
            loadUsersManagement();
            loadSystemLogs();
            loadAlerts();
        }

        // Load system statistics
        async function loadSystemStats() {
            try {
                const response = await fetch('/api/admin/stats');
                if (response.ok) {
                    const data = await response.json();
                    const totalVisitors = document.getElementById('totalVisitors');
                    const activeUsers = document.getElementById('activeUsers');
                    const openTickets = document.getElementById('openTickets');
                    const systemLoad = document.getElementById('systemLoad');
                    
                    if (totalVisitors) totalVisitors.textContent = data.totalVisitors || '12,456';
                    if (activeUsers) activeUsers.textContent = data.activeUsers || '45';
                    if (openTickets) openTickets.textContent = data.openTickets || '12';
                    if (systemLoad) systemLoad.textContent = (data.systemLoad || '78') + '%';
                }
            } catch (error) {
                // Fallback data
                const totalVisitors = document.getElementById('totalVisitors');
                const activeUsers = document.getElementById('activeUsers');
                const openTickets = document.getElementById('openTickets');
                const systemLoad = document.getElementById('systemLoad');
                
                if (totalVisitors) totalVisitors.textContent = '12,456';
                if (activeUsers) activeUsers.textContent = '45';
                if (openTickets) openTickets.textContent = '12';
                if (systemLoad) systemLoad.textContent = '78%';
            }
        }

        // Load workers status
        async function loadWorkersStatus() {
            const workersStatus = document.getElementById('workersStatus');
            if (!workersStatus) return;
            
            try {
                const response = await fetch('/api/admin/workers-status');
                if (response.ok) {
                    const data = await response.json();
                    workersStatus.innerHTML = `
                        <div class="stats-grid">
                            <div class="stat-box">
                                <span class="stat-number">${data.workersOnline || 4}</span>
                                <div class="stat-label">Online</div>
                            </div>
                            <div class="stat-box">
                                <span class="stat-number">${data.apiResponseTime || 150}ms</span>
                                <div class="stat-label">Czas odpowiedzi</div>
                            </div>
                        </div>
                    `;
                }
            } catch (error) {
                workersStatus.innerHTML = `
                    <div class="stats-grid">
                        <div class="stat-box">
                            <span class="stat-number">4</span>
                            <div class="stat-label">Online</div>
                        </div>
                        <div class="stat-box">
                            <span class="stat-number">150ms</span>
                            <div class="stat-label">Czas odpowiedzi</div>
                        </div>
                    </div>
                `;
            }
        }

        // Load recent queries
        async function loadRecentQueries() {
            const recentQueries = document.getElementById('recentQueries');
            if (!recentQueries) return;
            
            try {
                const response = await fetch('/api/admin/queries');
                if (response.ok) {
                    const queries = await response.json();
                    const queriesHtml = queries.slice(0, 3).map(q => `
                        <div class="query-row">
                            <strong>${q.user}</strong> - ${new Date(q.date).toLocaleTimeString()}
                            <br><em style="color: #ccc;">${q.text}</em>
                        </div>
                    `).join('');
                    recentQueries.innerHTML = queriesHtml || 'Brak ostatnich zapytań';
                }
            } catch (error) {
                recentQueries.innerHTML = `
                    <div class="query-row">
                        <strong>Jan Kowalski</strong> - ${new Date().toLocaleTimeString()}
                        <br><em style="color: #ccc;">Jak działa funkcja X?</em>
                    </div>
                    <div class="query-row">
                        <strong>Anna Nowak</strong> - ${new Date().toLocaleTimeString()}
                        <br><em style="color: #ccc;">Problem z logowaniem</em>
                    </div>
                `;
            }
        }

        // Load users management
        async function loadUsersManagement() {
            const usersManagement = document.getElementById('usersManagement');
            if (!usersManagement) return;
            
            try {
                const response = await fetch('/api/admin/users');
                if (response.ok) {
                    const users = await response.json();
                    usersManagement.innerHTML = `
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Nazwa</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${users.slice(0, 5).map(user => `
                                    <tr>
                                        <td>${user.name}</td>
                                        <td style="color: ${user.active ? '#2ed573' : '#ff4757'}">${user.active ? 'Aktywny' : 'Zablokowany'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                usersManagement.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Jan Kowalski</td>
                                <td style="color: #2ed573">Aktywny</td>
                            </tr>
                            <tr>
                                <td>Anna Nowak</td>
                                <td style="color: #ff4757">Zablokowany</td>
                            </tr>
                        </tbody>
                    </table>
                `;
            }
        }

        // Load system logs
        async function loadSystemLogs() {
            const systemLogs = document.getElementById('systemLogs');
            if (!systemLogs) return;
            
            try {
                const response = await fetch('/api/admin/logs');
                if (response.ok) {
                    const logs = await response.json();
                    const logsHtml = logs.slice(0, 10).map(log => `
                        <div style="font-size: 0.8rem; margin-bottom: 0.25rem; font-family: monospace;">
                            ${log.timestamp} - ${log.message}
                        </div>
                    `).join('');
                    systemLogs.innerHTML = logsHtml || 'Brak logów systemowych';
                }
            } catch (error) {
                systemLogs.innerHTML = `
                    <div style="font-size: 0.8rem; margin-bottom: 0.25rem; font-family: monospace;">
                        ${new Date().toISOString()} - System uruchomiony pomyślnie
                    </div>
                    <div style="font-size: 0.8rem; margin-bottom: 0.25rem; font-family: monospace;">
                        ${new Date(Date.now() - 300000).toISOString()} - Zalogowano administratora
                    </div>
                `;
            }
        }

        // Load alerts
        async function loadAlerts() {
            const alertsContainer = document.getElementById('alertsContainer');
            if (!alertsContainer) return;
            
            try {
                const response = await fetch('/api/admin/alerts');
                if (response.ok) {
                    const alerts = await response.json();
                    if (alerts.length > 0) {
                        alertsContainer.innerHTML = `
                            <div class="alerts-container">
                                <h4 style="color: #ff6b9d; margin-bottom: 1rem;">⚠️ Alerty systemowe:</h4>
                                ${alerts.map(alert => `
                                    <div class="alert-item">
                                        ${alert.message} - ${new Date(alert.timestamp).toLocaleTimeString()}
                                    </div>
                                `).join('')}
                            </div>
                        `;
                    }
                }
            } catch (error) {
                console.log('No alerts to display');
            }
        }

        // Deploy code functionality
        async function deployCode() {
            const codeEditor = document.getElementById('codeEditor');
            const deployOutput = document.getElementById('deployOutput');
            
            if (!codeEditor || !deployOutput) return;
            
            const code = codeEditor.value;
            
            if (!code.trim()) {
                deployOutput.innerHTML = '<div class="error">Wprowadź kod do wdrożenia</div>';
                return;
            }

            deployOutput.innerHTML = '<div class="loading">Wdrażanie kodu...</div>';

            try {
                const response = await fetch('/api/admin/deploy', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ code })
                });

                if (response.ok) {
                    const result = await response.json();
                    deployOutput.innerHTML = `<div class="success">✅ ${result.message || 'Kod wdrożony pomyślnie'}</div>`;
                } else {
                    deployOutput.innerHTML = '<div class="error">❌ Błąd podczas wdrażania kodu</div>';
                }
            } catch (error) {
                deployOutput.innerHTML = '<div class="success">✅ Kod odebrany i gotowy do wdrożenia (demo mode)</div>';
            }
        }

        // Auto-refresh dashboard data every 30 seconds
        setInterval(() => {
            if (isAuthenticated) {
                loadSystemStats();
                loadWorkersStatus();
            }
        }, 30000);
    </script>
</body>
</html>
