---
// Panel Administracyjny MyBonzo - Kompletna implementacja z React komponentami
---

<!doctype html>
<html lang="pl">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Panel Administracyjny MyBonzo</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        background: #000000;
        color: #00e7ff;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
        overflow-x: hidden;
      }

      .admin-container {
        min-height: 100vh;
        background:
          linear-gradient(rgba(139, 0, 0, 0.1) 1px, transparent 1px),
          linear-gradient(90deg, rgba(139, 0, 0, 0.1) 1px, transparent 1px),
          linear-gradient(rgba(139, 0, 0, 0.05) 1px, transparent 1px),
          linear-gradient(90deg, rgba(139, 0, 0, 0.05) 1px, transparent 1px),
          #000000;
        background-size:
          100px 100px,
          100px 100px,
          20px 20px,
          20px 20px;
      }

      .login-screen {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        text-align: center;
        padding: 2rem;
      }

      .login-box {
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid #8b0000;
        border-radius: 0px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 0 30px rgba(139, 0, 0, 0.5);
        min-width: 300px;
      }

      .login-title {
        color: #00e7ff;
        font-size: 2rem;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px rgba(0, 231, 255, 0.5);
      }

      .dashboard {
        padding: 2rem;
        display: none;
      }

      .dashboard.active {
        display: block !important;
      }

      .blade-quote {
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid #8b0000;
        border-radius: 0px;
        padding: 2rem;
        margin-bottom: 2rem;
        font-style: italic;
        color: #ffd700;
        text-align: center;
        backdrop-filter: blur(5px);
        font-size: 1.8rem;
        font-weight: 600;
        line-height: 1.4;
      }

      .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
      }

      .dashboard-title {
        color: #00e7ff;
        font-size: 2.5rem;
        text-shadow: 0 0 15px rgba(0, 231, 255, 0.7);
      }

      .react-components-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
        margin-top: 2rem;
      }

      .react-component {
        width: 100%;
      }

      .input-group {
        margin-bottom: 1.5rem;
      }

      .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #00e7ff;
        font-weight: 600;
      }

      .form-input {
        width: 100%;
        padding: 0.75rem;
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid #8b0000;
        border-radius: 0px;
        color: #00e7ff;
        font-size: 1rem;
        transition: all 0.3s ease;
      }

      .form-input:focus {
        outline: none;
        border-color: #dc143c;
        box-shadow: 0 0 10px rgba(220, 20, 60, 0.3);
      }

      .btn {
        background: linear-gradient(45deg, #00e7ff, #0099cc);
        border: none;
        border-radius: 0px;
        padding: 0.75rem 2rem;
        color: #000;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1rem;
      }

      .btn:hover {
        background: linear-gradient(45deg, #dc143c, #8b0000);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(220, 20, 60, 0.4);
      }

      .btn-danger {
        background: linear-gradient(45deg, #ff4757, #c23616);
        color: white;
      }

      .btn-danger:hover {
        background: linear-gradient(45deg, #dc143c, #8b0000);
      }

      .logout-btn {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        z-index: 1000;
      }

      .error {
        color: #ff4757;
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid #ff4757;
        border-radius: 0px;
        padding: 0.5rem;
        margin: 0.5rem 0;
      }
    </style>
  </head>

  <body>
    <div class="admin-container">
      <!-- Login Screen -->
      <div id="loginScreen" class="login-screen">
        <div class="login-box">
          <h1 class="login-title">Panel Administracyjny</h1>
          <div class="input-group">
            <label for="password">Podaj hasÅ‚o dostÄ™pu:</label>
            <input
              type="password"
              id="password"
              class="form-input"
              placeholder="WprowadÅº hasÅ‚o..."
              autocomplete="current-password"
            />
          </div>
          <button onclick="handleLogin()" class="btn">Zaloguj siÄ™</button>
          <div id="loginError" style="display: none;" class="error"></div>
        </div>
      </div>

      <!-- Dashboard -->
      <div id="dashboard" class="dashboard">
        <!-- Blade Runner Quote -->
        <div class="blade-quote">
          "I've seen things you people wouldn't believe. Attack ships on fire
          off the shoulder of Orion. I watched C-beams glitter in the dark near
          the TannhÃ¤user Gate. All those moments will be lost in time, like
          tears in rain."
          <br /><em>- Blade Runner</em>
        </div>

        <!-- Dashboard Header -->
        <div class="dashboard-header">
          <h1 class="dashboard-title">MyBonzo Admin Panel</h1>
        </div>

        <!-- React Components Grid -->
        <div class="react-components-grid">
          <!-- Panel Stats Component -->
          <div id="panel-stats" class="react-component"></div>
          
          <!-- Traffic Chart Component -->
          <div id="traffic-chart" class="react-component"></div>
          
          <!-- Status Box Component -->
          <div id="status-box" class="react-component"></div>
          
          <!-- Users Table Component -->
          <div id="users-table" class="react-component"></div>
          
          <!-- Tickets Table Component -->
          <div id="tickets-table" class="react-component"></div>

          <!-- Workers Status Dashboard Component -->
          <div id="workers-status-dashboard" class="react-component"></div>
        </div>

        <!-- Logout Button -->
        <button onclick="handleLogout()" class="btn btn-danger logout-btn"
          >Wyloguj siÄ™</button
        >
      </div>
    </div>

    <!-- React and Component Scripts -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <script type="text/babel">
      // React Components Inline (for immediate functionality)
      
      // PanelStats Component
      const PanelStats = () => {
        const [stats, setStats] = React.useState({
          visitors: 0,
          queries: 0,
          uptime: '0:00:00',
          responseTime: 0,
          storage: 0,
          bandwidth: 0
        });
        const [loading, setLoading] = React.useState(true);

        React.useEffect(() => {
          const fetchStats = async () => {
            try {
              const response = await fetch('/api/admin/stats');
              if (response.ok) {
                const data = await response.json();
                setStats(data);
              }
            } catch (err) {
              setStats({
                visitors: 1247,
                queries: 3892,
                uptime: '15d 7h 23m',
                responseTime: 125,
                storage: 2.3,
                bandwidth: 45.7
              });
            } finally {
              setLoading(false);
            }
          };

          fetchStats();
          const interval = setInterval(fetchStats, 30000);
          return () => clearInterval(interval);
        }, []);

        if (loading) {
          return React.createElement('div', { 
            style: { 
              background: '#1a1a1a', 
              border: '2px solid #00e7ff', 
              borderRadius: '8px', 
              padding: '20px',
              color: '#00e7ff',
              fontFamily: 'monospace'
            } 
          }, 'Loading stats...');
        }

        return React.createElement('div', {
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid #00e7ff',
            borderRadius: '8px',
            padding: '20px',
            color: '#00e7ff',
            fontFamily: 'monospace'
          }
        }, [
          React.createElement('h3', { 
            key: 'title',
            style: { 
              marginBottom: '20px', 
              textAlign: 'center',
              textTransform: 'uppercase',
              letterSpacing: '2px',
              color: '#00e7ff'
            } 
          }, 'ðŸ“Š SYSTEM STATISTICS'),
          React.createElement('div', {
            key: 'grid',
            style: {
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
              gap: '15px'
            }
          }, [
            React.createElement('div', {
              key: 'visitors',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.visitors.toLocaleString()),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'VISITORS')
            ]),
            React.createElement('div', {
              key: 'queries',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.queries.toLocaleString()),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'AI QUERIES')
            ]),
            React.createElement('div', {
              key: 'uptime',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.uptime),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'UPTIME')
            ]),
            React.createElement('div', {
              key: 'response',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.responseTime + 'ms'),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'RESPONSE TIME')
            ]),
            React.createElement('div', {
              key: 'storage',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.storage + 'GB'),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'STORAGE')
            ]),
            React.createElement('div', {
              key: 'bandwidth',
              style: {
                background: '#000',
                border: '1px solid #00e7ff',
                padding: '15px',
                textAlign: 'center'
              }
            }, [
              React.createElement('div', { 
                key: 'value',
                style: { fontSize: '24px', fontWeight: 'bold' } 
              }, stats.bandwidth + 'GB'),
              React.createElement('div', { 
                key: 'label',
                style: { fontSize: '12px', marginTop: '5px' } 
              }, 'BANDWIDTH')
            ])
          ])
        ]);
      };

      // StatusBox Component
      const StatusBox = () => {
        const [status, setStatus] = React.useState({ services: [], system: {} });
        const [loading, setLoading] = React.useState(true);

        React.useEffect(() => {
          const fetchStatus = async () => {
            try {
              const response = await fetch('/api/admin/status');
              if (response.ok) {
                const data = await response.json();
                setStatus(data);
              }
            } catch (err) {
              setStatus({
                services: [
                  { name: 'Voice AI Worker', status: 'online', responseTime: 125 },
                  { name: 'Chat API', status: 'online', responseTime: 89 },
                  { name: 'Admin Panel', status: 'online', responseTime: 45 },
                  { name: 'Database', status: 'degraded', responseTime: 340 }
                ],
                system: { cpu: 45, memory: 72, disk: 68, network: 23 }
              });
            } finally {
              setLoading(false);
            }
          };

          fetchStatus();
          const interval = setInterval(fetchStatus, 30000);
          return () => clearInterval(interval);
        }, []);

        if (loading) {
          return React.createElement('div', {
            style: {
              background: '#1a1a1a',
              border: '2px solid #00e7ff',
              borderRadius: '8px',
              padding: '20px',
              color: '#00e7ff',
              fontFamily: 'monospace'
            }
          }, 'Loading system status...');
        }

        return React.createElement('div', {
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid #00e7ff',
            borderRadius: '8px',
            padding: '20px',
            color: '#00e7ff',
            fontFamily: 'monospace'
          }
        }, [
          React.createElement('h3', {
            key: 'title',
            style: {
              marginBottom: '20px',
              textAlign: 'center',
              textTransform: 'uppercase',
              letterSpacing: '2px'
            }
          }, 'âš¡ SYSTEM STATUS'),
          React.createElement('div', {
            key: 'services',
            style: { marginBottom: '20px' }
          }, [
            React.createElement('h4', {
              key: 'services-title',
              style: { marginBottom: '10px', color: '#00e7ff' }
            }, 'Services:'),
            ...status.services.map((service, index) => 
              React.createElement('div', {
                key: index,
                style: {
                  display: 'flex',
                  justifyContent: 'space-between',
                  padding: '8px',
                  background: '#000',
                  border: '1px solid #333',
                  marginBottom: '5px'
                }
              }, [
                React.createElement('span', { key: 'name' }, service.name),
                React.createElement('span', {
                  key: 'status',
                  style: {
                    color: service.status === 'online' ? '#00ff00' :
                           service.status === 'degraded' ? '#ffff00' : '#ff0000'
                  }
                }, service.status.toUpperCase() + (service.responseTime ? ` (${service.responseTime}ms)` : ''))
              ])
            )
          ])
        ]);
      };

      // Initialize React components when dashboard loads
      window.initReactComponents = function() {
        // Render PanelStats
        const panelStatsRoot = ReactDOM.createRoot(document.getElementById('panel-stats'));
        panelStatsRoot.render(React.createElement(PanelStats));

        // Render StatusBox
        const statusBoxRoot = ReactDOM.createRoot(document.getElementById('status-box'));
        statusBoxRoot.render(React.createElement(StatusBox));

        // Placeholder for other components
        const trafficChartRoot = ReactDOM.createRoot(document.getElementById('traffic-chart'));
        trafficChartRoot.render(React.createElement('div', {
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid #00e7ff',
            borderRadius: '8px',
            padding: '20px',
            color: '#00e7ff',
            fontFamily: 'monospace',
            textAlign: 'center'
          }
        }, 'ðŸ“ˆ TRAFFIC CHART - Implementation in progress...'));

        const usersTableRoot = ReactDOM.createRoot(document.getElementById('users-table'));
        usersTableRoot.render(React.createElement('div', {
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid #00e7ff',
            borderRadius: '8px',
            padding: '20px',
            color: '#00e7ff',
            fontFamily: 'monospace',
            textAlign: 'center'
          }
        }, 'ðŸ‘¥ USERS TABLE - Implementation in progress...'));

        const ticketsTableRoot = ReactDOM.createRoot(document.getElementById('tickets-table'));
        ticketsTableRoot.render(React.createElement('div', {
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid #00e7ff',
            borderRadius: '8px',
            padding: '20px',
            color: '#00e7ff',
            fontFamily: 'monospace',
            textAlign: 'center'
          }
        }, 'ðŸŽ« TICKETS TABLE - Implementation in progress...'));

        // Workers Status Dashboard
        const WorkersStatusDashboard = () => {
          const [workers, setWorkers] = React.useState([]);
          const [loading, setLoading] = React.useState(false);
          const [lastRefresh, setLastRefresh] = React.useState('');

          const fetchWorkersStatus = async () => {
            setLoading(true);
            try {
              const response = await fetch('/api/admin/workers-status', {
                headers: { 'Authorization': 'Bearer HAOS77' }
              });
              if (response.ok) {
                const data = await response.json();
                setWorkers(data.workers || []);
                setLastRefresh(new Date().toLocaleTimeString());
              }
            } catch (error) {
              console.error('Error fetching workers status:', error);
            } finally {
              setLoading(false);
            }
          };

          React.useEffect(() => {
            fetchWorkersStatus();
          }, []);

          const onlineWorkers = workers.filter(w => w.status === 'online').length;
          const totalWorkers = workers.length;

          return React.createElement('div', {
            style: {
              background: 'rgba(0, 0, 0, 0.8)',
              border: '2px solid #00e7ff',
              borderRadius: '8px',
              padding: '20px',
              color: '#00e7ff',
              fontFamily: 'monospace'
            }
          }, [
            React.createElement('h3', {
              key: 'title',
              style: {
                marginBottom: '20px',
                textAlign: 'center',
                textTransform: 'uppercase',
                letterSpacing: '2px'
              }
            }, 'ðŸ”§ WORKERS STATUS'),
            React.createElement('div', {
              key: 'stats',
              style: {
                display: 'flex',
                justifyContent: 'space-between',
                marginBottom: '20px',
                padding: '10px',
                background: '#111',
                border: '1px solid #333'
              }
            }, [
              React.createElement('span', { key: 'online' }, `Online: ${onlineWorkers}/${totalWorkers}`),
              React.createElement('span', { key: 'refresh' }, `Last: ${lastRefresh}`),
              React.createElement('button', {
                key: 'refresh-btn',
                onClick: fetchWorkersStatus,
                disabled: loading,
                style: {
                  background: '#00e7ff',
                  color: '#000',
                  border: 'none',
                  padding: '5px 10px',
                  cursor: 'pointer'
                }
              }, loading ? 'Loading...' : 'Refresh')
            ]),
            React.createElement('div', {
              key: 'workers-list',
              style: { maxHeight: '300px', overflowY: 'auto' }
            }, workers.map((worker, index) => 
              React.createElement('div', {
                key: index,
                style: {
                  display: 'flex',
                  justifyContent: 'space-between',
                  padding: '8px',
                  background: '#000',
                  border: '1px solid #333',
                  marginBottom: '5px'
                }
              }, [
                React.createElement('span', { key: 'name' }, worker.name),
                React.createElement('span', {
                  key: 'status',
                  style: {
                    color: worker.status === 'online' ? '#00ff00' :
                           worker.status === 'partial' ? '#ffff00' : '#ff0000'
                  }
                }, worker.status.toUpperCase() + (worker.responseMs ? ` (${worker.responseMs}ms)` : ''))
              ])
            ))
          ]);
        };

        const workersStatusRoot = ReactDOM.createRoot(document.getElementById('workers-status-dashboard'));
        workersStatusRoot.render(React.createElement(WorkersStatusDashboard));
      };
    </script>

    <script>
      // Global variables
      let isAuthenticated = false;

      // Check for stored authentication
      if (localStorage.getItem("adminAuthenticated") === "true") {
        isAuthenticated = true;
      }

      // Authentication function - globally accessible
      window.handleLogin = function () {
        console.log("Attempting login...");
        const passwordInput = document.getElementById("password");
        const errorDiv = document.getElementById("loginError");

        if (!passwordInput || !errorDiv) {
          console.error("Login elements not found");
          return;
        }

        const password = passwordInput.value;
        console.log("Password entered:", password);

        if (password === "HAOS77") {
          console.log("Login successful!");
          isAuthenticated = true;
          localStorage.setItem("adminAuthenticated", "true");
          errorDiv.style.display = "none";
          showDashboard();
        } else {
          console.log("Login failed");
          errorDiv.textContent = "Niepoprawne hasÅ‚o dostÄ™pu!";
          errorDiv.style.display = "block";
          passwordInput.value = "";
        }
      };

      // Logout function - globally accessible
      window.handleLogout = function () {
        if (confirm("Czy na pewno chcesz siÄ™ wylogowaÄ‡?")) {
          isAuthenticated = false;
          localStorage.removeItem("adminAuthenticated");
          showLoginScreen();
        }
      };

      // Initialize page
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Page loaded, checking authentication...");

        if (isAuthenticated) {
          showDashboard();
        } else {
          showLoginScreen();
        }

        // Enter key support for login
        const passwordInput = document.getElementById("password");
        if (passwordInput) {
          passwordInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
              window.handleLogin();
            }
          });
        }
      });

      // Show/Hide functions
      function showDashboard() {
        console.log("Showing dashboard...");
        const loginScreen = document.getElementById("loginScreen");
        const dashboard = document.getElementById("dashboard");

        if (loginScreen) loginScreen.style.display = "none";
        if (dashboard) {
          dashboard.style.display = "block";
          dashboard.classList.add("active");
        }
        
        // Initialize React components
        setTimeout(() => {
          if (window.initReactComponents) {
            window.initReactComponents();
          }
        }, 100);
      }

      function showLoginScreen() {
        console.log("Showing login screen...");
        const loginScreen = document.getElementById("loginScreen");
        const dashboard = document.getElementById("dashboard");
        const passwordInput = document.getElementById("password");

        if (dashboard) {
          dashboard.style.display = "none";
          dashboard.classList.remove("active");
        }
        if (loginScreen) loginScreen.style.display = "flex";
        if (passwordInput) passwordInput.value = "";
      }
    </script>
  </body>
</html>
