---
title: "MyBonzo System Dashboard"
description: "Kompleksowy dashboard diagnostyki i zarzƒÖdzania systemem MyBonzo"
---

<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MyBonzo System Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px 0;
            background: linear-gradient(135deg, rgba(27, 225, 255, 0.1), rgba(22, 78, 99, 0.2));
            border-radius: 20px;
            border: 2px solid rgba(27, 225, 255, 0.3);
            box-shadow: 0 0 30px rgba(27, 225, 255, 0.2);
        }

        .header h1 {
            font-size: 3em;
            background: linear-gradient(135deg, #1be1ff, #00d4ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(27, 225, 255, 0.5);
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.2em;
            color: #b0b0b0;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .card {
            background: linear-gradient(135deg, rgba(22, 78, 99, 0.4), rgba(0, 0, 0, 0.6));
            border: 2px solid rgba(27, 225, 255, 0.3);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .card:hover {
            border-color: #1be1ff;
            box-shadow: 0 0 25px rgba(27, 225, 255, 0.4);
            transform: translateY(-5px);
        }

        .card h3 {
            color: #1be1ff;
            margin-bottom: 15px;
            font-size: 1.4em;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .icon {
            font-size: 1.5em;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-ok { background: #00ff88; box-shadow: 0 0 10px #00ff88; }
        .status-warning { background: #ffaa00; box-shadow: 0 0 10px #ffaa00; }
        .status-error { background: #ff4444; box-shadow: 0 0 10px #ff4444; }
        .status-loading { background: #1be1ff; animation: pulse 1.5s infinite; }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.4; }
        }

        .action-btn {
            background: linear-gradient(135deg, rgba(27, 225, 255, 0.2), rgba(22, 78, 99, 0.3));
            border: 2px solid #164e63;
            color: #1be1ff;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            margin: 5px;
            display: inline-block;
            text-decoration: none;
        }

        .action-btn:hover {
            background: linear-gradient(135deg, rgba(27, 225, 255, 0.3), rgba(22, 78, 99, 0.5));
            border-color: #1be1ff;
            box-shadow: 0 0 15px rgba(27, 225, 255, 0.5);
            transform: translateY(-2px);
        }

        .primary-btn {
            background: linear-gradient(135deg, #1be1ff, #164e63);
            color: #000;
            font-weight: bold;
        }

        .primary-btn:hover {
            background: linear-gradient(135deg, #00d4ff, #1be1ff);
        }

        .log-output {
            background: #000;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #333;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #1be1ff, #00ff88);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            padding: 8px 0;
            border-bottom: 1px solid rgba(27, 225, 255, 0.1);
        }

        .metric:last-child {
            border-bottom: none;
        }

        .metric-label {
            color: #b0b0b0;
        }

        .metric-value {
            color: #1be1ff;
            font-weight: 600;
        }

        .wide-card {
            grid-column: 1 / -1;
        }

        .error-text { color: #ff4444; }
        .warning-text { color: #ffaa00; }
        .success-text { color: #00ff88; }
        .info-text { color: #1be1ff; }

        .loading-spinner {
            border: 3px solid rgba(27, 225, 255, 0.3);
            border-top: 3px solid #1be1ff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .system-health {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .health-metric {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid rgba(27, 225, 255, 0.2);
        }

        .health-value {
            font-size: 2em;
            font-weight: bold;
            color: #1be1ff;
        }

        .health-label {
            font-size: 0.9em;
            color: #b0b0b0;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <header class="header">
            <h1>üöÄ MyBonzo System Dashboard</h1>
            <p>ZarzƒÖdzanie i diagnostyka platformy AI</p>
        </header>

        <div class="grid">
            <!-- System Health Card -->
            <div class="card">
                <h3><span class="icon">üè•</span>Zdrowie Systemu</h3>
                <div id="system-status">
                    <div class="status-indicator status-loading"></div>
                    <span>Sprawdzanie...</span>
                </div>
                <button class="action-btn primary-btn" onclick="runSystemCheck()">
                    Pe≈Çna Diagnostyka
                </button>
                <button class="action-btn" onclick="runQuickCheck()">
                    Szybki Test
                </button>
            </div>

            <!-- Configuration Validator -->
            <div class="card">
                <h3><span class="icon">‚öôÔ∏è</span>Walidacja Konfiguracji</h3>
                <div id="config-status">
                    <div class="status-indicator status-loading"></div>
                    <span>Sprawdzanie konfiguracji...</span>
                </div>
                <button class="action-btn primary-btn" onclick="validateConfig()">
                    Sprawd≈∫ Konfiguracjƒô
                </button>
                <a href="/api/system/validate" class="action-btn" target="_blank">
                    API Endpoint
                </a>
            </div>

            <!-- Dependencies Manager -->
            <div class="card">
                <h3><span class="icon">üì¶</span>ZarzƒÖdzanie Zale≈ºno≈õciami</h3>
                <div id="dependencies-status">
                    <div class="metric">
                        <span class="metric-label">node_modules:</span>
                        <span class="metric-value" id="nodeModulesStatus">Sprawdzanie...</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Lock file:</span>
                        <span class="metric-value" id="lockFileStatus">Sprawdzanie...</span>
                    </div>
                </div>
                <button class="action-btn primary-btn" onclick="runDependencyFix()">
                    Napraw Zale≈ºno≈õci
                </button>
                <button class="action-btn" onclick="checkDependencies()">
                    Sprawd≈∫ Status
                </button>
            </div>

            <!-- Workers Status -->
            <div class="card">
                <h3><span class="icon">‚òÅÔ∏è</span>Cloudflare Workers</h3>
                <div id="workers-status">
                    <div class="metric">
                        <span class="metric-label">Health:</span>
                        <span class="metric-value" id="workerHealth">Sprawdzanie...</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Response Time:</span>
                        <span class="metric-value" id="workerResponseTime">-</span>
                    </div>
                </div>
                <button class="action-btn primary-btn" onclick="testWorkers()">
                    Test Workers
                </button>
                <button class="action-btn" onclick="deployWorkers()">
                    Deploy
                </button>
            </div>

            <!-- API Connectivity -->
            <div class="card">
                <h3><span class="icon">üîó</span>Po≈ÇƒÖczenia API</h3>
                <div id="api-status">
                    <div class="metric">
                        <span class="metric-label">OpenAI:</span>
                        <span class="metric-value" id="openaiStatus">Sprawdzanie...</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Cloudflare:</span>
                        <span class="metric-value" id="cloudflareStatus">Sprawdzanie...</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Anthropic:</span>
                        <span class="metric-value" id="anthropicStatus">Sprawdzanie...</span>
                    </div>
                </div>
                <button class="action-btn primary-btn" onclick="testAPIConnections()">
                    Test Wszystkich API
                </button>
            </div>

            <!-- Quick Actions -->
            <div class="card">
                <h3><span class="icon">‚ö°</span>Szybkie Akcje</h3>
                <button class="action-btn" onclick="clearCache()">
                    Wyczy≈õƒá Cache
                </button>
                <button class="action-btn" onclick="restartServices()">
                    Restart Serwis√≥w
                </button>
                <button class="action-btn" onclick="generateReport()">
                    Generuj Raport
                </button>
                <button class="action-btn" onclick="viewLogs()">
                    Poka≈º Logi
                </button>
            </div>
        </div>

        <!-- System Metrics -->
        <div class="card wide-card">
            <h3><span class="icon">üìä</span>Metryki Systemowe</h3>
            <div class="system-health">
                <div class="health-metric">
                    <div class="health-value" id="cpuUsage">-%</div>
                    <div class="health-label">CPU Usage</div>
                </div>
                <div class="health-metric">
                    <div class="health-value" id="memoryUsage">-%</div>
                    <div class="health-label">Memory Usage</div>
                </div>
                <div class="health-metric">
                    <div class="health-value" id="diskSpace">-%</div>
                    <div class="health-label">Disk Usage</div>
                </div>
                <div class="health-metric">
                    <div class="health-value" id="responseTime">-ms</div>
                    <div class="health-label">Avg Response</div>
                </div>
            </div>
        </div>

        <!-- Console Output -->
        <div class="card wide-card">
            <h3><span class="icon">üíª</span>Console Output</h3>
            <div id="console-output" class="log-output">
                <div class="info-text">[INFO] MyBonzo System Dashboard inicjalizowany...</div>
                <div class="info-text">[INFO] Gotowy do u≈ºycia. Kliknij przycisk aby rozpoczƒÖƒá diagnostykƒô.</div>
            </div>
            <button class="action-btn" onclick="clearConsole()">Wyczy≈õƒá</button>
            <button class="action-btn" onclick="exportLogs()">Eksportuj Logi</button>
        </div>
    </div>

    <script>
        // Global state
        let diagnosticsData = {};
        let isRunning = false;

        // Utility functions
        function log(message, type = 'info') {
            const console = document.getElementById('console-output');
            const timestamp = new Date().toLocaleTimeString();
            const colors = {
                info: 'info-text',
                success: 'success-text', 
                warning: 'warning-text',
                error: 'error-text'
            };
            
            const logEntry = document.createElement('div');
            logEntry.className = colors[type] || 'info-text';
            logEntry.textContent = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
            
            console.appendChild(logEntry);
            console.scrollTop = console.scrollHeight;
        }

        function updateStatus(elementId, status, text) {
            const element = document.getElementById(elementId);
            if (element) {
                const indicator = element.querySelector('.status-indicator');
                if (indicator) {
                    indicator.className = `status-indicator status-${status}`;
                }
                const textNode = element.childNodes[element.childNodes.length - 1];
                if (textNode) {
                    textNode.textContent = text;
                }
            }
        }

        function setMetric(elementId, value) {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = value;
            }
        }

        // API functions
        async function makeRequest(url, options = {}) {
            try {
                const response = await fetch(url, {
                    ...options,
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    }
                });
                
                // Status 422 jest prawid≈Çowy dla konfiguracji z b≈Çƒôdami
                if (!response.ok && response.status !== 422) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                return {
                    data: await response.json(),
                    status: response.status,
                    ok: response.ok
                };
            } catch (error) {
                log(`B≈ÇƒÖd API ${url}: ${error.message}`, 'error');
                throw error;
            }
        }

        // Main diagnostic functions
        async function runSystemCheck() {
            if (isRunning) return;
            
            isRunning = true;
            log('Rozpoczynam pe≈ÇnƒÖ diagnostykƒô systemu...', 'info');
            updateStatus('system-status', 'loading', 'Diagnostyka w toku...');
            
            try {
                const result = await makeRequest('/api/system/validate?full=true');
                diagnosticsData = result.data;
                
                // Update system status
                const overallStatus = result.data?.summary?.overallStatus || 'unknown';
                const statusMap = {
                    'healthy': 'ok',
                    'warning': 'warning', 
                    'critical': 'error'
                };
                
                updateStatus('system-status', statusMap[overallStatus] || 'warning', 
                    `System: ${overallStatus} (${result.data?.summary?.totalErrors || 0} b≈Çƒôd√≥w, ${result.data?.summary?.totalWarnings || 0} ostrze≈ºe≈Ñ)`);
                
                // Update metrics
                if (result.data?.workers) {
                    const healthyWorkers = result.data.workers.filter(w => w.status === 'ok').length;
                    setMetric('workerHealth', `${healthyWorkers}/${result.data.workers.length} OK`);
                    
                    const avgResponseTime = result.data.workers
                        .filter(w => w.responseTime)
                        .reduce((sum, w, _, arr) => sum + w.responseTime / arr.length, 0);
                    setMetric('workerResponseTime', avgResponseTime ? `${Math.round(avgResponseTime)}ms` : '-');
                }
                
                log(`Diagnostyka zako≈Ñczona: ${overallStatus}`, overallStatus === 'healthy' ? 'success' : 'warning');
                
            } catch (error) {
                updateStatus('system-status', 'error', 'B≈ÇƒÖd diagnostyki');
                log(`B≈ÇƒÖd diagnostyki: ${error.message}`, 'error');
            } finally {
                isRunning = false;
            }
        }

        async function runQuickCheck() {
            log('Szybki test systemu...', 'info');
            
            try {
                const result = await makeRequest('/api/system/validate');
                
                if (result.data?.data?.valid) {
                    updateStatus('system-status', 'ok', 'Konfiguracja prawid≈Çowa');
                    log('Szybki test: OK', 'success');
                } else if (result.status === 422) {
                    const errors = result.data?.data?.errors?.length || 0;
                    updateStatus('system-status', 'warning', `${errors} problem√≥w konfiguracji`);
                    log(`Szybki test: ${errors} problem√≥w konfiguracji`, 'warning');
                    // Wy≈õwietl b≈Çƒôdy w konsoli
                    result.data?.data?.errors?.forEach(error => log(error, 'warning'));
                } else {
                    updateStatus('system-status', 'warning', 'Nieznany status');
                    log('Szybki test: nieznany status', 'warning');
                }
            } catch (error) {
                updateStatus('system-status', 'error', 'B≈ÇƒÖd testu');
                log(`B≈ÇƒÖd szybkiego testu: ${error.message}`, 'error');
            }
        }

        async function validateConfig() {
            log('Walidacja konfiguracji...', 'info');
            
            try {
                const result = await makeRequest('/api/system/validate');
                
                if (result.data?.data?.valid) {
                    updateStatus('config-status', 'ok', 'Konfiguracja prawid≈Çowa');
                    log('Konfiguracja: wszystkie zmienne ustawione', 'success');
                } else if (result.status === 422) {
                    const errors = result.data?.data?.errors?.length || 0;
                    updateStatus('config-status', 'warning', `${errors} b≈Çƒôd√≥w konfiguracji`);
                    log(`Konfiguracja: ${errors} b≈Çƒôd√≥w znalezionych`, 'warning');
                    result.data?.data?.errors?.forEach(error => log(`Config: ${error}`, 'warning'));
                } else {
                    updateStatus('config-status', 'warning', 'Nieznany status konfiguracji');
                    log('Konfiguracja: nieznany status', 'warning');
                }
            } catch (error) {
                updateStatus('config-status', 'error', 'B≈ÇƒÖd walidacji');
                log(`B≈ÇƒÖd walidacji: ${error.message}`, 'error');
            }
        }

        async function checkDependencies() {
            log('Sprawdzanie zale≈ºno≈õci...', 'info');
            
            // Symulacja sprawdzenia zale≈ºno≈õci (w rzeczywisto≈õci trzeba by API endpoint)
            try {
                // Check if we can access basic info
                setMetric('nodeModulesStatus', 'Sprawdzanie...');
                setMetric('lockFileStatus', 'Sprawdzanie...');
                
                // Simulate check
                setTimeout(() => {
                    setMetric('nodeModulesStatus', 'Zainstalowane');
                    setMetric('lockFileStatus', 'pnpm-lock.yaml');
                    log('Zale≈ºno≈õci: OK', 'success');
                }, 1000);
                
            } catch (error) {
                log(`B≈ÇƒÖd sprawdzania zale≈ºno≈õci: ${error.message}`, 'error');
            }
        }

        async function testWorkers() {
            log('Testowanie Cloudflare Workers...', 'info');
            
            try {
                const workerUrl = 'https://luc-de-zen-on.stolarnia-ams.workers.dev';
                const startTime = Date.now();
                
                const response = await fetch(`${workerUrl}/health`, {
                    method: 'GET',
                    signal: AbortSignal.timeout(5000)
                });
                
                const responseTime = Date.now() - startTime;
                
                if (response.ok) {
                    setMetric('workerHealth', 'OK');
                    setMetric('workerResponseTime', `${responseTime}ms`);
                    log(`Workers: OK (${responseTime}ms)`, 'success');
                } else {
                    setMetric('workerHealth', `Error ${response.status}`);
                    log(`Workers: Error ${response.status}`, 'warning');
                }
            } catch (error) {
                setMetric('workerHealth', 'Offline');
                setMetric('workerResponseTime', '-');
                log(`Workers: ${error.message}`, 'error');
            }
        }

        async function testAPIConnections() {
            log('Testowanie po≈ÇƒÖcze≈Ñ API...', 'info');
            
            // OpenAI test (simplified)
            try {
                setMetric('openaiStatus', 'Testowanie...');
                // Simulated test - in reality would need API endpoint
                setTimeout(() => {
                    setMetric('openaiStatus', 'OK');
                    log('OpenAI API: OK', 'success');
                }, 1500);
            } catch (error) {
                setMetric('openaiStatus', 'Error');
                log(`OpenAI API: ${error.message}`, 'error');
            }
            
            // Other APIs similar pattern...
            setTimeout(() => {
                setMetric('cloudflareStatus', 'OK');
                setMetric('anthropicStatus', 'Not configured');
            }, 2000);
        }

        // Action functions
        function runDependencyFix() {
            log('Rozpoczynam naprawƒô zale≈ºno≈õci...', 'info');
            log('Uruchom: pwsh scripts/fix-dependencies.ps1', 'info');
            alert('Uruchom skrypt: scripts/fix-dependencies.ps1');
        }

        function clearCache() {
            log('Czyszczenie cache...', 'info');
            log('Uruchom: Remove-Item -Recurse -Force .astro, .vite, node_modules/.vite', 'info');
        }

        function restartServices() {
            log('Restart serwis√≥w...', 'info');
            log('Uruchom: pnpm dev (restart)', 'info');
        }

        function deployWorkers() {
            log('Deploy Workers...', 'info');
            log('Uruchom: wrangler deploy', 'info');
        }

        function generateReport() {
            if (!diagnosticsData || !diagnosticsData.summary) {
                log('Najpierw uruchom pe≈ÇnƒÖ diagnostykƒô', 'warning');
                return;
            }
            
            log('Generowanie raportu...', 'info');
            
            const report = `
# MyBonzo System Report
Generated: ${new Date().toLocaleString()}

## Summary
- Status: ${diagnosticsData.summary?.overallStatus || 'unknown'}
- Errors: ${diagnosticsData.summary?.totalErrors || 0}
- Warnings: ${diagnosticsData.summary?.totalWarnings || 0}

## Details
${JSON.stringify(diagnosticsData, null, 2)}
            `;
            
            const blob = new Blob([report], { type: 'text/markdown' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `mybonzo-report-${new Date().toISOString().slice(0, 16)}.md`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            log('Raport wygenerowany i pobrany', 'success');
        }

        function viewLogs() {
            log('Otwieranie log√≥w systemowych...', 'info');
            window.open('/api/system/validate?full=true&format=markdown', '_blank');
        }

        function clearConsole() {
            document.getElementById('console-output').innerHTML = '';
            log('Console wyczyszczony', 'info');
        }

        function exportLogs() {
            const logs = document.getElementById('console-output').textContent;
            const blob = new Blob([logs], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `mybonzo-console-${new Date().toISOString().slice(0, 16)}.log`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            log('Logi wyeksportowane', 'success');
        }

        // Initialize dashboard
        function initDashboard() {
            log('MyBonzo System Dashboard uruchomiony', 'success');
            log('Dostƒôpne narzƒôdzia: diagnostyka, walidacja, naprawy, monitoring', 'info');
            
            // Auto-run quick check on load
            setTimeout(() => {
                runQuickCheck();
                validateConfig();
                checkDependencies();
            }, 1000);
            
            // Update metrics periodically
            setInterval(() => {
                // Simulate system metrics (in real implementation would come from API)
                const cpu = Math.floor(Math.random() * 30 + 20);
                const memory = Math.floor(Math.random() * 40 + 30);
                const disk = Math.floor(Math.random() * 20 + 40);
                const response = Math.floor(Math.random() * 200 + 100);
                
                setMetric('cpuUsage', `${cpu}%`);
                setMetric('memoryUsage', `${memory}%`);
                setMetric('diskSpace', `${disk}%`);
                setMetric('responseTime', `${response}ms`);
            }, 5000);
        }

        // Start dashboard when page loads
        document.addEventListener('DOMContentLoaded', initDashboard);
    </script>
</body>
</html>
