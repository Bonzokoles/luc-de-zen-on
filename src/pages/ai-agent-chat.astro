---
import MyBonzoLayout from "../layouts/MyBonzoLayout.astro";
---

<MyBonzoLayout
  siteTitle="AI Agent Chat | MyBonzo Platform"
  description="Rozmawiaj z zaawansowanym AI Agentem w czasie rzeczywistym przez WebSocket."
>
  <main class="min-h-svh">
    <section class="ai-workers-section py-10">
      <div class="section-container max-w-6xl mx-auto">
        <h1 class="section-title">AI AGENT CHAT</h1>
        <p class="section-description">
          Zaawansowany AI Agent z pamiƒôciƒÖ konwersacji, generowaniem obraz√≥w i
          t≈Çumaczeniem.<br />
          <span class="text-cyan-400 text-sm">
            ü§ñ Streaming responses ‚Ä¢ üíæ Persistent memory ‚Ä¢ üåê Multi-language ‚Ä¢
            üé® Image generation
          </span>
        </p>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mt-6">
          <!-- Chat Interface -->
          <div class="lg:col-span-3">
            <div
              class="border border-edge rounded-lg"
              style="background: rgba(0,0,0,0.5); height: 600px; display: flex; flex-direction: column;"
            >
              <!-- Chat Header -->
              <div class="p-4 border-b border-edge">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-3">
                    <div
                      class="w-3 h-3 rounded-full bg-green-400 animate-pulse"
                      id="connectionStatus"
                    >
                    </div>
                    <h3 class="text-lg font-semibold text-primary-foreground">
                      MyBonzo Agent
                    </h3>
                    <span class="text-sm text-gray-400" id="sessionInfo"
                      >≈ÅƒÖczenie...</span
                    >
                  </div>
                  <div class="flex items-center space-x-2">
                    <button
                      id="clearHistoryBtn"
                      class="px-3 py-1 text-xs bg-red-600/20 text-red-400 border border-red-600/50 rounded hover:bg-red-600/30 transition-colors"
                    >
                      Wyczy≈õƒá historiƒô
                    </button>
                    <button
                      id="reconnectBtn"
                      class="px-3 py-1 text-xs bg-cyan-600/20 text-cyan-400 border border-cyan-600/50 rounded hover:bg-cyan-600/30 transition-colors"
                    >
                      Po≈ÇƒÖcz ponownie
                    </button>
                  </div>
                </div>
              </div>

              <!-- Messages Container -->
              <div
                class="flex-1 overflow-y-auto p-4 space-y-4"
                id="messagesContainer"
              >
                <!-- Messages will be added here -->
                <div
                  class="text-center text-gray-400 text-sm"
                  id="loadingMessage"
                >
                  ≈Åadowanie konwersacji...
                </div>
              </div>

              <!-- Typing Indicator -->
              <div
                class="px-4 py-2 border-t border-edge hidden"
                id="typingIndicator"
              >
                <div class="flex items-center space-x-2">
                  <div class="flex space-x-1">
                    <div
                      class="w-2 h-2 bg-cyan-400 rounded-full animate-bounce"
                    >
                    </div>
                    <div
                      class="w-2 h-2 bg-cyan-400 rounded-full animate-bounce"
                      style="animation-delay: 0.1s"
                    >
                    </div>
                    <div
                      class="w-2 h-2 bg-cyan-400 rounded-full animate-bounce"
                      style="animation-delay: 0.2s"
                    >
                    </div>
                  </div>
                  <span class="text-sm text-cyan-400">Agent pisze...</span>
                </div>
              </div>

              <!-- Input Area -->
              <div class="p-4 border-t border-edge">
                <div class="flex space-x-3">
                  <textarea
                    id="messageInput"
                    rows="2"
                    class="flex-1 p-3 border border-edge rounded text-primary-foreground placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none"
                    style="background: rgba(0,0,0,0.3);"
                    placeholder="Napisz wiadomo≈õƒá do AI Agenta..."
                    disabled></textarea>
                  <button
                    id="sendMessageBtn"
                    class="px-6 py-3 bg-cyan-600 text-white rounded hover:bg-cyan-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled
                  >
                    Wy≈õlij
                  </button>
                </div>
                <div class="flex items-center justify-between mt-2">
                  <div class="flex items-center space-x-4">
                    <label class="flex items-center space-x-2 text-sm">
                      <input type="checkbox" id="useOpenAI" class="rounded" />
                      <span>U≈ºyj OpenAI GPT-4</span>
                    </label>
                    <select
                      id="languageSelect"
                      class="text-xs p-1 border border-edge rounded"
                      style="background: rgba(0,0,0,0.5);"
                    >
                      <option value="polish">Polski</option>
                      <option value="english">English</option>
                    </select>
                  </div>
                  <div class="text-xs text-gray-400">
                    Enter = wy≈õlij ‚Ä¢ Shift+Enter = nowa linia
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Agent Tools Panel -->
          <div class="lg:col-span-1">
            <div
              class="border border-edge rounded-lg p-4"
              style="background: rgba(0,0,0,0.5);"
            >
              <h3 class="text-lg font-semibold mb-4 text-primary-foreground">
                Narzƒôdzia Agenta
              </h3>

              <!-- Image Generation -->
              <div class="mb-6">
                <h4 class="text-sm font-semibold mb-2 text-cyan-400">
                  üé® Generator obraz√≥w
                </h4>
                <input
                  type="text"
                  id="imagePromptInput"
                  class="w-full p-2 text-xs border border-edge rounded mb-2"
                  style="background: rgba(0,0,0,0.3);"
                  placeholder="Opis obrazu..."
                />
                <button
                  id="generateImageBtn"
                  class="w-full py-2 text-xs bg-purple-600/20 text-purple-400 border border-purple-600/50 rounded hover:bg-purple-600/30 transition-colors"
                >
                  Generuj obraz
                </button>
              </div>

              <!-- Translation -->
              <div class="mb-6">
                <h4 class="text-sm font-semibold mb-2 text-cyan-400">
                  üåê T≈Çumacz
                </h4>
                <textarea
                  id="translateInput"
                  rows="2"
                  class="w-full p-2 text-xs border border-edge rounded mb-2"
                  style="background: rgba(0,0,0,0.3);"
                  placeholder="Tekst do t≈Çumaczenia..."></textarea>
                <div class="flex space-x-1 mb-2">
                  <select
                    id="translateFrom"
                    class="flex-1 text-xs p-1 border border-edge rounded"
                    style="background: rgba(0,0,0,0.5);"
                  >
                    <option value="polish">PL</option>
                    <option value="english">EN</option>
                  </select>
                  <span class="px-2 py-1 text-xs">‚Üí</span>
                  <select
                    id="translateTo"
                    class="flex-1 text-xs p-1 border border-edge rounded"
                    style="background: rgba(0,0,0,0.5);"
                  >
                    <option value="english">EN</option>
                    <option value="polish">PL</option>
                  </select>
                </div>
                <button
                  id="translateBtn"
                  class="w-full py-2 text-xs bg-green-600/20 text-green-400 border border-green-600/50 rounded hover:bg-green-600/30 transition-colors"
                >
                  T≈Çumacz
                </button>
              </div>

              <!-- Agent Status -->
              <div class="mb-6">
                <h4 class="text-sm font-semibold mb-2 text-cyan-400">
                  üìä Status Agenta
                </h4>
                <div class="space-y-2 text-xs">
                  <div class="flex justify-between">
                    <span>Po≈ÇƒÖczenie:</span>
                    <span id="connectionStatusText" class="text-green-400"
                      >Aktywne</span
                    >
                  </div>
                  <div class="flex justify-between">
                    <span>Wiadomo≈õci:</span>
                    <span id="messageCount">0</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Sesja:</span>
                    <span id="sessionIdDisplay" class="text-gray-400">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Model:</span>
                    <span id="currentModel" class="text-cyan-400"
                      >Cloudflare AI</span
                    >
                  </div>
                </div>
              </div>

              <!-- Quick Actions -->
              <div>
                <h4 class="text-sm font-semibold mb-2 text-cyan-400">
                  ‚ö° Szybkie akcje
                </h4>
                <div class="space-y-2">
                  <button
                    class="quick-action-btn"
                    onclick="sendQuickMessage('Opowiedz mi ≈ºart')"
                  >
                    üòÑ ≈ªart
                  </button>
                  <button
                    class="quick-action-btn"
                    onclick="sendQuickMessage('Jaka jest dzisiaj pogoda?')"
                  >
                    üå§Ô∏è Pogoda
                  </button>
                  <button
                    class="quick-action-btn"
                    onclick="sendQuickMessage('Napisz kr√≥tki wiersz')"
                  >
                    üìù Wiersz
                  </button>
                  <button
                    class="quick-action-btn"
                    onclick="sendQuickMessage('Zaproponuj ciekawy projekt programistyczny')"
                  >
                    üíª Projekt IT
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</MyBonzoLayout>

<style>
  .section-container {
    padding: 2rem;
    text-align: center;
  }
  .section-title {
    font-size: 3rem;
    font-weight: bold;
    color: #00bcd4;
    margin-bottom: 1rem;
    text-transform: uppercase;
  }
  .section-description {
    font-size: 1.1rem;
    color: #d1d5db;
    margin-bottom: 1.25rem;
  }
  .ai-workers-section {
    min-height: 100vh;
  }
  .quick-action-btn {
    width: 100%;
    padding: 0.5rem;
    text-align: left;
    font-size: 0.75rem;
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid #374151;
    color: #d1d5db;
    border-radius: 0.375rem;
    transition: all 0.2s;
    cursor: pointer;
  }
  .quick-action-btn:hover {
    background-color: #374151;
    border-color: #00bcd4;
    color: #00bcd4;
  }

  /* Message styles */
  .message {
    max-width: 80%;
    padding: 0.75rem 1rem;
    border-radius: 1rem;
    margin-bottom: 0.5rem;
  }
  .message.user {
    background: linear-gradient(135deg, #0891b2, #0e7490);
    color: white;
    margin-left: auto;
    border-bottom-right-radius: 0.25rem;
  }
  .message.assistant {
    background: rgba(55, 65, 81, 0.8);
    color: #d1d5db;
    border: 1px solid #374151;
    border-bottom-left-radius: 0.25rem;
  }
  .message.system {
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
    border: 1px solid rgba(16, 185, 129, 0.3);
    text-align: center;
    margin: 0 auto;
    font-size: 0.875rem;
  }
  .message-time {
    font-size: 0.75rem;
    color: #9ca3af;
    margin-top: 0.25rem;
  }
</style>

<script is:inline>
  // @ts-nocheck
  // AI Agent WebSocket Client
  let agentSocket = null;
  let sessionId = null;
  let messageCount = 0;
  let isConnected = false;

  // DOM elements
  const elements = {
    connectionStatus: document.getElementById("connectionStatus"),
    sessionInfo: document.getElementById("sessionInfo"),
    messagesContainer: document.getElementById("messagesContainer"),
    loadingMessage: document.getElementById("loadingMessage"),
    typingIndicator: document.getElementById("typingIndicator"),
    messageInput: document.getElementById("messageInput"),
    sendMessageBtn: document.getElementById("sendMessageBtn"),
    useOpenAI: document.getElementById("useOpenAI"),
    languageSelect: document.getElementById("languageSelect"),
    clearHistoryBtn: document.getElementById("clearHistoryBtn"),
    reconnectBtn: document.getElementById("reconnectBtn"),
    connectionStatusText: document.getElementById("connectionStatusText"),
    messageCountEl: document.getElementById("messageCount"),
    sessionIdDisplay: document.getElementById("sessionIdDisplay"),
    currentModel: document.getElementById("currentModel"),
    imagePromptInput: document.getElementById("imagePromptInput"),
    generateImageBtn: document.getElementById("generateImageBtn"),
    translateInput: document.getElementById("translateInput"),
    translateBtn: document.getElementById("translateBtn"),
    translateFrom: document.getElementById("translateFrom"),
    translateTo: document.getElementById("translateTo"),
  };

  // Initialize connection
  function initializeAgentConnection() {
    try {
      // Generate session ID
      sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      // Connect to agent WebSocket
      const wsUrl = `ws://localhost:4326/agents/mybonzo-agent/${sessionId}`;
      agentSocket = new WebSocket(wsUrl);

      agentSocket.onopen = handleConnectionOpen;
      agentSocket.onmessage = handleMessage;
      agentSocket.onclose = handleConnectionClose;
      agentSocket.onerror = handleConnectionError;
    } catch (error) {
      console.error("Failed to initialize agent connection:", error);
      showSystemMessage("‚ùå B≈ÇƒÖd inicjalizacji po≈ÇƒÖczenia z Agentem");
    }
  }

  function handleConnectionOpen() {
    console.log("ü§ñ Connected to MyBonzo Agent");
    isConnected = true;
    updateConnectionStatus(true);
    elements.messageInput.disabled = false;
    elements.sendMessageBtn.disabled = false;
    elements.sessionInfo.textContent = `Sesja: ${sessionId.split("-")[1]}`;
    elements.sessionIdDisplay.textContent = sessionId.split("-")[1];

    showSystemMessage("ü§ñ Po≈ÇƒÖczono z MyBonzo Agent");
    elements.loadingMessage.style.display = "none";
  }

  function handleMessage(event) {
    try {
      const data = JSON.parse(event.data);
      console.log("üì® Agent message:", data.type);

      switch (data.type) {
        case "welcome":
          handleWelcomeMessage(data);
          break;
        case "chat_chunk":
          handleChatChunk(data);
          break;
        case "typing":
          handleTypingIndicator(data.status);
          break;
        case "image_generated":
          handleImageGenerated(data);
          break;
        case "translation_result":
          handleTranslationResult(data);
          break;
        case "error":
          showSystemMessage(`‚ùå B≈ÇƒÖd: ${data.message}`);
          break;
        default:
          console.log("Unknown message type:", data.type);
      }
    } catch (error) {
      console.error("Error parsing agent message:", error);
    }
  }

  function handleWelcomeMessage(data) {
    showSystemMessage(
      `üéâ Witaj! Dostƒôpne funkcje: ${data.capabilities.join(", ")}`
    );

    // Load conversation history
    if (data.conversationHistory && data.conversationHistory.length > 0) {
      data.conversationHistory.forEach((msg) => {
        addMessage(msg.content, msg.role, new Date(msg.timestamp));
      });
    }
  }

  let currentAssistantMessage = null;

  function handleChatChunk(data) {
    if (!data.isDone) {
      // Streaming chunk
      if (!currentAssistantMessage) {
        currentAssistantMessage = addMessage("", "assistant");
      }
      currentAssistantMessage.textContent += data.content;
      scrollToBottom();
    } else {
      // Message complete
      if (currentAssistantMessage && data.fullResponse) {
        currentAssistantMessage.textContent = data.fullResponse;
      }
      currentAssistantMessage = null;
      handleTypingIndicator(false);
      messageCount++;
      elements.messageCountEl.textContent = messageCount;
    }
  }

  function handleTypingIndicator(isTyping) {
    if (isTyping) {
      elements.typingIndicator.classList.remove("hidden");
    } else {
      elements.typingIndicator.classList.add("hidden");
    }
    scrollToBottom();
  }

  function handleConnectionClose() {
    console.log("üîå Agent connection closed");
    isConnected = false;
    updateConnectionStatus(false);
    elements.messageInput.disabled = true;
    elements.sendMessageBtn.disabled = true;
    showSystemMessage("üîå Po≈ÇƒÖczenie z Agentem zosta≈Ço zamkniƒôte");
  }

  function handleConnectionError(error) {
    console.error("‚ùå Agent connection error:", error);
    showSystemMessage("‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z Agentem");
  }

  function updateConnectionStatus(connected) {
    if (connected) {
      elements.connectionStatus.className =
        "w-3 h-3 rounded-full bg-green-400 animate-pulse";
      elements.connectionStatusText.textContent = "Aktywne";
      elements.connectionStatusText.className = "text-green-400";
    } else {
      elements.connectionStatus.className = "w-3 h-3 rounded-full bg-red-400";
      elements.connectionStatusText.textContent = "Roz≈ÇƒÖczone";
      elements.connectionStatusText.className = "text-red-400";
    }
  }

  function sendMessage(content) {
    if (!isConnected || !content.trim()) return;

    // Add user message to UI
    addMessage(content, "user");

    // Send to agent
    const message = {
      type: "chat",
      message: content,
      useOpenAI: elements.useOpenAI.checked,
      language: elements.languageSelect.value,
    };

    agentSocket.send(JSON.stringify(message));

    // Clear input
    elements.messageInput.value = "";
    messageCount++;
    elements.messageCountEl.textContent = messageCount;

    // Update model display
    elements.currentModel.textContent = elements.useOpenAI.checked
      ? "OpenAI GPT-4"
      : "Cloudflare AI";
  }

  function addMessage(content, role, timestamp = new Date()) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${role}`;

    const contentDiv = document.createElement("div");
    contentDiv.textContent = content;
    messageDiv.appendChild(contentDiv);

    const timeDiv = document.createElement("div");
    timeDiv.className = "message-time";
    timeDiv.textContent = timestamp.toLocaleTimeString("pl-PL");
    messageDiv.appendChild(timeDiv);

    elements.messagesContainer.appendChild(messageDiv);
    scrollToBottom();

    return contentDiv; // Return content div for streaming updates
  }

  function showSystemMessage(content) {
    addMessage(content, "system");
  }

  function scrollToBottom() {
    elements.messagesContainer.scrollTop =
      elements.messagesContainer.scrollHeight;
  }

  function sendQuickMessage(message) {
    elements.messageInput.value = message;
    sendMessage(message);
  }

  // Event listeners
  elements.sendMessageBtn.addEventListener("click", () => {
    sendMessage(elements.messageInput.value);
  });

  elements.messageInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage(elements.messageInput.value);
    }
  });

  elements.clearHistoryBtn.addEventListener("click", () => {
    elements.messagesContainer.innerHTML = "";
    messageCount = 0;
    elements.messageCountEl.textContent = "0";
    showSystemMessage("üóëÔ∏è Historia wyczyszczona");
  });

  elements.reconnectBtn.addEventListener("click", () => {
    if (agentSocket) {
      agentSocket.close();
    }
    setTimeout(initializeAgentConnection, 1000);
  });

  elements.generateImageBtn.addEventListener("click", () => {
    const prompt = elements.imagePromptInput.value.trim();
    if (!prompt || !isConnected) return;

    agentSocket.send(
      JSON.stringify({
        type: "generate_image",
        prompt: prompt,
        width: 512,
        height: 512,
      })
    );

    elements.imagePromptInput.value = "";
    showSystemMessage(`üé® Generowanie obrazu: "${prompt}"`);
  });

  elements.translateBtn.addEventListener("click", () => {
    const text = elements.translateInput.value.trim();
    if (!text || !isConnected) return;

    agentSocket.send(
      JSON.stringify({
        type: "translate",
        text: text,
        sourceLanguage: elements.translateFrom.value,
        targetLanguage: elements.translateTo.value,
      })
    );

    showSystemMessage(`üåê T≈Çumaczenie: "${text}"`);
  });

  function handleImageGenerated(data) {
    if (data.imageUrl) {
      const img = document.createElement("img");
      img.src = data.imageUrl;
      img.className = "max-w-xs rounded border border-edge mt-2";
      img.alt = "Generated image";

      const messageDiv = addMessage(
        `üé® Obraz wygenerowany: "${data.prompt}"`,
        "assistant"
      );
      messageDiv.parentElement.appendChild(img);
    }
  }

  function handleTranslationResult(data) {
    showSystemMessage(
      `üåê T≈Çumaczenie: "${data.originalText}" ‚Üí "${data.translatedText}"`
    );
  }

  // Initialize when page loads
  document.addEventListener("DOMContentLoaded", () => {
    setTimeout(initializeAgentConnection, 500);
  });
</script>
