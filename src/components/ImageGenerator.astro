---
// This component is client-side only because it uses state.
---

<div class="image-generator" client:load>
  <h3>Generator Obrazów</h3>
  <input type="text" id="image-prompt" placeholder="Opis grafiki" />
  <button id="generate-image-btn">Generuj grafikę</button>
  <div id="image-output" style="margin-top: 1rem;">
    <!-- Generated image will be displayed here -->
  </div>
</div>

<script>
  const promptInput = document.getElementById('image-prompt');
  const generateBtn = document.getElementById('generate-image-btn');
  const imageOutput = document.getElementById('image-output');

  async function generateImage() {
    const prompt = promptInput.value;
    if (!prompt.trim()) return;

    imageOutput.innerHTML = 'Generowanie...';

    const res = await fetch('/api/generate-image', { // Assuming a route is set up for this worker
      method: 'POST',
      body: JSON.stringify({ prompt }),
      headers: { 'Content-Type': 'application/json' },
    });
    const data = await res.json();

    if (data.imageUrl) {
      const img = document.createElement('img');
      // The response from the worker is the raw image data, not a URL.
      // We need to create a blob URL to display it.
      const blob = new Blob([new Uint8Array(data.imageUrl.data)], { type: 'image/png' });
      img.src = URL.createObjectURL(blob);
      img.alt = "Wygenerowany obraz";
      img.style.maxWidth = '100%';
      imageOutput.innerHTML = '';
      imageOutput.appendChild(img);
    } else {
      imageOutput.innerHTML = 'Wystąpił błąd podczas generowania obrazu.';
    }
  }

  generateBtn.addEventListener('click', generateImage);
</script>