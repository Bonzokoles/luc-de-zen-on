---
// This component is client-side only because it uses state.
---

<div class="image-generator" client:load>
  <h3>Generator ObrazĂłw</h3>
  <input type="text" id="image-prompt" placeholder="Opis grafiki" />
  <button id="generate-image-btn">Generuj grafikÄ™</button>
  <div id="image-output" style="margin-top: 1rem;">
    <!-- Generated image will be displayed here -->
  </div>
</div>

<script>
  const promptInput = document.getElementById('image-prompt');
  const generateBtn = document.getElementById('generate-image-btn');
  const imageOutput = document.getElementById('image-output');

  async function generateImage() {
    const prompt = promptInput.value;
    if (!prompt.trim()) return;

    generateBtn.disabled = true;
    generateBtn.textContent = 'Generowanie...';
    imageOutput.innerHTML = 'Generowanie obrazu...';

    try {
      const res = await fetch('/api/generate-image', {
        method: 'POST',
        body: JSON.stringify({ prompt }),
        headers: { 'Content-Type': 'application/json' },
      });
      
      const data = await res.json();
      console.log('Response:', data);

      if (data.success && data.imageUrl) {
        const img = document.createElement('img');
        
        // SprawdĹş czy imageUrl to string (URL) czy object (raw data)
        if (typeof data.imageUrl === 'string') {
          // JeĹ›li to URL string, uĹĽyj go bezpoĹ›rednio
          img.src = data.imageUrl;
        } else if (data.imageUrl.data) {
          // JeĹ›li to raw data, stwĂłrz blob URL
          const blob = new Blob([new Uint8Array(data.imageUrl.data)], { type: 'image/png' });
          img.src = URL.createObjectURL(blob);
        } else {
          throw new Error('NieprawidĹ‚owy format odpowiedzi');
        }
        
        img.alt = `Wygenerowany obraz: ${prompt}`;
        img.style.maxWidth = '100%';
        img.style.borderRadius = '8px';
        img.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        
        imageOutput.innerHTML = '';
        imageOutput.appendChild(img);
        
        if (data.message) {
          const message = document.createElement('p');
          message.textContent = data.message;
          message.style.fontSize = '0.9em';
          message.style.color = '#666';
          message.style.marginTop = '8px';
          imageOutput.appendChild(message);
        }
        
      } else {
        imageOutput.innerHTML = `BĹ‚Ä…d: ${data.error || 'WystÄ…piĹ‚ nieznany bĹ‚Ä…d'}`;
      }
      
    } catch (error) {
      console.error('Image generation error:', error);
      imageOutput.innerHTML = 'WystÄ…piĹ‚ bĹ‚Ä…d podczas generowania obrazu. SprĂłbuj ponownie.';
    } finally {
      generateBtn.disabled = false;
      generateBtn.textContent = 'Generuj grafikÄ™';
    }
  }

  generateBtn.addEventListener('click', generateImage);
  
  // Enter key support
  promptInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !generateBtn.disabled) {
      generateImage();
    }
  });
</script>

<style>
  .image-generator {
    padding: 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.37);
  }
  
  #image-prompt {
    width: 100%;
    padding: 12px 16px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    margin-bottom: 12px;
    background: rgba(255, 255, 255, 0.95);
    color: #333;
  }
  
  #generate-image-btn {
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    border: none;
    color: white;
    padding: 12px 24px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: transform 0.2s;
  }
  
  #generate-image-btn:hover:not(:disabled) {
    transform: translateY(-2px);
  }
  
  #generate-image-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
</style>
