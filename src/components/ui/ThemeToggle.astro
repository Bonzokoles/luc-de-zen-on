---
// src/components/ui/ThemeToggle.astro
---

<theme-toggle>
  <button class="theme-toggle" aria-pressed="false" title="Toggle theme">
    <span class="icon light" aria-hidden="true">‚òÄÔ∏è</span>
    <span class="icon dark" aria-hidden="true">üåô</span>
  </button>
</theme-toggle>

<style>
  theme-toggle {
    display: inline-block;
  }

  .theme-toggle {
    position: relative;
    background: var(--accent-regular, #6366f1);
    border: none;
    border-radius: 999rem;
    padding: 0.5rem;
    cursor: pointer;
    width: 3rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .theme-toggle:hover {
    background: var(--accent-dark, #4f46e5);
    transform: scale(1.05);
  }

  .theme-toggle:focus-visible {
    outline: 2px solid var(--accent-regular, #6366f1);
    outline-offset: 2px;
  }

  .icon {
    position: absolute;
    font-size: 1rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  .icon.light {
    transform: translateX(0) scale(1);
    opacity: 1;
  }

  .icon.dark {
    transform: translateX(100%) scale(0.5);
    opacity: 0;
  }

  /* Dark theme states */
  :global(.theme-dark) .icon.light {
    transform: translateX(-100%) scale(0.5);
    opacity: 0;
  }

  :global(.theme-dark) .icon.dark {
    transform: translateX(0) scale(1);
    opacity: 1;
  }

  /* Improve visibility */
  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light {
    color: var(--accent-text-over, white);
  }

  /* Animation for the toggle button */
  .theme-toggle::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, transparent 30%, var(--accent-regular, #6366f1) 70%);
    transform: translate(-50%, -50%) scale(0);
    transition: transform 0.3s ease;
    z-index: -1;
  }

  .theme-toggle:active::before {
    transform: translate(-50%, -50%) scale(1);
  }

  /* Custom properties for theming */
  :root {
    --theme-transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .theme-toggle {
      border: 2px solid currentColor;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .icon,
    .theme-toggle,
    .theme-toggle::before {
      transition: none;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      
      const button = this.querySelector('button')!;
      
      // Set theme function
      const setTheme = (dark: boolean) => {
        const html = document.documentElement;
        const method = dark ? 'add' : 'remove';
        
        html.classList[method]('theme-dark');
        button.setAttribute('aria-pressed', String(dark));
        
        // Update local storage
        try {
          localStorage.setItem('theme', dark ? 'dark' : 'light');
        } catch (e) {
          console.warn('Could not save theme preference');
        }

        // Dispatch custom event
        window.dispatchEvent(new CustomEvent('theme-changed', {
          detail: { theme: dark ? 'dark' : 'light' }
        }));
      };

      // Initialize theme
      const initializeTheme = () => {
        let shouldBeDark = false;

        try {
          const saved = localStorage.getItem('theme');
          if (saved) {
            shouldBeDark = saved === 'dark';
          } else {
            // Check system preference
            shouldBeDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          }
        } catch (e) {
          // Fallback to system preference
          shouldBeDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        }

        setTheme(shouldBeDark);
      };

      // Toggle theme on click
      button.addEventListener('click', () => {
        const isDark = document.documentElement.classList.contains('theme-dark');
        setTheme(!isDark);
      });

      // Handle keyboard navigation
      button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });

      // Listen for system theme changes
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleSystemThemeChange = (e: MediaQueryListEvent) => {
        // Only auto-switch if user hasn't manually set a preference
        try {
          const saved = localStorage.getItem('theme');
          if (!saved) {
            setTheme(e.matches);
          }
        } catch (e) {
          // If localStorage is not available, follow system preference
          setTheme(e.matches);
        }
      };

      if (mediaQuery.addEventListener) {
        mediaQuery.addEventListener('change', handleSystemThemeChange);
      } else {
        // Fallback for older browsers
        mediaQuery.addListener(handleSystemThemeChange);
      }

      // Initialize theme when component is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTheme);
      } else {
        initializeTheme();
      }
    }

    // Public method to get current theme
    getCurrentTheme() {
      return document.documentElement.classList.contains('theme-dark') ? 'dark' : 'light';
    }

    // Public method to set theme programmatically
    setTheme(theme: 'dark' | 'light') {
      const button = this.querySelector('button')!;
      const setTheme = (dark: boolean) => {
        const html = document.documentElement;
        const method = dark ? 'add' : 'remove';
        
        html.classList[method]('theme-dark');
        button.setAttribute('aria-pressed', String(dark));
        
        try {
          localStorage.setItem('theme', dark ? 'dark' : 'light');
        } catch (e) {
          console.warn('Could not save theme preference');
        }

        window.dispatchEvent(new CustomEvent('theme-changed', {
          detail: { theme: dark ? 'dark' : 'light' }
        }));
      };

      setTheme(theme === 'dark');
    }
  }

  // Define the custom element
  if (!customElements.get('theme-toggle')) {
    customElements.define('theme-toggle', ThemeToggle);
  }

  // Debug info
  console.log('üé® ThemeToggle component loaded');
</script>
