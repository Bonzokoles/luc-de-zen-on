---
// AI Workers Navigation Component
---

<section class="ai-workers-section" id="ai-workers">
  <div class="section-container">
    <h2 class="section-title">AI WORKERS</h2>
    <p class="section-description">
      Zaawansowane narzƒôdzia AI dostƒôpne na platformie
    </p>

    <!-- Small Tags Section -->
    <div class="tags-section">
      <button
        class="tag-btn"
        onclick="window.open('/polaczek-agents-system', '_blank')"
      >
        POLACZEK_AGENT_SYS_23
      </button>
      <button
        class="tag-btn"
        onclick="window.open('/bielik-enon-dev', '_blank')"
      >
        BIELIK
      </button>
      <button
        class="tag-btn"
        onclick="window.open('/zenon-mcp-server', '_blank')"
      >
        ZENON
      </button>
      <button
        class="tag-btn"
        onclick="window.open('/klf-sheed-shop', '_blank')"
      >
        KLF_SHEED_SHOOP
      </button>
    </div>

    <div class="workers-grid">
      <!-- Image Generator -->
      <div class="worker-card" data-worker="image">
        <h3 class="worker-title">Generator Obraz√≥w</h3>
        <p class="worker-description">
          Tw√≥rz niesamowite obrazy z tekstu u≈ºywajƒÖc Flux-1 Schnell
        </p>
        <div class="worker-features">
          <span class="feature-tag">Flux AI</span>
          <span class="feature-tag">512-1024px</span>
          <span class="feature-tag">T≈Çumaczenie PL</span>
        </div>
        <div class="worker-actions">
          <input
            type="text"
            placeholder="Opisz obraz..."
            class="quick-prompt"
            id="imagePrompt"
          />
          <button class="action-btn primary" onclick="openImageGenerator()"
            >Generuj</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/image-generator', '_blank')">Otw√≥rz</button
          >
        </div>
      </div>

      <!-- AI Chatbot -->
      <div class="worker-card" data-worker="chat">
        <h3 class="worker-title">AI Chatbot</h3>
        <p class="worker-description">
          Inteligentny asystent do rozm√≥w i odpowiadania na pytania
        </p>
        <div class="worker-features">
          <span class="feature-tag">OpenAI GPT</span>
          <span class="feature-tag">Jƒôzyk polski</span>
          <span class="feature-tag">Kontekst</span>
        </div>
        <div class="worker-actions">
          <input
            type="text"
            placeholder="Zadaj pytanie..."
            class="quick-prompt"
            id="chatPrompt"
          />
          <button class="action-btn primary" onclick="openChatbot()"
            >Chat</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/chatbot', '_blank')">Otw√≥rz</button
          >
        </div>
      </div>

      <!-- BigQuery Analytics -->
      <div class="worker-card" data-worker="bigquery">
        <h3 class="worker-title">BigQuery Analytics</h3>
        <p class="worker-description">
          Analizuj dane z Google BigQuery, wykonuj zapytania SQL
        </p>
        <div class="worker-features">
          <span class="feature-tag">Google Cloud</span>
          <span class="feature-tag">SQL Query</span>
          <span class="feature-tag">Analytics</span>
        </div>
        <div class="worker-actions">
          <input
            type="text"
            placeholder="SELECT * FROM..."
            class="quick-prompt"
            id="bigqueryPrompt"
          />
          <button class="action-btn primary" onclick="openBigQuery()"
            >Analizuj</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/bigquery-analytics', '_blank')"
            >Otw√≥rz</button
          >
        </div>
      </div>

      <!-- Kaggle Datasets -->
      <div class="worker-card" data-worker="kaggle">
        <h3 class="worker-title">Kaggle Datasets</h3>
        <p class="worker-description">
          Przeszukuj zbiory danych, konkursy i profile Kaggle
        </p>
        <div class="worker-features">
          <span class="feature-tag">Machine Learning</span>
          <span class="feature-tag">Datasets</span>
          <span class="feature-tag">Competitions</span>
        </div>
        <div class="worker-actions">
          <input
            type="text"
            placeholder="machine learning..."
            class="quick-prompt"
            id="kagglePrompt"
          />
          <button class="action-btn primary" onclick="openKaggle()"
            >Wyszukaj</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/kaggle-datasets', '_blank')">Otw√≥rz</button
          >
        </div>
      </div>

      <!-- Tavily Search -->
      <div class="worker-card" data-worker="tavily">
        <h3 class="worker-title">Tavily AI Search</h3>
        <p class="worker-description">
          Zaawansowane wyszukiwanie internetowe powered by AI
        </p>
        <div class="worker-features">
          <span class="feature-tag">AI Search</span>
          <span class="feature-tag">Real-time</span>
          <span class="feature-tag">Deep Analysis</span>
        </div>
        <div class="worker-actions">
          <input
            type="text"
            placeholder="wyszukaj w sieci..."
            class="quick-prompt"
            id="tavilyPrompt"
          />
          <button class="action-btn primary" onclick="openTavily()"
            >Szukaj</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/tavily-search', '_blank')">Otw√≥rz</button
          >
        </div>
      </div>

      <!-- Status Monitor -->
      <div class="worker-card" data-worker="status">
        <h3 class="worker-title">Status Worker√≥w</h3>
        <p class="worker-description">
          Sprawd≈∫ status i dostƒôpno≈õƒá wszystkich API worker√≥w
        </p>
        <div class="worker-features">
          <span class="feature-tag">Health Check</span>
          <span class="feature-tag">Monitoring</span>
          <span class="feature-tag">API Status</span>
        </div>
        <div class="worker-actions">
          <div class="status-indicator" id="overallStatus">
            <span class="status-dot"></span>
            <span>Sprawdzanie...</span>
          </div>
          <button class="action-btn primary" onclick="checkAllStatus()"
            >Sprawd≈∫ wszystkie</button
          >
          <button
            class="action-btn secondary"
            onclick="window.open('/worker-status', '_blank')">Monitor</button
          >
        </div>
      </div>
    </div>

    <!-- Additional Functions Grid -->
    <div class="additional-functions-section">
      <h3 class="additional-title">DODATKOWE FUNKCJE</h3>
      <div class="additional-grid">
        <!-- Row 1 -->
        <button
          class="additional-btn"
          onclick="openFunction1()"
          data-function="function1"
        >
          <div class="additional-icon">üîß</div>
          <h4>FUNKCJA 1</h4>
          <p>Opis funkcji 1</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction2()"
          data-function="function2"
        >
          <div class="additional-icon">‚öôÔ∏è</div>
          <h4>FUNKCJA 2</h4>
          <p>Opis funkcji 2</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction3()"
          data-function="function3"
        >
          <div class="additional-icon">üõ†Ô∏è</div>
          <h4>FUNKCJA 3</h4>
          <p>Opis funkcji 3</p>
        </button>

        <!-- Row 2 -->
        <button
          class="additional-btn"
          onclick="openFunction4()"
          data-function="function4"
        >
          <div class="additional-icon">üìä</div>
          <h4>FUNKCJA 4</h4>
          <p>Opis funkcji 4</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction5()"
          data-function="function5"
        >
          <div class="additional-icon">üìà</div>
          <h4>FUNKCJA 5</h4>
          <p>Opis funkcji 5</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction6()"
          data-function="function6"
        >
          <div class="additional-icon">üìâ</div>
          <h4>FUNKCJA 6</h4>
          <p>Opis funkcji 6</p>
        </button>

        <!-- Row 3 -->
        <button
          class="additional-btn"
          onclick="openFunction7()"
          data-function="function7"
        >
          <div class="additional-icon">üîç</div>
          <h4>FUNKCJA 7</h4>
          <p>Opis funkcji 7</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction8()"
          data-function="function8"
        >
          <div class="additional-icon">üíæ</div>
          <h4>FUNKCJA 8</h4>
          <p>Opis funkcji 8</p>
        </button>

        <button
          class="additional-btn"
          onclick="openFunction9()"
          data-function="function9"
        >
          <div class="additional-icon">üåê</div>
          <h4>FUNKCJA 9</h4>
          <p>Opis funkcji 9</p>
        </button>
      </div>
    </div>
  </div>
</section>

<style>
  .ai-workers-section {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    margin: 2rem 0;
    padding: 2rem;
  }

  .section-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-title {
    color: #00d9ff;
    font-size: 2rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
    margin-bottom: 1rem;
    font-family: "Rajdhani", sans-serif;
  }

  .section-description {
    color: #888;
    text-align: center;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  /* Tags Section */
  .tags-section {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    width: 100%;
  }

  .tag-btn {
    background: rgba(0, 217, 255, 0.1);
    border: 1px solid rgba(0, 217, 255, 0.4);
    color: #00d9ff;
    padding: 0.8rem 2rem;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: "Rajdhani", sans-serif;
    flex: 1;
    text-align: center;
    min-width: 0;
  }

  .tag-btn:hover {
    background: rgba(0, 217, 255, 0.2);
    border-color: #00d9ff;
    box-shadow: 0 2px 8px rgba(0, 217, 255, 0.3);
  }

  .workers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .worker-card {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
  }

  .worker-card:hover {
    border-color: #00d9ff;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.2);
  }

  .worker-title {
    color: #00d9ff;
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: "Rajdhani", sans-serif;
  }

  .worker-description {
    color: #ccc;
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .worker-features {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .feature-tag {
    background: rgba(0, 217, 255, 0.1);
    color: #00d9ff;
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
    border: 1px solid rgba(0, 217, 255, 0.3);
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
  }

  .worker-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .quick-prompt {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    color: white;
    padding: 0.75rem;
    font-family: "Rajdhani", sans-serif;
    transition: border-color 0.3s;
  }

  .quick-prompt:focus {
    outline: none;
    border-color: #00d9ff;
    box-shadow: 0 0 10px rgba(0, 217, 255, 0.3);
  }

  .quick-prompt::placeholder {
    color: #888;
  }

  .action-btn {
    padding: 0.75rem 1.5rem;
    border: 1px solid rgba(0, 217, 255, 0.3);
    background: rgba(0, 0, 0, 0.3);
    color: #00d9ff;
    cursor: pointer;
    transition: all 0.3s;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
    font-family: "Rajdhani", sans-serif;
    font-size: 0.9rem;
  }

  .action-btn.primary {
    background: rgba(0, 217, 255, 0.1);
  }

  .action-btn:hover {
    background: rgba(0, 217, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 217, 255, 0.3);
  }

  .action-btn.secondary {
    background: rgba(0, 0, 0, 0.2);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    color: #ccc;
    font-size: 0.9rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #888;
    animation: pulse 2s infinite;
  }

  .status-dot.online {
    background: #4ade80;
  }

  .status-dot.offline {
    background: #ef4444;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  /* Additional Functions Section */
  .additional-functions-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(0, 217, 255, 0.2);
  }

  .additional-title {
    color: #00d9ff;
    font-size: 1.5rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
    margin-bottom: 2rem;
    font-family: "Rajdhani", sans-serif;
  }

  .additional-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
    max-width: 95%;
    margin: 0 auto;
  }

  .additional-btn {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    padding: 1.5rem;
    color: #00d9ff;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 120px;
  }

  .additional-btn:hover {
    border-color: #00d9ff;
    background: rgba(0, 217, 255, 0.1);
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.2);
    transform: translateY(-2px);
  }

  .additional-icon {
    font-size: 2rem;
    margin-bottom: 0.75rem;
  }

  .additional-btn h4 {
    color: #00d9ff;
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 0.5rem 0;
    font-family: "Rajdhani", sans-serif;
  }

  .additional-btn p {
    color: #888;
    font-size: 0.85rem;
    margin: 0;
    line-height: 1.3;
  }

  @media (max-width: 768px) {
    .workers-grid {
      grid-template-columns: 1fr;
    }

    .worker-card {
      padding: 1rem;
    }

    .additional-grid {
      grid-template-columns: 1fr;
      max-width: 100%;
    }

    .additional-btn {
      min-height: 100px;
      padding: 1rem;
    }

    .tags-section {
      flex-direction: column;
      gap: 0.5rem;
    }

    .tag-btn {
      padding: 0.6rem 1rem;
      font-size: 0.8rem;
    }
  }

  @media (max-width: 1024px) and (min-width: 769px) {
    .additional-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  // Image Generator
  function openImageGenerator() {
    const prompt = (
      document.getElementById("imagePrompt") as HTMLInputElement
    )?.value.trim();
    if (prompt) {
      localStorage.setItem("quickPrompt", prompt);
    }
    window.open("/image-generator", "_blank");
  }

  // Chatbot
  function openChatbot() {
    const prompt = (
      document.getElementById("chatPrompt") as HTMLInputElement
    )?.value.trim();
    if (prompt) {
      localStorage.setItem("quickChatPrompt", prompt);
    }
    window.open("/chatbot", "_blank");
  }

  // BigQuery
  function openBigQuery() {
    const prompt = (
      document.getElementById("bigqueryPrompt") as HTMLInputElement
    )?.value.trim();
    if (prompt) {
      localStorage.setItem("quickSQLQuery", prompt);
    }
    window.open("/bigquery-analytics", "_blank");
  }

  // Kaggle
  function openKaggle() {
    const prompt = (
      document.getElementById("kagglePrompt") as HTMLInputElement
    )?.value.trim();
    if (prompt) {
      localStorage.setItem("quickKaggleSearch", prompt);
    }
    window.open("/kaggle-datasets", "_blank");
  }

  // Tavily
  function openTavily() {
    const prompt = (
      document.getElementById("tavilyPrompt") as HTMLInputElement
    )?.value.trim();
    if (prompt) {
      localStorage.setItem("quickTavilySearch", prompt);
    }
    window.open("/tavily-search", "_blank");
  }

  // Status check
  async function checkAllStatus() {
    const statusIndicator = document.getElementById("overallStatus");
    if (!statusIndicator) return;

    const statusDot = statusIndicator.querySelector(".status-dot");
    const statusText = statusIndicator.querySelector("span:last-child");

    if (!statusDot || !statusText) return;

    statusText.textContent = "Sprawdzanie...";
    statusDot.className = "status-dot";

    try {
      const apis = [
        "/api/generate-image",
        "/api/chat",
        "/api/bigquery",
        "/api/kaggle",
        "/api/tavi",
      ];

      const results = await Promise.allSettled(
        apis.map((api) => fetch(api).then((r) => ({ api, ok: r.ok })))
      );

      const online = results.filter(
        (r) => r.status === "fulfilled" && (r.value as any).ok
      ).length;
      const total = apis.length;

      if (online === total) {
        statusDot.className = "status-dot online";
        statusText.textContent = `Wszystkie online (${online}/${total})`;
      } else if (online > 0) {
        statusDot.className = "status-dot";
        statusText.textContent = `Czƒô≈õciowo online (${online}/${total})`;
      } else {
        statusDot.className = "status-dot offline";
        statusText.textContent = `Offline (${online}/${total})`;
      }
    } catch (error) {
      statusDot.className = "status-dot offline";
      statusText.textContent = "B≈ÇƒÖd sprawdzania";
    }
  }

  // Add enter key support for quick prompts
  document.addEventListener("DOMContentLoaded", function () {
    const prompts = document.querySelectorAll(".quick-prompt");
    prompts.forEach((prompt) => {
      prompt.addEventListener("keypress", function (e: KeyboardEvent) {
        if (e.key === "Enter") {
          const workerId = (this as HTMLInputElement).id.replace("Prompt", "");
          const functions: Record<string, () => void> = {
            image: openImageGenerator,
            chat: openChatbot,
            bigquery: openBigQuery,
            kaggle: openKaggle,
            tavily: openTavily,
          };

          if (functions[workerId]) {
            functions[workerId]();
          }
        }
      });
    });

    // Initial status check
    checkAllStatus();
  });

  // Additional Functions
  function openFunction1() {
    console.log("Funkcja 1 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 1
    alert("Funkcja 1 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction2() {
    console.log("Funkcja 2 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 2
    alert("Funkcja 2 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction3() {
    console.log("Funkcja 3 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 3
    alert("Funkcja 3 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction4() {
    console.log("Funkcja 4 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 4
    alert("Funkcja 4 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction5() {
    console.log("Funkcja 5 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 5
    alert("Funkcja 5 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction6() {
    console.log("Funkcja 6 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 6
    alert("Funkcja 6 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction7() {
    console.log("Funkcja 7 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 7
    alert("Funkcja 7 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction8() {
    console.log("Funkcja 8 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 8
    alert("Funkcja 8 - Dodaj tu swojƒÖ implementacjƒô");
  }

  function openFunction9() {
    console.log("Funkcja 9 zosta≈Ça wywo≈Çana");
    // Dodaj tu logikƒô dla funkcji 9
    alert("Funkcja 9 - Dodaj tu swojƒÖ implementacjƒô");
  }
</script>

<style>
  .ai-workers-section {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    margin: 2rem 0;
    padding: 2rem;
  }

  .section-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-title {
    color: #00d9ff;
    font-size: 2rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
    margin-bottom: 1rem;
    font-family: "Rajdhani", sans-serif;
  }

  .section-description {
    color: #888;
    text-align: center;
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  /* SYSTEM CONTROL PANEL STYLES */
  .system-control-panel {
    background: rgba(0, 217, 255, 0.05);
    border: 2px solid rgba(0, 217, 255, 0.3);
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 3rem;
  }

  .system-title {
    color: #00d9ff;
    font-size: 1.5rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
    margin-bottom: 1.5rem;
    font-family: "Rajdhani", sans-serif;
  }

  .system-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
  }

  .system-btn {
    background: rgba(0, 0, 0, 0.4);
    border: 2px solid rgba(0, 217, 255, 0.4);
    border-radius: 6px;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    position: relative;
    display: block;
  }

  .system-btn:hover {
    border-color: #00d9ff;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.3);
    transform: translateY(-2px);
  }

  .system-icon {
    font-size: 2rem;
    text-align: center;
    margin-bottom: 1rem;
  }

  .system-btn h4 {
    color: #00d9ff;
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    text-align: center;
    margin-bottom: 0.5rem;
    font-family: "Rajdhani", sans-serif;
  }

  .system-btn p {
    color: #ccc;
    font-size: 0.9rem;
    text-align: center;
    margin-bottom: 1rem;
    line-height: 1.4;
  }

  .status-badge {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.75rem;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-radius: 12px;
    font-family: "Rajdhani", sans-serif;
  }

  .status-badge.active {
    background: rgba(34, 197, 94, 0.2);
    color: #22c55e;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .status-badge.beta {
    background: rgba(234, 179, 8, 0.2);
    color: #eab308;
    border: 1px solid rgba(234, 179, 8, 0.3);
  }

  .status-badge.production {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
    border: 1px solid rgba(59, 130, 246, 0.3);
  }

  .status-badge.coming {
    background: rgba(107, 114, 128, 0.2);
    color: #6b7280;
    border: 1px solid rgba(107, 114, 128, 0.3);
  }

  .workers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .worker-card {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
  }

  .worker-card:hover {
    border-color: #00d9ff;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.2);
  }

  .worker-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    display: block;
  }

  .worker-title {
    color: #00d9ff;
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: "Rajdhani", sans-serif;
  }

  .worker-description {
    color: #ccc;
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .worker-features {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .feature-tag {
    background: rgba(0, 217, 255, 0.1);
    color: #00d9ff;
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
    border: 1px solid rgba(0, 217, 255, 0.3);
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
  }

  .worker-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .quick-prompt,
  .file-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 217, 255, 0.3);
    color: white;
    padding: 0.75rem;
    font-family: "Rajdhani", sans-serif;
    transition: border-color 0.3s;
  }

  .quick-prompt:focus,
  .file-input:focus {
    outline: none;
    border-color: #00d9ff;
    box-shadow: 0 0 10px rgba(0, 217, 255, 0.3);
  }

  .quick-prompt::placeholder {
    color: #888;
  }

  .action-btn {
    padding: 0.75rem 1.5rem;
    border: 1px solid rgba(0, 217, 255, 0.3);
    background: rgba(0, 0, 0, 0.3);
    color: #00d9ff;
    cursor: pointer;
    transition: all 0.3s;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
    font-family: "Rajdhani", sans-serif;
    font-size: 0.9rem;
  }

  .action-btn.primary {
    background: rgba(0, 217, 255, 0.1);
  }

  .action-btn:hover {
    background: rgba(0, 217, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 217, 255, 0.3);
  }

  .action-btn.secondary {
    background: rgba(0, 0, 0, 0.2);
  }

  @media (max-width: 768px) {
    .workers-grid,
    .system-buttons {
      grid-template-columns: 1fr;
    }

    .worker-card,
    .system-btn {
      padding: 1rem;
    }

    .system-control-panel {
      padding: 1rem;
    }
  }
</style>

<script>
  // Image Generator
  function openImageGenerator() {
    const prompt = document.getElementById("imagePrompt").value.trim();
    if (prompt) {
      localStorage.setItem("quickPrompt", prompt);
      window.open("/ai-image-generator.html", "_blank");
    } else {
      window.open("/ai-image-generator.html", "_blank");
    }
  }

  // Text Generator
  function openTextGenerator() {
    const prompt = document.getElementById("textPrompt").value.trim();
    if (prompt) {
      localStorage.setItem("quickTextPrompt", prompt);
      window.open("/ai-models-test.html", "_blank");
    } else {
      window.open("/ai-models-test.html", "_blank");
    }
  }

  // Code Assistant
  function openCodeAssistant() {
    const prompt = document.getElementById("codePrompt").value.trim();
    if (prompt) {
      localStorage.setItem("quickCodePrompt", prompt);
      window.open("/ai-code-assistant.html", "_blank");
    } else {
      window.open("/ai-code-assistant.html", "_blank");
    }
  }

  // Vision Analyzer
  function openVisionAnalyzer() {
    const file = document.getElementById("visionFile").files[0];
    if (file) {
      // Convert file to base64 and store
      const reader = new FileReader();
      reader.onload = function (e) {
        localStorage.setItem("quickVisionImage", e.target.result);
        window.open("/ai-vision-analyzer.html", "_blank");
      };
      reader.readAsDataURL(file);
    } else {
      window.open("/ai-vision-analyzer.html", "_blank");
    }
  }

  // Math Solver
  function openMathSolver() {
    const prompt = document.getElementById("mathPrompt").value.trim();
    if (prompt) {
      localStorage.setItem("quickMathPrompt", prompt);
      window.open("/ai-math-solver.html", "_blank");
    } else {
      window.open("/ai-math-solver.html", "_blank");
    }
  }

  // Chat Assistant
  function openChatAssistant() {
    const prompt = document.getElementById("chatPrompt").value.trim();
    if (prompt) {
      localStorage.setItem("quickChatPrompt", prompt);
      window.open("/ai-chat-assistant.html", "_blank");
    } else {
      window.open("/ai-chat-assistant.html", "_blank");
    }
  }

  // Add enter key support for quick prompts
  document.addEventListener("DOMContentLoaded", function () {
    const prompts = document.querySelectorAll(".quick-prompt");
    prompts.forEach((prompt) => {
      prompt.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          const workerId = this.id.replace("Prompt", "");
          const funcName =
            "open" +
            workerId.charAt(0).toUpperCase() +
            workerId.slice(1) +
            (workerId === "image"
              ? "Generator"
              : workerId === "text"
                ? "Generator"
                : workerId === "code"
                  ? "Assistant"
                  : workerId === "vision"
                    ? "Analyzer"
                    : workerId === "math"
                      ? "Solver"
                      : workerId === "chat"
                        ? "Assistant"
                        : "");

          if (window[funcName]) {
            window[funcName]();
          }
        }
      });
    });
  });
</script>
