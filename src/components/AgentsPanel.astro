<<<<<<< HEAD
﻿---
=======
---
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
import AgentCard from './AgentCard.astro';
import AgentEditor from './AgentEditor.astro';

let agents = [];
try {
  const response = await fetch('http://127.0.0.1:8787/api/agents'); // Assuming worker runs on default port
  if(response.ok) {
    agents = await response.json();
  }
} catch (e) {
  console.error(e);
  // Handle fetch error, maybe show a message
}
---

<section>
<<<<<<< HEAD
  <h2>Panel AgentĂłw</h2>
=======
  <h2>Panel Agentów</h2>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
  
  <h3>Dodaj nowego agenta</h3>
  <AgentEditor agent={{ id: crypto.randomUUID() }} onSave={() => {
    // This is a simple way to refresh, a more advanced implementation
    // would use client-side framework to re-fetch and re-render.
    Astro.redirect(Astro.url.pathname);
  }} />

  <hr />

<<<<<<< HEAD
  <h3>Lista AgentĂłw</h3>
  {agents.length === 0 ? (
    <p>Brak agentĂłw do wyĹ›wietlenia.</p>
=======
  <h3>Lista Agentów</h3>
  {agents.length === 0 ? (
    <p>Brak agentów do wyświetlenia.</p>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
  ) : (
    agents.map(agent => <AgentCard agent={agent} />)
  )}
</section>

<script>
  // This script is for client-side interactions if needed in the future.
<<<<<<< HEAD
</script>
=======
</script>
>>>>>>> c1c4ac5534f2943dcdcdd273d347cf64339cc1a7
