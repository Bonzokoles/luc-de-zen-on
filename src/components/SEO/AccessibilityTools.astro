---
export interface Props {
  skipToContent?: boolean;
  announcements?: boolean;
  colorMode?: boolean;
  fontSize?: boolean;
}

const {
  skipToContent = true,
  announcements = true,
  colorMode = true,
  fontSize = true
} = Astro.props;
---

<!-- Accessibility Tools -->
<div class="accessibility-tools" role="banner" aria-label="Narzędzia dostępności">
  {skipToContent && (
    <a 
      href="#main-content" 
      class="skip-link"
      aria-label="Przejdź do głównej treści"
    >
      Przejdź do treści
    </a>
  )}

  <div class="accessibility-controls" role="toolbar" aria-label="Ustawienia dostępności">
    {colorMode && (
      <button 
        id="color-mode-toggle"
        class="accessibility-btn"
        aria-label="Przełącz tryb kolorów"
        aria-pressed="false"
        type="button"
      >
        <span class="sr-only">Tryb kolorów</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
          <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"/>
        </svg>
      </button>
    )}

    {fontSize && (
      <div class="font-size-controls" role="group" aria-label="Kontrola rozmiaru czcionki">
        <button 
          id="font-size-decrease"
          class="accessibility-btn"
          aria-label="Zmniejsz rozmiar czcionki"
          type="button"
        >
          A-
        </button>
        <button 
          id="font-size-reset"
          class="accessibility-btn"
          aria-label="Resetuj rozmiar czcionki"
          type="button"
        >
          A
        </button>
        <button 
          id="font-size-increase"
          class="accessibility-btn"
          aria-label="Zwiększ rozmiar czcionki"
          type="button"
        >
          A+
        </button>
      </div>
    )}
  </div>

  {announcements && (
    <div 
      id="accessibility-announcements" 
      class="sr-only" 
      aria-live="polite" 
      aria-atomic="true"
      role="status"
    ></div>
  )}
</div>

<style>
  .accessibility-tools {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 9999;
    background: var(--color-background);
    border-bottom: 1px solid var(--color-edge);
    padding: 0.5rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transform: translateY(-100%);
    transition: transform 0.3s ease;
  }

  .accessibility-tools:focus-within,
  .accessibility-tools:hover {
    transform: translateY(0);
  }

  .skip-link {
    background: var(--color-accent);
    color: var(--color-background);
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: 0.25rem;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .skip-link:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .accessibility-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .font-size-controls {
    display: flex;
    gap: 0.25rem;
    border: 1px solid var(--color-edge);
    border-radius: 0.25rem;
    overflow: hidden;
  }

  .accessibility-btn {
    background: var(--color-background);
    border: none;
    color: var(--color-primary);
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
    height: 2.5rem;
  }

  .accessibility-btn:hover {
    background: var(--color-accent);
    color: var(--color-background);
  }

  .accessibility-btn:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .accessibility-btn[aria-pressed="true"] {
    background: var(--color-accent);
    color: var(--color-background);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Font size classes */
  :global(.font-size-small) {
    font-size: 0.875rem;
  }

  :global(.font-size-normal) {
    font-size: 1rem;
  }

  :global(.font-size-large) {
    font-size: 1.125rem;
  }

  :global(.font-size-extra-large) {
    font-size: 1.25rem;
  }

  /* High contrast mode */
  :global(.high-contrast) {
    filter: contrast(150%);
  }

  :global(.dark-mode) {
    --color-background: #0f172a;
    --color-primary: #f8fafc;
    --color-secondary: #cbd5e1;
    --color-accent: #3b82f6;
    --color-edge: #334155;
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .accessibility-tools,
    .accessibility-btn,
    .skip-link {
      transition: none;
    }
  }

  /* Focus management */
  :global(.focus-visible) {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  /* Keyboard navigation */
  :global(.keyboard-navigation) .accessibility-btn:focus {
    background: var(--color-accent);
    color: var(--color-background);
  }
</style>

<script>
  // Accessibility functionality
  class AccessibilityManager {
    constructor() {
      this.init();
    }

    init() {
      this.setupColorModeToggle();
      this.setupFontSizeControls();
      this.setupKeyboardNavigation();
      this.setupFocusManagement();
      this.setupAnnouncements();
    }

    setupColorModeToggle() {
      const toggle = document.getElementById('color-mode-toggle');
      if (!toggle) return;

      const isDark = localStorage.getItem('darkMode') === 'true';
      this.setColorMode(isDark);

      toggle.addEventListener('click', () => {
        const currentMode = document.documentElement.classList.contains('dark-mode');
        this.setColorMode(!currentMode);
        this.announce(currentMode ? 'Tryb jasny włączony' : 'Tryb ciemny włączony');
      });
    }

    setColorMode(isDark) {
      const toggle = document.getElementById('color-mode-toggle');
      if (isDark) {
        document.documentElement.classList.add('dark-mode');
        toggle?.setAttribute('aria-pressed', 'true');
        localStorage.setItem('darkMode', 'true');
      } else {
        document.documentElement.classList.remove('dark-mode');
        toggle?.setAttribute('aria-pressed', 'false');
        localStorage.setItem('darkMode', 'false');
      }
    }

    setupFontSizeControls() {
      const decrease = document.getElementById('font-size-decrease');
      const reset = document.getElementById('font-size-reset');
      const increase = document.getElementById('font-size-increase');

      if (!decrease || !reset || !increase) return;

      let currentSize = parseInt(localStorage.getItem('fontSize') || '1');
      this.setFontSize(currentSize);

      decrease.addEventListener('click', () => {
        if (currentSize > 0) {
          currentSize--;
          this.setFontSize(currentSize);
          this.announce('Rozmiar czcionki zmniejszony');
        }
      });

      reset.addEventListener('click', () => {
        currentSize = 1;
        this.setFontSize(currentSize);
        this.announce('Rozmiar czcionki zresetowany');
      });

      increase.addEventListener('click', () => {
        if (currentSize < 3) {
          currentSize++;
          this.setFontSize(currentSize);
          this.announce('Rozmiar czcionki zwiększony');
        }
      });
    }

    setFontSize(size) {
      const sizes = ['font-size-small', 'font-size-normal', 'font-size-large', 'font-size-extra-large'];
      document.body.className = document.body.className.replace(/font-size-\w+/g, '');
      document.body.classList.add(sizes[size]);
      localStorage.setItem('fontSize', size.toString());
    }

    setupKeyboardNavigation() {
      // Track if user is using keyboard
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          document.body.classList.add('keyboard-navigation');
        }
      });

      document.addEventListener('mousedown', () => {
        document.body.classList.remove('keyboard-navigation');
      });

      // Skip link functionality
      const skipLink = document.querySelector('.skip-link');
      if (skipLink) {
        skipLink.addEventListener('click', (e) => {
          e.preventDefault();
          const target = document.getElementById('main-content');
          if (target) {
            target.focus();
            target.scrollIntoView({ behavior: 'smooth' });
          }
        });
      }
    }

    setupFocusManagement() {
      // Trap focus in modals
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const modal = document.querySelector('[role="dialog"][aria-modal="true"]');
          if (modal) {
            this.closeModal(modal);
          }
        }
      });
    }

    setupAnnouncements() {
      this.announcer = document.getElementById('accessibility-announcements');
    }

    announce(message) {
      if (this.announcer) {
        this.announcer.textContent = message;
        setTimeout(() => {
          this.announcer.textContent = '';
        }, 1000);
      }
    }

    closeModal(modal) {
      modal.setAttribute('aria-hidden', 'true');
      modal.style.display = 'none';
      this.announce('Okno dialogowe zamknięte');
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new AccessibilityManager());
  } else {
    new AccessibilityManager();
  }
</script>
