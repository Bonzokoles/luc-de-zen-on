---
export interface Props {
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onclick?: string;
  class?: string;
  icon?: string;
}

const { 
  href, 
  type = 'button', 
  variant = 'primary', 
  size = 'md',
  disabled = false,
  onclick,
  class: className = '',
  icon = ''
} = Astro.props;

const Tag = href ? 'a' : 'button';
const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-2.5 text-base',
  lg: 'px-6 py-3 text-lg'
};

const variantClasses = {
  primary: 'cyberpunk-btn-primary',
  secondary: 'cyberpunk-btn-secondary', 
  danger: 'cyberpunk-btn-danger',
  success: 'cyberpunk-btn-success'
};
---

<Tag 
  href={href}
  type={type}
  disabled={disabled}
  onclick={onclick}
  class={`cyberpunk-btn ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
>
  {icon && <span class="btn-icon">{icon}</span>}
  <slot />
</Tag>

<style>
  .cyberpunk-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: 'Rajdhani', system-ui, sans-serif;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-decoration: none;
    border: 1px solid;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.4));
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    cursor: pointer;
    user-select: none;
  }

  .cyberpunk-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.5s ease;
    z-index: 1;
  }

  .cyberpunk-btn:hover::before {
    left: 100%;
  }

  .cyberpunk-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 204, 204, 0.2);
  }

  .cyberpunk-btn:active {
    transform: translateY(0);
    box-shadow: 0 4px 15px rgba(0, 255, 255, 0.2);
  }

  .cyberpunk-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
  }

  /* Primary variant - Cyber Blue */
  .cyberpunk-btn-primary {
    color: #00cccc;
    border-color: #00cccc;
    background: linear-gradient(135deg, rgba(0, 204, 204, 0.08), rgba(0, 0, 0, 0.8));
  }

  .cyberpunk-btn-primary:hover {
    background: linear-gradient(135deg, rgba(0, 204, 204, 0.15), rgba(0, 0, 0, 0.6));
    color: #ffffff;
    text-shadow: 0 0 5px rgba(0, 204, 204, 0.4);
  }

  /* Secondary variant - Purple */
  .cyberpunk-btn-secondary {
    color: #8b5cf6;
    border-color: #8b5cf6;
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(0, 0, 0, 0.8));
  }

  .cyberpunk-btn-secondary:hover {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.15), rgba(0, 0, 0, 0.6));
    color: #ffffff;
    text-shadow: 0 0 5px rgba(139, 92, 246, 0.4);
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.2);
  }

  /* Danger variant - Red */
  .cyberpunk-btn-danger {
    color: #ff4757;
    border-color: #ff4757;
    background: linear-gradient(135deg, rgba(255, 71, 87, 0.1), rgba(0, 0, 0, 0.8));
  }

  .cyberpunk-btn-danger:hover {
    background: linear-gradient(135deg, rgba(255, 71, 87, 0.2), rgba(0, 0, 0, 0.6));
    color: #ffffff;
    text-shadow: 0 0 10px #ff4757;
    box-shadow: 0 8px 25px rgba(255, 71, 87, 0.3);
  }

  /* Success variant - Green */
  .cyberpunk-btn-success {
    color: #2ed573;
    border-color: #2ed573;
    background: linear-gradient(135deg, rgba(46, 213, 115, 0.1), rgba(0, 0, 0, 0.8));
  }

  .cyberpunk-btn-success:hover {
    background: linear-gradient(135deg, rgba(46, 213, 115, 0.2), rgba(0, 0, 0, 0.6));
    color: #ffffff;
    text-shadow: 0 0 10px #2ed573;
    box-shadow: 0 8px 25px rgba(46, 213, 115, 0.3);
  }

  .btn-icon {
    font-size: 1.2em;
    margin-right: 0.25rem;
  }

  /* Ripple effect */
  .cyberpunk-btn .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    transform: scale(0);
    animation: ripple 0.6s linear;
    pointer-events: none;
    z-index: 2;
  }

  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Add ripple effect to all cyberpunk buttons
    const buttons = document.querySelectorAll('.cyberpunk-btn');
    
    buttons.forEach(button => {
      button.addEventListener('click', function(e) {
        // Create ripple element
        const ripple = document.createElement('span');
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.height, rect.width);
        
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = (e.clientX - rect.left - size / 2) + 'px';
        ripple.style.top = (e.clientY - rect.top - size / 2) + 'px';
        ripple.classList.add('ripple');
        
        this.appendChild(ripple);
        
        // Remove ripple after animation
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });
  });
</script>
