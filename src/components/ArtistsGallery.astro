---
import {
  ARTISTS_DATABASE,
  ART_PERIODS,
  getArtistsByPeriod,
} from "../data/artists-wildcards.js";
import ArtistCard from "./ArtistCard.astro";

// Podziel artystĂłw na kategorie
const periodGroups = {};
ARTISTS_DATABASE.forEach((artist) => {
  if (!periodGroups[artist.period]) {
    periodGroups[artist.period] = [];
  }
  periodGroups[artist.period].push(artist);
});

// NajczÄ™Ĺ›ciej uĹĽywane kategorie na gĂłrze
const popularPeriods = [
  "Renesans",
  "Impresjonizm",
  "Surrealizm",
  "Modernizm",
  "Barok",
];
const otherPeriods = Object.keys(periodGroups).filter(
  (period) => !popularPeriods.includes(period)
);
---

<div class="artists-gallery-container">
  <!-- Wyszukiwarka artystĂłw -->
  <div class="artist-search-container mb-6">
    <div class="relative">
      <input
        type="text"
        id="artist-search"
        placeholder="Szukaj artysty, stylu lub epoki..."
        class="w-full px-4 py-3 bg-gray-900/50 border border-gray-700 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
      />
      <div class="absolute right-3 top-3 text-gray-400">
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
  </div>

  <!-- Filtry okresĂłw -->
  <div class="period-filters mb-6">
    <div class="flex flex-wrap gap-2 mb-4">
      <button
        class="period-filter active px-3 py-1 text-sm bg-blue-600 text-white"
        data-period="all"
      >
        Wszystkie (50+)
      </button>
      {
        popularPeriods.map((period) => (
          <button
            class="period-filter px-3 py-1 text-sm bg-gray-700 text-gray-300 hover:bg-gray-600"
            data-period={period}
          >
            {period} ({periodGroups[period]?.length || 0})
          </button>
        ))
      }
      {
        otherPeriods.map((period) => (
          <button
            class="period-filter px-3 py-1 text-sm bg-gray-800 text-gray-400 hover:bg-gray-700"
            data-period={period}
          >
            {period} ({periodGroups[period]?.length || 0})
          </button>
        ))
      }
    </div>
  </div>

  <!-- Galeria artystĂłw -->
  <div class="artists-grid-container max-h-96 overflow-y-auto pr-2">
    {/* Popularne okresy na gĂłrze */}
    {
      popularPeriods.map(
        (period) =>
          periodGroups[period] && (
            <div
              class={`period-section period-${period.toLowerCase()}`}
              data-period={period}
            >
              <h3 class="text-lg font-bold text-white mb-3 flex items-center">
                <div
                  class="w-3 h-3 rounded-full mr-2"
                  style={`background-color: ${ART_PERIODS[period]?.color || "#4a5568"}`}
                />
                {period}
                <span class="text-sm text-gray-400 ml-2">
                  ({periodGroups[period].length})
                </span>
              </h3>
              <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-6">
                {periodGroups[period].map((artist) => (
                  <ArtistCard artist={artist} />
                ))}
              </div>
            </div>
          )
      )
    }

    {/* PozostaĹ‚e okresy */}
    {
      otherPeriods.map(
        (period) =>
          periodGroups[period] && (
            <div
              class={`period-section period-${period.toLowerCase()}`}
              data-period={period}
            >
              <h3 class="text-lg font-bold text-white mb-3 flex items-center">
                <div
                  class="w-3 h-3 rounded-full mr-2"
                  style={`background-color: ${ART_PERIODS[period]?.color || "#4a5568"}`}
                />
                {period}
                <span class="text-sm text-gray-400 ml-2">
                  ({periodGroups[period].length})
                </span>
              </h3>
              <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-6">
                {periodGroups[period].map((artist) => (
                  <ArtistCard artist={artist} />
                ))}
              </div>
            </div>
          )
      )
    }
  </div>

  <!-- Stats i losowy artysta -->
  <div class="gallery-footer mt-6 pt-4 border-t border-gray-700">
    <div class="flex justify-between items-center text-sm text-gray-400">
      <div>
        ĹÄ…cznie: <span class="text-white font-bold"
          >{ARTISTS_DATABASE.length}</span
        > artystĂłw
      </div>
    </div>
  </div>

  <!-- Floating buttons - przesuniÄ™te w lewo -->
  <div class="floating-buttons fixed left-4 bottom-4 z-50 flex flex-col gap-2">
    <button
      id="open-wildcards"
      class="px-4 py-2 bg-gradient-to-r from-cyan-600 to-blue-600 text-white hover:opacity-80 transition-all duration-300 shadow-lg rounded-lg transform hover:scale-105"
      onclick="window.open('/wildcards', '_blank', 'width=1400,height=900,scrollbars=yes')"
    >
      đźŽŻ Wildcards
    </button>
    <button
      id="random-artist"
      class="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:opacity-80 transition-all duration-300 shadow-lg rounded-lg transform hover:scale-105"
    >
      đźŽ˛ Losowy artysta
    </button>
  </div>
</div>

<style>
  .artists-gallery-container {
    background: rgba(17, 24, 39, 0.55);
    backdrop-filter: blur(10px);
    border: none;
    padding: 20px;
  }

  .artists-grid-container {
    scrollbar-width: thin;
    scrollbar-color: rgba(99, 102, 241, 0.5) transparent;
  }

  .artists-grid-container::-webkit-scrollbar {
    width: 6px;
  }

  .artists-grid-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .artists-grid-container::-webkit-scrollbar-thumb {
    background: rgba(99, 102, 241, 0.5);
    border-radius: 0;
  }

  .period-filter.active {
    background: linear-gradient(135deg, #6366f1, #8b5cf6) !important;
    color: white !important;
  }

  .period-section {
    transition: all 0.3s ease;
  }

  .period-section.hidden {
    display: none;
  }

  .artist-search-container input:focus + div {
    color: #6366f1;
  }
</style>

<script>
  // Wyszukiwarka artystĂłw
  const searchInput = document.getElementById(
    "artist-search"
  ) as HTMLInputElement;
  const periodFilters = document.querySelectorAll(".period-filter");
  const periodSections = document.querySelectorAll(".period-section");
  const randomButton = document.getElementById("random-artist");

  let currentFilter = "all";

  // Funkcja wyszukiwania
  function searchArtists(query: string) {
    const lowerQuery = query.toLowerCase();
    const artistCards = document.querySelectorAll(".artist-card");

    artistCards.forEach((card) => {
      const artistName =
        card.querySelector(".artist-name")?.textContent?.toLowerCase() || "";
      const artistPeriod =
        card.querySelector(".artist-period")?.textContent?.toLowerCase() || "";
      const artistStyle =
        card.querySelector(".artist-style")?.textContent?.toLowerCase() || "";

      const matches =
        artistName.includes(lowerQuery) ||
        artistPeriod.includes(lowerQuery) ||
        artistStyle.includes(lowerQuery);

      if (matches) {
        (card as HTMLElement).style.display = "block";
      } else {
        (card as HTMLElement).style.display = "none";
      }
    });

    updateSectionVisibility();
  }

  // Filtrowanie po okresach
  function filterByPeriod(period: string) {
    periodSections.forEach((section) => {
      const sectionPeriod = (section as HTMLElement).dataset.period;
      if (period === "all" || sectionPeriod === period) {
        section.classList.remove("hidden");
      } else {
        section.classList.add("hidden");
      }
    });
  }

  // Aktualizuj widocznoĹ›Ä‡ sekcji (ukryj puste sekcje)
  function updateSectionVisibility() {
    periodSections.forEach((section) => {
      const visibleCards = section.querySelectorAll(
        '.artist-card:not([style*="display: none"])'
      );
      if (visibleCards.length === 0) {
        section.classList.add("hidden");
      } else {
        section.classList.remove("hidden");
      }
    });
  }

  // Losowy artysta
  function selectRandomArtist() {
    const visibleCards = document.querySelectorAll(
      '.artist-card:not([style*="display: none"])'
    );
    if (visibleCards.length > 0) {
      const randomCard = visibleCards[
        Math.floor(Math.random() * visibleCards.length)
      ] as HTMLElement;
      randomCard.click();
      randomCard.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }

  // Event listenery
  searchInput?.addEventListener("input", (e) => {
    const query = (e.target as HTMLInputElement).value;
    searchArtists(query);
  });

  periodFilters.forEach((filter) => {
    filter.addEventListener("click", (e) => {
      const period = (e.target as HTMLElement).dataset.period || "all";

      // Aktualizuj aktywny filtr
      periodFilters.forEach((f) => f.classList.remove("active"));
      (e.target as HTMLElement).classList.add("active");

      currentFilter = period;
      filterByPeriod(period);
    });
  });

  randomButton?.addEventListener("click", selectRandomArtist);

  // Inicjalizacja
  document.addEventListener("DOMContentLoaded", () => {
    updateSectionVisibility();
  });
</script>

