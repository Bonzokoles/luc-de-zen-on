---
// Critical polyfill for React SSR on Cloudflare Workers
import '../polyfills/react-scheduler.js';

import SEOHead from "../components/SEO/SEOHead.astro";
import AccessibilityTools from "../components/SEO/AccessibilityTools.astro";

interface Props {
  siteTitle: string;
  description?: string;
  themeColor?: string;
  image?: string;
  article?: boolean;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
  canonicalURL?: string;
  noindex?: boolean;
}

const {
  siteTitle,
  description = "MyBonzo - Zaawansowana Platforma AI Workers z narzędziami do automatyzacji, generowania treści i analizy danych",
  themeColor = "190",
  image,
  article,
  publishedTime,
  modifiedTime,
  author,
  tags,
  canonicalURL,
  noindex
} = Astro.props;

// Import CSS
import "../styles/global.css";
// Background animation and page transitions
import BgAnimation from "../components/BgAnimation.svelte";
import PageTransition from "../components/PageTransition.astro";
// Icon component
import { Icon } from 'astro-icon/components';
// Dock components for UI controls
import RightDock from "../components/RightDock.astro";

// Simple navigation model; adjust as needed
const menuItems = [
  { link: "/", text: "Strona główna" },
  {
    link: "/#ai-workers",
    text: "AI Workers",
    submenu: [
      { link: "/ai-workers-manager", text: "Manager" },
      { link: "/agents", text: "Agenci" },
      { link: "/agent-builder-23", text: "Builder" },
    ],
  },
  { link: "/image-generator", text: "Generator obrazów" },
  { link: "/quiz", text: "Quiz" },
  { link: "/admin/", text: "Panel" },
];
const pageKey = Astro.url.pathname;
---

<!doctype html>
<html lang="pl" dir="ltr">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="generator" content="Astro v5.13.5" />
    
    <!-- SEO and Meta Tags -->
    <SEOHead 
      title={siteTitle}
      description={description}
      image={image}
      article={article}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      author={author}
      tags={tags}
      canonicalURL={canonicalURL}
      noindex={noindex}
    />

    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#00ffff" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="MyBonzo" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />

    <!-- Performance: DNS Prefetch and Preconnect -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Performance: Critical CSS inline -->
    <style>
      /* Critical styles for immediate render */
      html, body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background: hsl(190, 20%, 8%);
        color: hsl(190, 100%, 92%);
        font-family: "Rajdhani", system-ui, sans-serif;
        overflow-x: hidden;
      }
      /* Loading spinner styles */
      .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 2px solid #333;
        border-radius: 50%;
        border-top-color: #00ffff;
        animation: spin 1s ease-in-out infinite;
      }
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    </style>

    <!-- Font preloads - Non-blocking -->
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap"
        rel="stylesheet"
      />
    </noscript>

    <!-- Primary Meta Tags -->
    <title>{siteTitle}</title>
    <meta name="title" content={siteTitle} />
    <meta name="description" content={description} />

    <!-- CSS Variables for Theme -->
    <style define:vars={{ themeColor }}>
      :root {
        --theme-hue: var(--themeColor);
        --color-primary: hsl(var(--themeColor), 20%, 8%);
        --color-primary-foreground: hsl(var(--themeColor), 100%, 92%);
        --color-secondary: hsl(var(--themeColor), 40%, 12%);
        --color-accent: hsl(var(--themeColor), 100%, 50%);
        --color-edge: hsl(var(--themeColor), 30%, 18%);
        --font-primary: "Rajdhani", system-ui;
        --radius-interactive: 0.4rem;
      }

      html {
        background: hsl(var(--themeColor), 20%, 8%);
        color: hsl(var(--themeColor), 100%, 92%);
        font-family: "Kenyan Coffee", "Rajdhani", system-ui;
        min-height: 100vh;
      }

      body {
        background: hsl(var(--themeColor), 20%, 8%);
        color: hsl(var(--themeColor), 100%, 92%);
        font-family: "Kenyan Coffee", "Rajdhani", system-ui;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        overflow-x: hidden;
      }

      /* MyBonzo Custom Styles */
      .mybonzo-hero {
        background: linear-gradient(
          135deg,
          hsl(var(--themeColor), 20%, 10%) 0%,
          hsl(var(--themeColor), 40%, 12%) 100%
        );
        border: 1px solid hsl(var(--themeColor), 30%, 18%);
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .mybonzo-card {
        background: rgba(0, 0, 0, 0.4);
        border: 1px solid hsl(var(--themeColor), 100%, 50%, 0.3);
        border-radius: 12px;
        transition: all 0.3s ease;
        position: relative;
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .mybonzo-card:hover {
        border-color: hsl(var(--themeColor), 100%, 50%);
        box-shadow: 0 8px 25px hsl(var(--themeColor), 100%, 50%, 0.2);
        transform: translateY(-2px);
      }

      .mybonzo-btn {
        background: linear-gradient(
          135deg,
          hsl(var(--themeColor), 100%, 50%) 0%,
          hsl(var(--themeColor), 80%, 40%) 100%
        );
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-family: "Rajdhani", system-ui;
      }

      .mybonzo-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px hsl(var(--themeColor), 100%, 50%, 0.4);
      }

      .cyberpunk-grid {
        background-image: linear-gradient(
            hsl(var(--themeColor), 100%, 50%, 0.1) 1px,
            transparent 1px
          ),
          linear-gradient(
            90deg,
            hsl(var(--themeColor), 100%, 50%, 0.1) 1px,
            transparent 1px
          );
        background-size: 20px 20px;
        min-height: 100vh;
      }

      .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #4ade80;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
      }

      .neon-text {
        color: hsl(var(--themeColor), 100%, 50%);
        text-shadow: 0 0 10px hsl(var(--themeColor), 100%, 50%, 0.5);
      }

      .glass-effect {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      /* Navigation Styles */
      .ai-workers-section {
        padding: 2rem 0;
        min-height: 100vh;
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .section-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
      }

      .section-title {
        font-size: 3rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 1rem;
        font-family: "Neuropol", "Rajdhani", system-ui, sans-serif;
        letter-spacing: 0.1em;
      }

      .section-description {
        text-align: center;
        font-size: 1.2rem;
        margin-bottom: 3rem;
        opacity: 0.8;
      }

      /* Make the dynamic header about half as tall */
      .compact-header :where(nav, header) {
        --header-padding-y: 6px;
        --header-padding-x: 10px;
      }
      .compact-header :where(.header-container) {
        padding-top: 6px !important;
        padding-bottom: 6px !important;
      }
      .compact-header :where(.logo img) {
        height: 24px !important;
        width: auto;
      }
      .compact-header :where(.menu, .mobile-trigger) {
        margin-top: 0 !important;
        margin-bottom: 0 !important;
      }
      
      /* Global page spacing - all pages start 5px below banner */
      body main {
        padding-top: 5px !important;
        margin-top: 0 !important;
      }
      
      /* Ensure subpages use consistent top spacing */
      .page-content {
        padding-top: 5px !important;
        margin-top: 0 !important;
      }
      
      /* Override any other margin/padding that might interfere */
      main > section:first-child,
      main > div:first-child,
      main > article:first-child {
        margin-top: 0 !important;
        padding-top: 5px !important;
      }
    </style>
  </head>

  <body>
    <!-- Accessibility Tools -->
    <AccessibilityTools />
    
    <!-- Background Animation - Lazy loaded -->
    <div class="bg-animation bg-animation-container" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1;">
      <div class="loading-spinner" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>
    </div>
    <div class="compact-header">
      <nav style="position: fixed; top: 0; left: 0; width: 100%; z-index: 20; background: rgba(13, 13, 13, 0.8); backdrop-filter: blur(16px); padding: 1rem;">
        <div style="display: flex; align-items: center; gap: 2rem;">
          <a href="/" style="display: flex; align-items: center; gap: 0.5rem;">
            <img src="/favicon.svg" alt={siteTitle} width="24" height="24" />
            <span style="color: white; font-weight: bold;">{siteTitle}</span>
          </a>
        </div>
      </nav>
    </div>
    <!-- Page content -->
    <main id="main-content" class="min-h-svh cyberpunk-grid" tabindex="-1">
      <slot />
    </main>

    <!-- Floating MCP Buttons -->
    <div class="mcp-floating-buttons">
      <button
        class="mcp-btn"
        data-mcp="duckdb"
        onclick="openMCPModal('duckdb')"
      >
        <Icon name="lucide:database" class="mcp-icon" />
        DuckDB
      </button>
      <button
        class="mcp-btn"
        data-mcp="paypal"
        onclick="openMCPModal('paypal')"
      >
        <Icon name="lucide:credit-card" class="mcp-icon" />
        PayPal
      </button>
      <button
        class="mcp-btn"
        data-mcp="huggingface"
        onclick="openMCPModal('huggingface')"
      >
        <Icon name="lucide:brain" class="mcp-icon" />
        HuggingFace
      </button>
      <button
        class="mcp-btn"
        data-mcp="memory"
        onclick="openMCPModal('memory')"
      >
        <Icon name="lucide:hard-drive" class="mcp-icon" />
        Memory
      </button>
    </div>

    <!-- MCP Modal -->
    <div id="mcpModal" class="mcp-modal" onclick="closeMCPModal()">
      <div class="mcp-modal-content" onclick="event.stopPropagation()">
        <div class="mcp-modal-header">
          <h3 id="mcpModalTitle">MCP Service</h3>
          <button class="mcp-close-btn" onclick="closeMCPModal()">×</button>
        </div>
        <div class="mcp-modal-body">
          <div id="mcpModalDescription"></div>
          <div class="mcp-code-section">
            <h4>🔧 Przykład użycia:</h4>
            <pre id="mcpModalCode"></pre>
          </div>
        </div>
      </div>
    </div>

    <style>
      /* Floating MCP Buttons - Style identyczny z right-btn z index.astro */
      .mcp-floating-buttons {
        position: fixed;
        left: 20px;
        top: 30px;
        z-index: 100;
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .mcp-btn {
        background: rgba(0, 0, 0, 0.5);
        color: #00d7ef;
        padding: 12px 24px;
        border-radius: 0px;
        box-shadow: 0 4px 20px rgba(0, 217, 255, 0.3);
        font-size: 1.1rem;
        font-weight: 600;
        border: 1px solid rgba(0, 217, 255, 0.4);
        transition: all 0.2s ease;
        display: block;
        text-align: center;
        min-width: 280px;
        cursor: pointer;
      }

      .mcp-btn:hover {
        background: #00d7ef;
        color: #131e28;
        transform: translateY(-2px);
        box-shadow: 0 6px 25px rgba(0, 217, 255, 0.5);
      }

      .mcp-btn:active {
        transform: scale(1.05) translateY(-2px);
        box-shadow: 0 8px 30px rgba(0, 217, 255, 0.7);
      }

      .mcp-icon {
        font-size: 1.2rem;
        margin-right: 8px;
      }

      .mcp-label {
        font-size: 1.1rem;
        font-weight: 600;
      }

      /* MCP Modal - Style identyczny z login-box */
      .mcp-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 2000;
        justify-content: center;
        align-items: center;
        backdrop-filter: blur(10px);
      }

      .mcp-modal.active {
        display: flex;
      }

      .mcp-modal-content {
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid #8b0000;
        border-radius: 0px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 0 30px rgba(139, 0, 0, 0.5);
        min-width: 500px;
        max-width: 90vw;
        max-height: 80vh;
        overflow-y: auto;
        color: #00e7ff;
      }

      .mcp-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #8b0000;
      }

      .mcp-modal-header h3 {
        color: #00e7ff;
        font-size: 1.5rem;
        text-shadow: 0 0 10px rgba(0, 231, 255, 0.5);
        margin: 0;
      }

      .mcp-close-btn {
        background: linear-gradient(45deg, #ff4757, #c23616);
        border: none;
        border-radius: 0px;
        padding: 0.5rem 0.75rem;
        color: white;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.2rem;
      }

      .mcp-close-btn:hover {
        background: linear-gradient(45deg, #dc143c, #8b0000);
        transform: translateY(-2px);
      }

      .mcp-modal-body {
        color: #00e7ff;
      }

      .mcp-modal-body h4 {
        color: #ffd700;
        margin: 1.5rem 0 0.5rem 0;
        font-size: 1.1rem;
      }

      .mcp-modal-body p {
        margin-bottom: 1rem;
        line-height: 1.6;
      }

      .mcp-code-section {
        margin-top: 1.5rem;
      }

      .mcp-code-section pre {
        background: rgba(0, 0, 0, 0.8);
        border: 1px solid #333;
        border-radius: 4px;
        padding: 1rem;
        color: #00ff00;
        font-family: "Courier New", monospace;
        font-size: 0.9rem;
        overflow-x: auto;
        white-space: pre-wrap;
        margin-top: 0.5rem;
      }

      /* Responsive design */
      @media (max-width: 768px) {
        .mcp-floating-buttons {
          left: 10px;
          top: 10px;
        }

        .mcp-btn {
          min-width: 240px;
          padding: 10px 20px;
          font-size: 1rem;
        }

        .mcp-modal-content {
          min-width: 300px;
          padding: 1.5rem;
        }
      }
    </style>

    <script>
      // MCP Modal Functions
      window.openMCPModal = function (mcpType) {
        const modal = document.getElementById("mcpModal");
        const title = document.getElementById("mcpModalTitle");
        const description = document.getElementById("mcpModalDescription");
        const code = document.getElementById("mcpModalCode");

        const mcpData = {
          duckdb: {
            title: "🗄️ DuckDB MCP Server",
            description: `
              <p><strong>DuckDB</strong> to zaawansowana baza danych analityczna w pamięci.</p>
              <p>🔹 <strong>Funkcje:</strong> SQL queries, analityka danych, zarządzanie tabelami</p>
              <p>🔹 <strong>Endpoint:</strong> <code>/api/mcp/duckdb</code></p>
              <p>🔹 <strong>Status:</strong> <span style="color: #00ff00">Połączony</span></p>
            `,
            code: `// Przykład zapytania DuckDB MCP
fetch('/api/mcp/duckdb', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    operation: 'query',
    query: 'SELECT * FROM users LIMIT 5'
  })
})
.then(res => res.json())
.then(data => console.log(data));`,
          },
          paypal: {
            title: "💳 PayPal MCP Server",
            description: `
              <p><strong>PayPal MCP</strong> do zarządzania płatnościami i fakturami.</p>
              <p>🔹 <strong>Funkcje:</strong> Tworzenie faktur, historia transakcji, płatności</p>
              <p>🔹 <strong>Endpoint:</strong> <code>/api/mcp/paypal</code></p>
              <p>🔹 <strong>Status:</strong> <span style="color: #ff9900">Wymaga konfiguracji</span></p>
            `,
            code: `// Przykład tworzenia faktury PayPal
fetch('/api/mcp/paypal', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    operation: 'create_invoice',
    amount: '100.00',
    currency: 'USD',
    business_email: 'your@email.com'
  })
})
.then(res => res.json())
.then(data => console.log(data));`,
          },
          huggingface: {
            title: "🤗 HuggingFace MCP Server",
            description: `
              <p><strong>HuggingFace MCP</strong> do dostępu do modeli AI i zasobów.</p>
              <p>🔹 <strong>Funkcje:</strong> Modele AI, datasety, publikacje, aplikacje</p>
              <p>🔹 <strong>Endpoint:</strong> <code>/api/mcp/huggingface</code></p>
              <p>🔹 <strong>Status:</strong> <span style="color: #00ff00">Połączony</span></p>
            `,
            code: `// Przykład wyszukiwania modeli HuggingFace
fetch('/api/mcp/huggingface', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    operation: 'search_models',
    query: 'text-generation',
    limit: 5
  })
})
.then(res => res.json())
.then(data => console.log(data));`,
          },
          memory: {
            title: "🧠 Memory MCP Server",
            description: `
              <p><strong>Memory MCP</strong> to system grafu wiedzy do przechowywania kontekstu.</p>
              <p>🔹 <strong>Funkcje:</strong> Encje, relacje, wyszukiwanie, graf wiedzy</p>
              <p>🔹 <strong>Endpoint:</strong> <code>/api/mcp/memory</code></p>
              <p>🔹 <strong>Status:</strong> <span style="color: #00ff00">Połączony</span></p>
            `,
            code: `// Przykład tworzenia encji Memory
fetch('/api/mcp/memory', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    operation: 'create_entity',
    entity_name: 'AI Technology',
    entity_type: 'concept',
    observations: ['Emerging field', 'Transformative impact']
  })
})
.then(res => res.json())
.then(data => console.log(data));`,
          },
        };

        const data = mcpData[mcpType];
        if (data) {
          title.textContent = data.title;
          description.innerHTML = data.description;
          code.textContent = data.code;
          modal.classList.add("active");
        }
      };

      window.closeMCPModal = function () {
        const modal = document.getElementById("mcpModal");
        modal.classList.remove("active");
      };

      // Close modal with Escape key
      document.addEventListener("keydown", function (e) {
        if (e.key === "Escape") {
          closeMCPModal();
        }
      });

      // Performance optimizations
      (async function initPerformanceOptimizations() {
        // Service Worker registration
        if ('serviceWorker' in navigator) {
          try {
            await navigator.serviceWorker.register('/sw.js');
            console.log('✅ Service Worker registered');
          } catch (error) {
            console.warn('⚠️ Service Worker registration failed:', error);
          }
        }

        // Preload critical resources
        const criticalResources = [
          '/api/auth/status',
          '/api/workers/status'
        ];

        criticalResources.forEach(url => {
          fetch(url, { method: 'HEAD' }).catch(() => {});
        });

        // Lazy load heavy components after initial render
        const lazyComponentsConfig = {
          '.bg-animation': () => import('/src/components/BgAnimation.svelte'),
          // '.admin-dashboard': () => import('/src/components/admin/AdminDashboard.tsx'),
          '.ai-workers-manager': () => import('/src/components/AIWorkersManager.svelte')
        };

        // Intersection observer for lazy loading
        const lazyObserver = new IntersectionObserver((entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting) {
              const className = entry.target.className.split(' ')[0];
              const loader = lazyComponentsConfig[`.${className}`];
              if (loader) {
                try {
                  await loader();
                  lazyObserver.unobserve(entry.target);
                } catch (error) {
                  console.warn('Failed to lazy load component:', error);
                }
              }
            }
          });
        }, { threshold: 0.1, rootMargin: '50px' });

        // Observe elements for lazy loading
        Object.keys(lazyComponentsConfig).forEach(selector => {
          const elements = document.querySelectorAll(selector);
          elements.forEach(el => lazyObserver.observe(el));
        });

        // Performance monitoring
        const perfMonitor = {
          metrics: new Map(),
          start(name) {
            this.metrics.set(name, performance.now());
          },
          end(name) {
            const start = this.metrics.get(name);
            if (start) {
              const duration = performance.now() - start;
              if (duration > 100) {
                console.warn(`Slow operation: ${name} took ${duration.toFixed(2)}ms`);
              }
              this.metrics.delete(name);
              return duration;
            }
          }
        };

        // Monitor page load performance
        window.addEventListener('load', () => {
          setTimeout(() => {
            const loadTime = performance.now();
            console.log(`📊 Page load time: ${loadTime.toFixed(2)}ms`);
            
            // Report to analytics if needed
            if (loadTime > 3000) {
              console.warn('⚠️ Page load time exceeded 3 seconds');
            }
          }, 0);
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
          lazyObserver.disconnect();
        });
      })();
    </script>
  </body>
</html>
