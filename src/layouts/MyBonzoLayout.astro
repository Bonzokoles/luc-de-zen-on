---
// Critical polyfill for React SSR on Cloudflare Workers
import '../polyfills/react-scheduler.js';

import SEOHead from "../components/SEO/SEOHead.astro";
import AccessibilityTools from "../components/SEO/AccessibilityTools.astro";

interface Props {
  siteTitle: string;
  description?: string;
  themeColor?: string;
  image?: string;
  article?: boolean;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
  canonicalURL?: string;
  noindex?: boolean;
}

const {
  siteTitle,
  description = "MyBonzo - Zaawansowana Platforma AI Workers z narzędziami do automatyzacji, generowania treści i analizy danych",
  themeColor = "190",
  image,
  article,
  publishedTime,
  modifiedTime,
  author,
  tags,
  canonicalURL,
  noindex
} = Astro.props;

// Import CSS
import "../styles/global.css";
// Background animation and page transitions
import BgAnimation from "../components/BgAnimation.svelte";
import PageTransition from "../components/PageTransition.astro";
// Heroicons React components  
import { 
  CircleStackIcon,
  CreditCardIcon,
  CpuChipIcon,
  ServerIcon
} from '@heroicons/react/24/outline';
// Dock components for UI controls
import RightDock from "../components/RightDock.astro";

// Simple navigation model; adjust as needed
const menuItems = [
  { link: "/", text: "Strona główna" },
  {
    link: "/#ai-workers",
    text: "AI Workers",
    submenu: [
      { link: "/ai-workers-manager", text: "Manager" },
      { link: "/agents", text: "Agenci" },
      { link: "/agent-builder-23", text: "Builder" },
    ],
  },
  { link: "/image-generator", text: "Generator obrazów" },
  { link: "/web-catalog", text: "Web Catalog" },
  { link: "/quiz", text: "Quiz" },
  { link: "/admin/", text: "Panel" },
];
const pageKey = Astro.url.pathname;
---

<!doctype html>
<html lang="pl" dir="ltr">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="generator" content="Astro v5.13.5" />
    
    <!-- SEO and Meta Tags -->
    <SEOHead 
      title={siteTitle}
      description={description}
      image={image}
      article={article}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      author={author}
      tags={tags}
      canonicalURL={canonicalURL}
      noindex={noindex}
    />

    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#00ffff" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="MyBonzo" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />

    <!-- Performance: DNS Prefetch and Preconnect -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Performance: Critical CSS inline -->
    <style>
      /* Critical styles for immediate render */
      html, body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background: hsl(190, 20%, 8%);
        color: hsl(190, 100%, 92%);
        font-family: "Rajdhani", system-ui, sans-serif;
        overflow-x: hidden;
      }
      /* Loading spinner styles */
      .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 2px solid #333;
        border-radius: 50%;
        border-top-color: #00ffff;
        animation: spin 1s ease-in-out infinite;
      }
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    </style>

    <!-- Font preloads - Non-blocking -->
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap"
        rel="stylesheet"
      />
    </noscript>

    <!-- Primary Meta Tags -->
    <title>{siteTitle}</title>
    <meta name="title" content={siteTitle} />
    <meta name="description" content={description} />

    <!-- CSS Variables for Theme -->
    <style define:vars={{ themeColor }}>
      :root {
        --theme-hue: var(--themeColor);
        --color-primary: hsl(var(--themeColor), 20%, 8%);
        --color-primary-foreground: hsl(var(--themeColor), 100%, 92%);
        --color-secondary: hsl(var(--themeColor), 40%, 12%);
        --color-accent: hsl(var(--themeColor), 100%, 50%);
        --color-edge: hsl(var(--themeColor), 30%, 18%);
        --font-primary: "Rajdhani", system-ui;
        --radius-interactive: 0.4rem;
      }

      html {
        background: hsl(var(--themeColor), 20%, 8%);
        color: hsl(var(--themeColor), 100%, 92%);
        font-family: "Kenyan Coffee", "Rajdhani", system-ui;
        min-height: 100vh;
      }

      body {
        background: hsl(var(--themeColor), 20%, 8%);
        color: hsl(var(--themeColor), 100%, 92%);
        font-family: "Kenyan Coffee", "Rajdhani", system-ui;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        overflow-x: hidden;
      }

      /* MyBonzo Custom Styles */
      .mybonzo-hero {
        background: linear-gradient(
          135deg,
          hsl(var(--themeColor), 20%, 10%) 0%,
          hsl(var(--themeColor), 40%, 12%) 100%
        );
        border: 1px solid hsl(var(--themeColor), 30%, 18%);
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .mybonzo-card {
        background: rgba(0, 0, 0, 0.4);
        border: 1px solid hsl(var(--themeColor), 100%, 50%, 0.3);
        border-radius: 12px;
        transition: all 0.3s ease;
        position: relative;
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .mybonzo-card:hover {
        border-color: hsl(var(--themeColor), 100%, 50%);
        box-shadow: 0 8px 25px hsl(var(--themeColor), 100%, 50%, 0.2);
        transform: translateY(-2px);
      }

      .mybonzo-btn {
        background: linear-gradient(
          135deg,
          hsl(var(--themeColor), 100%, 50%) 0%,
          hsl(var(--themeColor), 80%, 40%) 100%
        );
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-family: "Rajdhani", system-ui;
      }

      .mybonzo-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px hsl(var(--themeColor), 100%, 50%, 0.4);
      }

      .cyberpunk-grid {
        background-image: linear-gradient(
            hsl(var(--themeColor), 100%, 50%, 0.1) 1px,
            transparent 1px
          ),
          linear-gradient(
            90deg,
            hsl(var(--themeColor), 100%, 50%, 0.1) 1px,
            transparent 1px
          );
        background-size: 20px 20px;
        min-height: 100vh;
      }

      .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #4ade80;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
      }

      .neon-text {
        color: hsl(var(--themeColor), 100%, 50%);
        text-shadow: 0 0 10px hsl(var(--themeColor), 100%, 50%, 0.5);
      }

      .glass-effect {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      /* Navigation Styles */
      .ai-workers-section {
        padding: 2rem 0;
        min-height: 100vh;
        color: hsl(var(--themeColor), 100%, 92%);
      }

      .section-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
      }

      .section-title {
        font-size: 3rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 1rem;
        font-family: "Neuropol", "Rajdhani", system-ui, sans-serif;
        letter-spacing: 0.1em;
      }

      .section-description {
        text-align: center;
        font-size: 1.2rem;
        margin-bottom: 3rem;
        opacity: 0.8;
      }

      /* Make the dynamic header about half as tall */
      .compact-header :where(nav, header) {
        --header-padding-y: 6px;
        --header-padding-x: 10px;
      }
      .compact-header :where(.header-container) {
        padding-top: 6px !important;
        padding-bottom: 6px !important;
      }
      .compact-header :where(.logo img) {
        height: 24px !important;
        width: auto;
      }
      .compact-header :where(.menu, .mobile-trigger) {
        margin-top: 0 !important;
        margin-bottom: 0 !important;
      }
      
      /* Global page spacing - all pages start 5px below banner */
      body main {
        padding-top: 5px !important;
        margin-top: 0 !important;
      }
      
      /* Ensure subpages use consistent top spacing */
      .page-content {
        padding-top: 5px !important;
        margin-top: 0 !important;
      }
      
      /* Override any other margin/padding that might interfere */
      main > section:first-child,
      main > div:first-child,
      main > article:first-child {
        margin-top: 0 !important;
        padding-top: 5px !important;
      }
    </style>
    
    <!-- MyBonzo Agents Bundle - Automatyczne uruchamianie 3 sekundy po załadowaniu -->
    <script src="/agents-bundle.min.js" defer></script>
    
    <!-- FloatingButtonsManager - Floating Buttons System -->
    <script type="module">
      // Initialize floating buttons after page load
      window.addEventListener('DOMContentLoaded', () => {
        console.log('🚀 Initializing Floating Buttons...');
        
        // DISABLED: Floating buttons moved to right panel
        console.log('✅ Floating buttons disabled - using right panel instead');
      });
    </script>
    
    <script>
      // Dodatkowe listener na ready event agentów
      window.addEventListener('mybonzo:agents:ready', (event) => {
        console.log('🎉 MyBonzo Agents System gotowy!', event.detail);
        
        // Notify other components that agents are ready
        if (window.GOOGLE_VOICE) {
          console.log('🔗 Łączę z istniejącym Google Voice API...');
          // Integrate with existing GoogleVoiceAgent if available
        }
      });
      
      // Fallback monitoring - sprawdzaj czy agenci są dostępni
      let agentCheckInterval = setInterval(() => {
        if (window.MyBonzoAgents && window.AGENTS_READY) {
          console.log('✅ Agenci MyBonzo dostępni globalnie');
          clearInterval(agentCheckInterval);
        }
      }, 1000);
      
      // Czyść interval po 30 sekundach
      setTimeout(() => {
        if (agentCheckInterval) {
          clearInterval(agentCheckInterval);
          console.warn('⚠️ Timeout sprawdzania dostępności agentów');
        }
      }, 30000);
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>

  <body>
    <!-- Accessibility Tools -->
    <AccessibilityTools />
    
    <!-- Background Animation - Lazy loaded -->
    <div class="bg-animation bg-animation-container" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1;">
      <div class="loading-spinner" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>
    </div>
    <div class="compact-header">
      <nav style="position: fixed; top: 0; left: 0; width: 100%; z-index: 20; background: rgba(13, 13, 13, 0.8); backdrop-filter: blur(16px); padding: 1rem;">
        <div style="display: flex; align-items: center; justify-content: space-between; gap: 2rem;">
          <a href="/" style="display: flex; align-items: center; gap: 0.5rem;">
            <img src="/favicon.svg" alt={siteTitle} width="24" height="24" />
            <span style="color: white; font-weight: bold;">{siteTitle}</span>
          </a>
          <a href="/dodatki" style="display: flex; align-items: center; gap: 0.5rem; color: #1be1ff; text-decoration: none; padding: 0.5rem 1rem; border: 1px solid #1be1ff/30; border-radius: 6px; background: rgba(27, 225, 255, 0.1); transition: all 0.3s ease;">
            <span style="font-size: 1.2em;">🔧</span>
            <span style="font-weight: 600;">Dodatki</span>
          </a>
        </div>
      </nav>
    </div>
    <!-- Page content -->
    <main id="main-content" class="min-h-svh cyberpunk-grid" tabindex="-1" style="padding-top: 120px;">
      <slot />
    </main>

    <script>

      // Performance optimizations
      (async function initPerformanceOptimizations() {
        // Service Worker registration
        if ('serviceWorker' in navigator) {
          try {
            await navigator.serviceWorker.register('/sw.js');
            console.log('✅ Service Worker registered');
          } catch (error) {
            console.warn('⚠️ Service Worker registration failed:', error);
          }
        }

        // Preload critical resources
        const criticalResources = [
          '/api/auth/status',
          '/api/workers/status'
        ];

        criticalResources.forEach(url => {
          fetch(url, { method: 'HEAD' }).catch(() => {});
        });

        // Lazy load heavy components after initial render
        const lazyComponentsConfig = {
          '.bg-animation': () => import('/src/components/BgAnimation.svelte'),
          // '.admin-dashboard': () => import('/src/components/admin/AdminDashboard.tsx'),
          '.ai-workers-manager': () => import('/src/components/AIWorkersManager.svelte')
        };

        // Intersection observer for lazy loading
        const lazyObserver = new IntersectionObserver((entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting) {
              const className = entry.target.className.split(' ')[0];
              const loader = lazyComponentsConfig[`.${className}`];
              if (loader) {
                try {
                  await loader();
                  lazyObserver.unobserve(entry.target);
                } catch (error) {
                  console.warn('Failed to lazy load component:', error);
                }
              }
            }
          });
        }, { threshold: 0.1, rootMargin: '50px' });

        // Observe elements for lazy loading
        Object.keys(lazyComponentsConfig).forEach(selector => {
          const elements = document.querySelectorAll(selector);
          elements.forEach(el => lazyObserver.observe(el));
        });

        // Performance monitoring
        const perfMonitor = {
          metrics: new Map(),
          start(name) {
            this.metrics.set(name, performance.now());
          },
          end(name) {
            const start = this.metrics.get(name);
            if (start) {
              const duration = performance.now() - start;
              if (duration > 100) {
                console.warn(`Slow operation: ${name} took ${duration.toFixed(2)}ms`);
              }
              this.metrics.delete(name);
              return duration;
            }
          }
        };

        // Monitor page load performance
        window.addEventListener('load', () => {
          setTimeout(() => {
            const loadTime = performance.now();
            console.log(`📊 Page load time: ${loadTime.toFixed(2)}ms`);
            
            // Report to analytics if needed
            if (loadTime > 3000) {
              console.warn('⚠️ Page load time exceeded 3 seconds');
            }
          }, 0);
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
          lazyObserver.disconnect();
        });
      })();
    </script>
  </body>
</html>
