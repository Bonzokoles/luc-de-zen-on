/**
 * MYBONZO SYSTEM DIAGNOSTICS
 * Kompleksowy system diagnostyki bazujƒÖcy na SYSTEM_ANALYSIS.md
 * Implementuje walidacjƒô konfiguracji, testy integracji i monitoring systemu
 */

// ==================================================
// INTERFACES & TYPES
// ==================================================

interface SystemConfig {
  workerBaseUrl: string;
  apiKeys: {
    openai?: string;
    cloudflare?: string;
    huggingface?: string;
    anthropic?: string;
  };
  environment: 'development' | 'staging' | 'production';
}

interface DiagnosticsResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
  info: string[];
  timestamp: string;
}

interface HealthCheck {
  name: string;
  status: 'ok' | 'warning' | 'error';
  message: string;
  responseTime?: number;
}

// ==================================================
// SYSTEM CONFIG VALIDATOR 
// ==================================================

export function validateSystemConfig(): DiagnosticsResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  const info: string[] = [];

  console.log('üîç MyBonzo - Rozpoczynam walidacjƒô konfiguracji systemu...');

  // Sprawd≈∫ zmienne ≈õrodowiskowe - podstawowe
  if (!import.meta.env.PUBLIC_WORKER_BASE_URL) {
    errors.push('‚ùå KRYTYCZNY: Brak PUBLIC_WORKER_BASE_URL');
  } else {
    info.push('‚úÖ PUBLIC_WORKER_BASE_URL skonfigurowany');
  }

  if (!import.meta.env.OPENAI_API_KEY) {
    errors.push('‚ùå KRYTYCZNY: Brak OPENAI_API_KEY');
  } else {
    info.push('‚úÖ OPENAI_API_KEY skonfigurowany');
  }

  if (!import.meta.env.CLOUDFLARE_API_TOKEN) {
    warnings.push('‚ö†Ô∏è Brak CLOUDFLARE_API_TOKEN - ograniczone funkcje Workers');
  } else {
    info.push('‚úÖ CLOUDFLARE_API_TOKEN skonfigurowany');
  }

  // Sprawd≈∫ dodatkowe klucze API
  if (!import.meta.env.HUGGINGFACE_API_KEY) {
    warnings.push('‚ö†Ô∏è Brak HUGGINGFACE_API_KEY - brak dostƒôpu do modeli HF');
  } else {
    info.push('‚úÖ HUGGINGFACE_API_KEY skonfigurowany');
  }

  if (!import.meta.env.ANTHROPIC_API_KEY) {
    warnings.push('‚ö†Ô∏è Brak ANTHROPIC_API_KEY - brak dostƒôpu do Claude');
  } else {
    info.push('‚úÖ ANTHROPIC_API_KEY skonfigurowany');
  }

  // Sprawd≈∫ format URL Workers
  const workerUrl = import.meta.env.PUBLIC_WORKER_BASE_URL;
  if (workerUrl && !workerUrl.includes('workers.dev') && !workerUrl.includes('localhost')) {
    errors.push('‚ùå Nieprawid≈Çowy format URL Workers - powinien zawieraƒá "workers.dev" lub "localhost"');
  }

  // Sprawd≈∫ environment
  const env = import.meta.env.MODE;
  if (!['development', 'production', 'preview'].includes(env)) {
    warnings.push(`‚ö†Ô∏è Nieznany tryb ≈õrodowiska: ${env}`);
  } else {
    info.push(`‚úÖ ≈örodowisko: ${env}`);
  }

  return {
    valid: errors.length === 0,
    errors,
    warnings,
    info,
    timestamp: new Date().toISOString()
  };
}

// ==================================================
// CLOUDFLARE WORKER HEALTH CHECKS
// ==================================================

export async function checkCloudflareWorkers(): Promise<HealthCheck[]> {
  const checks: HealthCheck[] = [];
  const workerUrl = import.meta.env.PUBLIC_WORKER_BASE_URL;

  if (!workerUrl) {
    checks.push({
      name: 'Cloudflare Workers',
      status: 'error',
      message: 'Brak konfiguracji URL Workers'
    });
    return checks;
  }

  // Test podstawowy endpoint
  try {
    const startTime = Date.now();
    const response = await fetch(`${workerUrl}/health`, {
      method: 'GET',
      signal: AbortSignal.timeout(5000)
    });
    const responseTime = Date.now() - startTime;

    if (response.ok) {
      checks.push({
        name: 'Worker Health Endpoint',
        status: 'ok',
        message: `Worker odpowiada prawid≈Çowo`,
        responseTime
      });
    } else {
      checks.push({
        name: 'Worker Health Endpoint',
        status: 'warning',
        message: `Worker odpowiada z kodem ${response.status}`,
        responseTime
      });
    }
  } catch (error) {
    checks.push({
      name: 'Worker Health Endpoint',
      status: 'error',
      message: `B≈ÇƒÖd po≈ÇƒÖczenia: ${error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd'}`
    });
  }

  // Test API endpoints
  const apiEndpoints = [
    '/api/ai-workers',
    '/api/chat',
    '/api/music/library'
  ];

  for (const endpoint of apiEndpoints) {
    try {
      const startTime = Date.now();
      const response = await fetch(`${workerUrl}${endpoint}`, {
        method: 'GET',
        signal: AbortSignal.timeout(3000)
      });
      const responseTime = Date.now() - startTime;

      checks.push({
        name: `API ${endpoint}`,
        status: response.ok ? 'ok' : 'warning',
        message: response.ok ? 'Endpoint dostƒôpny' : `Kod ${response.status}`,
        responseTime
      });
    } catch (error) {
      checks.push({
        name: `API ${endpoint}`,
        status: 'error',
        message: `Niedostƒôpny: ${error instanceof Error ? error.message : 'Timeout'}`
      });
    }
  }

  return checks;
}

// ==================================================
// SYSTEM DEPENDENCIES CHECK
// ==================================================

export async function checkSystemDependencies(): Promise<DiagnosticsResult> {
  const errors: string[] = [];
  const warnings: string[] = [];
  const info: string[] = [];

  console.log('üì¶ MyBonzo - Sprawdzam zale≈ºno≈õci systemu...');

  // Sprawd≈∫ kluczowe modu≈Çy
  const criticalModules = [
    'astro',
    '@astrojs/cloudflare',
    '@astrojs/tailwind',
    'svelte',
    'react'
  ];

  try {
    // Symulacja sprawdzenia modu≈Ç√≥w (w rzeczywisto≈õci trzeba by u≈ºyƒá import.meta.resolve)
    info.push(`‚úÖ Sprawdzono ${criticalModules.length} kluczowych modu≈Ç√≥w`);
  } catch (error) {
    errors.push(`‚ùå B≈ÇƒÖd sprawdzania modu≈Ç√≥w: ${error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd'}`);
  }

  // Sprawd≈∫ wersjƒô Node.js (je≈õli dostƒôpne)
  try {
    if (typeof process !== 'undefined' && process.version) {
      const nodeVersion = process.version;
      const majorVersion = parseInt(nodeVersion.substring(1).split('.')[0]);
      
      if (majorVersion < 18) {
        warnings.push(`‚ö†Ô∏è Stara wersja Node.js: ${nodeVersion} (zalecane >=18)`);
      } else {
        info.push(`‚úÖ Node.js: ${nodeVersion}`);
      }
    }
  } catch {
    info.push('‚ÑπÔ∏è Nie mo≈ºna sprawdziƒá wersji Node.js (≈õrodowisko browser)');
  }

  return {
    valid: errors.length === 0,
    errors,
    warnings,
    info,
    timestamp: new Date().toISOString()
  };
}

// ==================================================
// FULL SYSTEM DIAGNOSTICS
// ==================================================

export async function runFullSystemDiagnostics(): Promise<{
  config: DiagnosticsResult;
  dependencies: DiagnosticsResult;
  workers: HealthCheck[];
  summary: {
    overallStatus: 'healthy' | 'warning' | 'critical';
    totalErrors: number;
    totalWarnings: number;
    recommendations: string[];
  }
}> {
  console.log('üöÄ MyBonzo - Rozpoczynam pe≈ÇnƒÖ diagnostykƒô systemu...');
  
  const startTime = Date.now();

  // Wykonaj wszystkie sprawdzenia
  const [config, dependencies, workers] = await Promise.all([
    Promise.resolve(validateSystemConfig()),
    checkSystemDependencies(),
    checkCloudflareWorkers()
  ]);

  const totalErrors = config.errors.length + dependencies.errors.length + 
    workers.filter(w => w.status === 'error').length;
  
  const totalWarnings = config.warnings.length + dependencies.warnings.length + 
    workers.filter(w => w.status === 'warning').length;

  // Okre≈õl og√≥lny status
  let overallStatus: 'healthy' | 'warning' | 'critical' = 'healthy';
  if (totalErrors > 0) {
    overallStatus = 'critical';
  } else if (totalWarnings > 0) {
    overallStatus = 'warning';
  }

  // Generuj rekomendacje
  const recommendations: string[] = [];
  
  if (config.errors.length > 0) {
    recommendations.push('Skonfiguruj brakujƒÖce zmienne ≈õrodowiskowe w .env');
  }
  
  if (workers.some(w => w.status === 'error')) {
    recommendations.push('Sprawd≈∫ konfiguracjƒô i deployment Cloudflare Workers');
  }
  
  if (totalWarnings > 3) {
    recommendations.push('Rozwa≈º aktualizacjƒô zale≈ºno≈õci i konfiguracji');
  }

  const diagnosticsTime = Date.now() - startTime;
  console.log(`‚úÖ Diagnostyka zako≈Ñczona w ${diagnosticsTime}ms`);

  return {
    config,
    dependencies,
    workers,
    summary: {
      overallStatus,
      totalErrors,
      totalWarnings,
      recommendations
    }
  };
}

// ==================================================
// DIAGNOSTIC REPORTER
// ==================================================

export function generateDiagnosticReport(diagnostics: Awaited<ReturnType<typeof runFullSystemDiagnostics>>): string {
  const { config, dependencies, workers, summary } = diagnostics;
  
  let report = `
# üîç MyBonzo System Diagnostics Report
Generated: ${new Date().toLocaleString('pl-PL')}

## üìä Podsumowanie
- **Status og√≥lny**: ${summary.overallStatus === 'healthy' ? '‚úÖ Zdrowy' : 
  summary.overallStatus === 'warning' ? '‚ö†Ô∏è Ostrze≈ºenia' : '‚ùå Krytyczny'}
- **B≈Çƒôdy**: ${summary.totalErrors}
- **Ostrze≈ºenia**: ${summary.totalWarnings}

## üîß Konfiguracja Systemu
`;

  if (config.errors.length > 0) {
    report += `\n### ‚ùå B≈Çƒôdy konfiguracji:\n${config.errors.map(e => `- ${e}`).join('\n')}`;
  }
  
  if (config.warnings.length > 0) {
    report += `\n### ‚ö†Ô∏è Ostrze≈ºenia konfiguracji:\n${config.warnings.map(w => `- ${w}`).join('\n')}`;
  }

  report += `\n### ‚úÖ Informacje:\n${config.info.map(i => `- ${i}`).join('\n')}`;

  report += `\n\n## ‚òÅÔ∏è Status Cloudflare Workers\n`;
  workers.forEach(check => {
    const statusIcon = check.status === 'ok' ? '‚úÖ' : check.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
    const responseInfo = check.responseTime ? ` (${check.responseTime}ms)` : '';
    report += `- ${statusIcon} **${check.name}**: ${check.message}${responseInfo}\n`;
  });

  if (summary.recommendations.length > 0) {
    report += `\n## üí° Rekomendacje\n${summary.recommendations.map(r => `- ${r}`).join('\n')}`;
  }

  return report;
}

// ==================================================
// EXPORTS
// ==================================================

export type { SystemConfig, DiagnosticsResult, HealthCheck };