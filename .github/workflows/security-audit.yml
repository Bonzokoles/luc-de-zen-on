name: Secrets Management & Security Audit

on:
  schedule:
    # Daily security audit at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      audit_type:
        description: "Type of security audit"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - secrets
          - dependencies

jobs:
  secrets-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Audit for exposed secrets
        run: |
          echo "🔍 Scanning for exposed secrets..."

          # Check for hardcoded secrets in code
          if grep -r -i "password\|secret\|token\|key" --include="*.js" --include="*.ts" --include="*.json" --include="*.md" . \
            --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist \
            | grep -v "process.env" | grep -v "secrets." | grep -v "GITHUB_TOKEN" | grep -v "README" | grep -v "SECURITY"; then
            echo "⚠️  Potential exposed secrets found!"
            exit 1
          else
            echo "✅ No exposed secrets detected"
          fi

      - name: Check for Cloudflare Secrets Store compliance
        run: |
          echo "🔐 Checking Cloudflare Secrets Store configuration..."

          # Verify wrangler.toml doesn't contain secrets
          if grep -E "(apiToken|accountId|secret|password|key)" wrangler.toml | grep -v "REPLACE_WITH"; then
            echo "⚠️  Secrets found in wrangler.toml - use Cloudflare Secrets Store!"
            exit 1
          else
            echo "✅ wrangler.toml is clean of secrets"
          fi

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: |
          echo "📦 Auditing dependencies..."
          pnpm audit --audit-level moderate

      - name: Check for outdated packages
        run: |
          echo "⏰ Checking for outdated packages..."
          pnpm outdated || echo "Some packages may be outdated"

      - name: Generate dependency report
        run: |
          echo "📊 Generating dependency report..."
          pnpm list --depth=0 > dependencies-report.txt
          echo "Dependencies report saved to dependencies-report.txt"

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependencies-report.txt

  compliance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check branch protection compliance
        run: |
          echo "🛡️  Checking branch protection compliance..."

          # Verify CODEOWNERS exists
          if [ ! -f ".github/CODEOWNERS" ]; then
            echo "❌ CODEOWNERS file missing!"
            exit 1
          else
            echo "✅ CODEOWNERS file exists"
          fi

          # Verify SECURITY.md exists
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file missing!"
            exit 1
          else
            echo "✅ SECURITY.md file exists"
          fi

      - name: Validate workflow security
        run: |
          echo "🔒 Validating workflow security..."

          # Check for insecure workflow patterns
          if grep -r "secrets\." .github/workflows/ | grep -v "secrets.CLOUDFLARE_API_TOKEN\|secrets.CLOUDFLARE_ACCOUNT_ID\|secrets.GITHUB_TOKEN"; then
            echo "⚠️  Found potentially insecure secret usage in workflows"
            exit 1
          else
            echo "✅ Workflow secrets usage appears secure"
          fi

  report:
    needs: [secrets-audit, dependency-audit, compliance-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "# 🔒 Security Audit Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Results" >> security-report.md
          echo "" >> security-report.md

          if [ "${{ needs.secrets-audit.result }}" == "success" ]; then
            echo "✅ Secrets Audit: PASSED" >> security-report.md
          else
            echo "❌ Secrets Audit: FAILED" >> security-report.md
          fi

          if [ "${{ needs.dependency-audit.result }}" == "success" ]; then
            echo "✅ Dependency Audit: PASSED" >> security-report.md
          else
            echo "❌ Dependency Audit: FAILED" >> security-report.md
          fi

          if [ "${{ needs.compliance-check.result }}" == "success" ]; then
            echo "✅ Compliance Check: PASSED" >> security-report.md
          else
            echo "❌ Compliance Check: FAILED" >> security-report.md
          fi

          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Regularly review and rotate API tokens" >> security-report.md
          echo "- Keep dependencies updated" >> security-report.md
          echo "- Monitor branch protection rules" >> security-report.md
          echo "- Use Cloudflare Secrets Store for all secrets" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md

      - name: Send notification on failure
        if: failure()
        run: |
          echo "🚨 Security audit failed! Please review the security report and fix issues immediately."
