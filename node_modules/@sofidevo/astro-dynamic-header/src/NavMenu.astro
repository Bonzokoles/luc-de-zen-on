---
export interface Props {
  menuItems?: Array<{
    link: string;
    text: string;
    submenu?: Array<{
      link: string;
      text: string;
      submenu?: Array<{
        link: string;
        text: string;
      }>;
    }>;
  }>;
  showHomeLink?: boolean;
  homeText?: string;
}

const { menuItems = [], showHomeLink = true, homeText = "Home" } = Astro.props;

const pagePathname = Astro.url.pathname;
---

<script>
  function adjustSubsubmenuPositionOnResize() {
    const subsubmenus = document.querySelectorAll(
      ".subsubmenu"
    ) as NodeListOf<HTMLElement>;

    subsubmenus.forEach((subsubmenu) => {
      const rect = subsubmenu.getBoundingClientRect();
      const viewportWidth = window.innerWidth;

      if (rect.right > viewportWidth) {
        subsubmenu.style.right = "100%";
        subsubmenu.style.left = "auto";
      } else {
        subsubmenu.style.left = "100%";
        subsubmenu.style.right = "auto";
      }
    });
  }

  function handleSubsubmenuInteraction() {
    const parentItems = document.querySelectorAll(".submenu__item--secondary");

    parentItems.forEach((parentItem) => {
      const subsubmenu = parentItem.querySelector(".subsubmenu");

      if (subsubmenu) {
        const adjustPosition = () => {
          const viewportWidth = window.innerWidth;

          const originalDisplay = (subsubmenu as HTMLElement).style.display;
          const originalVisibility = (subsubmenu as HTMLElement).style
            .visibility;

          (subsubmenu as HTMLElement).style.display = "block";
          (subsubmenu as HTMLElement).style.visibility = "hidden";
          (subsubmenu as HTMLElement).style.left = "100%";
          (subsubmenu as HTMLElement).style.transform = "";

          const rect = subsubmenu.getBoundingClientRect();

          if (rect.right > viewportWidth) {
            (subsubmenu as HTMLElement).style.left = "-210%";
            (subsubmenu as HTMLElement).style.right = "auto";
            const leftRect = subsubmenu.getBoundingClientRect();

            if (leftRect.left < 0) {
              (subsubmenu as HTMLElement).style.left = "100%";
              const overflow = rect.right - viewportWidth + 30;
              (subsubmenu as HTMLElement).style.transform =
                `translateX(-${overflow}px)`;
            }
          }
          (subsubmenu as HTMLElement).style.display = originalDisplay;
          (subsubmenu as HTMLElement).style.visibility = originalVisibility;
        };

        const showSubsubmenu = () => {
          adjustPosition();

          (subsubmenu as HTMLElement).style.opacity = "1";
          (subsubmenu as HTMLElement).style.pointerEvents = "all";

          const isPositionedLeft =
            (subsubmenu as HTMLElement).style.left === "-100%";
          const transformDirection = isPositionedLeft ? "-2rem" : "2rem";

          const currentTransform = (subsubmenu as HTMLElement).style.transform;
          if (currentTransform && currentTransform.includes("translateX")) {
            const existingTranslate = currentTransform.match(
              /translateX\(([^)]+)\)/
            );
            if (existingTranslate) {
              const existingValue = existingTranslate[1];
              (subsubmenu as HTMLElement).style.transform =
                `translateX(calc(${existingValue} + ${transformDirection}))`;
            }
          } else {
            (subsubmenu as HTMLElement).style.transform =
              `${currentTransform} translateX(${transformDirection})`.trim();
          }
        };

        const hideSubsubmenu = () => {
          (subsubmenu as HTMLElement).style.opacity = "";
          (subsubmenu as HTMLElement).style.pointerEvents = "";
          (subsubmenu as HTMLElement).style.transform = "";
        };

        parentItem.addEventListener("mouseenter", showSubsubmenu);
        parentItem.addEventListener("mouseleave", hideSubsubmenu);
      }
    });
  }

  window.addEventListener("resize", adjustSubsubmenuPositionOnResize);
  document.addEventListener("DOMContentLoaded", () => {
    adjustSubsubmenuPositionOnResize();
    handleSubsubmenuInteraction();
  });
</script>

<nav class="header__menu" id="header-menu">
  <ul class="menu">
    {
      showHomeLink && pagePathname !== "/" && (
        <li class="header__item">
          <a class="menu__link" href="/" data-astro-prefetch="hover">
            {homeText}
          </a>
        </li>
      )
    }
    {
      menuItems.map((item) => (
        <li class="menu__item">
          <a class="menu__link" href={item.link}>
            {item.text}
            {item.submenu && (
              <iconify-icon
                class="iconify-arrow"
                icon="codicon:triangle-down"
                width="15"
                height="15"
              />
            )}
          </a>
          {item.submenu && (
            <ul class="submenu">
              {item.submenu.map((sub) => (
                <li class="submenu__item submenu__item--secondary">
                  <a href={sub.link}>
                    {sub.text}
                    {sub.submenu && sub.submenu.length > 0 && (
                      <iconify-icon
                        class="iconify-arrow"
                        icon="codicon:triangle-down"
                        width="15"
                        height="15"
                      />
                    )}
                  </a>
                  {sub.submenu && (
                    <ul class="subsubmenu">
                      {sub.submenu.map((subsub) => (
                        <li class="submenu__item--tertiary">
                          <a href={subsub.link}>{subsub.text}</a>
                        </li>
                      ))}
                    </ul>
                  )}
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<style>
  .header__menu {
    @media (width < 768px) {
      display: none;
    }
  }

  .menu {
    padding: 1rem;
    list-style: none;
    display: flex;
    align-items: center;
    flex-wrap: wrap;

    @media (width < 768px) {
      flex-direction: column;
    }
  }

  .menu__link {
    text-decoration: none;
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.8rem;
    color: color-mix(in srgb, var(--light-spot-color, #00ffff) 30%, white 70%);
    position: relative;
  }

  @media screen and (min-width: 768px) {
    .menu__link::after {
      position: absolute;
      top: 25px;
      left: 0;
      content: "";
      width: 100%;
      transform: scale(0);
      transform-origin: 1;
      height: 2px;
      transition: transform 0.3s ease;
      background: var(--light-spot-color, #00ffff);
    }

    .menu__link:hover::after {
      transform: scale(1);
    }
  }

  .iconify-arrow {
    transition: transform 0.3s linear;
  }

  .menu__link:hover > .iconify-arrow {
    transform: rotate(180deg);
  }

  .submenu,
  .subsubmenu {
    color: color-mix(in srgb, var(--light-spot-color, #00ffff) 20%, white 80%);
    background-color: #171717;
    border: 0.5px solid #3e1c71;
    position: absolute;
    flex-direction: column;
    gap: 0.4rem;
    padding: 2rem 1rem;
    border-radius: 0.6rem;
    transition: transform 0.3s ease-in-out;
    pointer-events: none;
    opacity: 0;
    text-wrap: nowrap;
  }

  .menu__item {
    padding: 6px;
    position: relative;
  }

  .submenu a,
  .subsubmenu a {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 4rem;
    border-radius: 0.4rem;
    color: #fff;
    color: var(--color-tertiary, #fff);
  }

  .submenu__item--secondary,
  .submenu__item--tertiary {
    position: relative;
  }

  .submenu__item--secondary a,
  .submenu__item--tertiary a {
    padding: 2rem;
  }

  .submenu__item--secondary a:hover,
  .submenu__item--tertiary a:hover {
    background: rgb(71, 70, 70);
    color: white;
  }

  .submenu {
    padding: 1rem;
    right: -23px;
  }

  .submenu::after {
    content: "";
    position: absolute;
    top: -4rem;
    width: 100%;
    z-index: -3;
    pointer-events: none;
    height: 10rem;
  }

  .subsubmenu {
    top: 0;
    left: auto;
    right: auto;
    min-width: 193px;
  }

  .subsubmenu::before {
    content: "";
    position: absolute;
    top: -4rem;
    z-index: -1;
    pointer-events: none;
    height: 10rem;
    width: 20rem;
    height: 14rem;
  }

  .subsubmenu::after {
    content: "";
    position: absolute;
    top: -14px;
    right: 3rem;
    width: 100%;
    z-index: -3;
    height: 21rem;
  }

  .submenu li {
    width: 100%;
  }

  .menu__item:hover > .submenu {
    opacity: 1;
    pointer-events: all;
    transform: translateY(2.5rem);
  }

  .menu__item:hover > .submenu::after {
    pointer-events: all;
  }

  .submenu li:hover > .subsubmenu {
    opacity: 1;
    pointer-events: all;
  }

  .submenu li:hover > .subsubmenu::before {
    pointer-events: all;
  }

  .submenu li:hover > .subsubmenu::after {
    pointer-events: all;
  }
</style>
